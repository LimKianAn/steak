{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Staking API",
    "description": "The Blockdaemon Staking API simplifies and streamlines institutional cryptocurrency staking. The API allows developers to interact with blockchain networks and perform various staking-related operations, such as delegating and undelegating tokens, in a single, unified interface.\n\nWith the Staking API, you can quickly and easily build and deploy applications that automate staking activities and increase efficiency in your blockchain operations.",
    "contact": {
      "name": "Blockdaemon",
      "email": "info@blockdaemon.com",
      "url": "https://blockdaemon.com"
    },
    "x-logo": {
      "url": "https://assets-global.website-files.com/633c5e06513fa35f3391a5f9/645d33beb6fa65f6cfb95eb8_BD%20Logo%20Stack%20-%20Purple.svg",
      "backgroundColor": "#fafafa",
      "altText": "Blockdaemon logo"
    }
  },
  "x-readme": {
    "explorer-enabled": false
  },
  "servers": [
    {
      "url": "https://svc.blockdaemon.com/boss"
    }
  ],
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "description": "When signing up for a staking account, you are provided with an API key.\n\nTo authenticate a Staking API request, pass your API key in the `X-API-Key` header.",
        "type": "apiKey",
        "in": "header",
        "name": "X-API-KEY"
      }
    },
    "parameters": {
      "Custodian": {
        "name": "custodian",
        "in": "path",
        "required": true,
        "description": "A filter on the type of custodians.",
        "schema": {
          "type": "string",
          "description": "Custodian handle",
          "enum": [
            "metamask"
          ]
        }
      },
      "CustomerId": {
        "name": "customer_id",
        "in": "query",
        "description": "Unique ID of the customer",
        "required": false,
        "schema": {
          "type": "string",
          "description": "Unique identifier for a customer",
          "example": "SatoshiNakamoto-xUYJbPw9hw",
          "minimum": 1
        }
      },
      "Limit": {
        "name": "limit",
        "in": "query",
        "description": "the limit of validators to return",
        "required": false,
        "schema": {
          "type": "integer",
          "default": 50
        }
      },
      "Network": {
        "name": "network",
        "in": "path",
        "description": "Protocol-specific network",
        "required": true,
        "schema": {
          "type": "string",
          "description": "Protocol-specific network.",
          "enum": [
            "mainnet",
            "localnet",
            "goerli",
            "prater",
            "holesky",
            "testnet",
            "devnet",
            "kusama",
            "westend",
            "preprod",
            "fuji",
            "local"
          ]
        }
      },
      "Networks": {
        "name": "networks",
        "in": "query",
        "required": false,
        "description": "A filter on the type of networks.",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Protocol-specific network.",
            "enum": [
              "mainnet",
              "localnet",
              "goerli",
              "prater",
              "holesky",
              "testnet",
              "devnet",
              "kusama",
              "westend",
              "preprod",
              "fuji",
              "local"
            ]
          }
        }
      },
      "Offset": {
        "name": "offset",
        "in": "query",
        "description": "the offset of validators to return",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "Page": {
        "in": "query",
        "name": "page",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int64",
          "minimum": 1,
          "default": 1
        },
        "description": "The result set page to view"
      },
      "PerPage": {
        "in": "query",
        "name": "per_page",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int64",
          "minimum": 1,
          "maximum": 1000,
          "default": 250
        },
        "description": "The number of items to include on a single page"
      },
      "PlanId": {
        "name": "planId",
        "in": "path",
        "description": "Plan identifier",
        "required": true,
        "schema": {
          "type": "string",
          "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
          "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
        }
      },
      "SkipOnchainValidatorStatus": {
        "name": "skip_onchain_status",
        "in": "query",
        "description": "Flag to skip retrieving onchain status",
        "schema": {
          "type": "boolean"
        }
      },
      "StakeAccountsPerPage": {
        "in": "query",
        "name": "per_page",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int64",
          "minimum": 1,
          "maximum": 50,
          "default": 50
        },
        "description": "The number of items to include on a single page"
      },
      "PlanStatus": {
        "name": "plan_status",
        "in": "path",
        "description": "Validator plan status",
        "required": true,
        "schema": {
          "type": "string",
          "description": "Staking API validator status",
          "x-go-type": "models.ValidatorStatus",
          "x-go-type-import": {
            "path": "go.blockdaemon.com/nodeq-server/pkg/models",
            "name": "models"
          }
        }
      },
      "Protocol": {
        "name": "protocol",
        "in": "path",
        "description": "Protocol handle",
        "required": true,
        "schema": {
          "type": "string",
          "description": "Blockchain protocol.",
          "enum": [
            "ethereum",
            "polkadot",
            "solana",
            "cosmos",
            "polygon",
            "near",
            "cardano",
            "avalanche",
            "binance"
          ]
        }
      },
      "Protocols": {
        "name": "protocols",
        "in": "query",
        "required": false,
        "description": "A filter on the type of protocols.",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          }
        }
      },
      "Providers": {
        "name": "providers",
        "in": "query",
        "required": false,
        "description": "A filter on the type of providers.",
        "schema": {
          "type": "array",
          "items": {
            "description": "Cloud provider which will host the node.",
            "x-go-type": "models.ProviderID",
            "x-go-type-import": {
              "path": "go.blockdaemon.com/nodeq-server/pkg/models",
              "name": "models"
            }
          }
        }
      },
      "Regions": {
        "name": "regions",
        "in": "query",
        "required": false,
        "description": "A filter on the type of regions.",
        "schema": {
          "type": "array",
          "items": {
            "description": "cloud provider's zone code",
            "type": "string"
          }
        }
      },
      "StakeId": {
        "name": "stake_id",
        "in": "path",
        "required": true,
        "description": "ID of the stake to retrieve.",
        "schema": {
          "description": "Unique stake identifier.",
          "type": "string",
          "format": "base58",
          "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
        }
      },
      "StakeIntentId": {
        "name": "stake_intent_id",
        "in": "path",
        "required": true,
        "description": "ID of the stake intent to retrieve.",
        "schema": {
          "type": "string",
          "format": "base58",
          "description": "Unique idenifier for a group of stakes.",
          "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
        }
      },
      "Summary": {
        "name": "summary",
        "in": "query",
        "description": "Flag to return a summary of the schema information",
        "schema": {
          "type": "boolean"
        }
      },
      "WalletAddress": {
        "name": "wallet_address",
        "in": "query",
        "required": false,
        "description": "User wallet address.",
        "schema": {
          "type": "string",
          "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
          "format": "hex",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
        }
      },
      "MevEnabled": {
        "in": "query",
        "name": "mev_enabled",
        "required": false,
        "schema": {
          "type": "boolean"
        },
        "description": "A filter on MEV on/off"
      },
      "ClientID": {
        "name": "X-Client-ID",
        "in": "header",
        "description": "Unique ID of the client/customer",
        "schema": {
          "type": "string",
          "minLength": 1
        },
        "required": true
      },
      "IdempotencyKey": {
        "in": "header",
        "name": "Idempotency-Key",
        "description": "the unique idempotency key for this request",
        "example": "f1c971b4-7114-4c4b-8ad2-a6f9e33e2cd0",
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "required": false
      },
      "EthereumExitEpoch": {
        "name": "epoch",
        "in": "query",
        "schema": {
          "type": "integer",
          "description": "Earliest epoch when voluntary exit can be processed.\nIf not provided the earliest possible epoch will be fetched from the network.\n",
          "format": "uint64",
          "example": 1001
        }
      },
      "EthereumNetwork": {
        "name": "network",
        "in": "path",
        "description": "Ethereum network",
        "required": true,
        "schema": {
          "type": "string",
          "description": "Ethereum network",
          "enum": [
            "mainnet",
            "holesky"
          ]
        }
      },
      "EthereumValidatorIndexParam": {
        "name": "validator_index",
        "in": "query",
        "schema": {
          "type": "integer",
          "description": "Validator index",
          "format": "uint64",
          "example": 25
        }
      },
      "EthereumValidatorPublicKey": {
        "name": "validator_public_key",
        "in": "query",
        "description": "Validator public key",
        "schema": {
          "type": "string",
          "description": "Public Key of an asymmetric key-pair.",
          "format": "hex",
          "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
        }
      },
      "Wallets": {
        "name": "wallets",
        "description": "Array of wallets",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "ShowEthereumForkVersion": {
        "name": "show_fork_version",
        "in": "query",
        "description": "When this parameter is set to `true`, the response will include the field `fork_version` indicating the fork version constant for the currently active fork.\n\nThe fork versions values are unique for each network and each fork. As an example, here is the constants preset file for Mainnet:\nhttps://github.com/ethereum/consensus-specs/blob/dev/configs/mainnet.yaml",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "EthereumDepositsCount": {
        "name": "deposits_count",
        "in": "query",
        "description": "Number of deposits to include in the batch",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "uint",
          "minimum": 1
        }
      },
      "WithdrawalAddress": {
        "name": "withdrawal_address",
        "in": "path",
        "description": "Withdrawal address",
        "required": true,
        "schema": {
          "type": "string",
          "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
          "format": "hex",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
        }
      },
      "SolanaDelegatorAddress": {
        "name": "delegator_address",
        "in": "query",
        "required": false,
        "description": "A filter on the delegator address",
        "schema": {
          "type": "string",
          "description": "Public Key of an asymmetric key-pair.",
          "format": "base58",
          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
        }
      },
      "SolanaWithdrawalAuthorityAddress": {
        "name": "withdrawal_authority",
        "in": "query",
        "required": false,
        "description": "A filter on the withdrawal authority address",
        "schema": {
          "type": "string",
          "description": "Public Key of an asymmetric key-pair.",
          "format": "base58",
          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
        }
      },
      "SolanaStakingAuthorityAddress": {
        "name": "staking_authority",
        "in": "query",
        "required": false,
        "description": "A filter on the staking authority address",
        "schema": {
          "type": "string",
          "description": "Public Key of an asymmetric key-pair.",
          "format": "base58",
          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
        }
      },
      "NearNetwork": {
        "name": "network",
        "in": "path",
        "description": "NEAR network",
        "required": true,
        "schema": {
          "type": "string",
          "description": "NEAR network",
          "enum": [
            "mainnet",
            "testnet",
            "localnet"
          ]
        }
      },
      "PolygonNetwork": {
        "name": "network",
        "in": "path",
        "description": "Polygon network",
        "required": true,
        "schema": {
          "type": "string",
          "description": "Polygon network",
          "enum": [
            "mainnet",
            "goerli",
            "prater"
          ]
        }
      },
      "SolanaNetwork": {
        "name": "network",
        "in": "path",
        "description": "Solana network",
        "required": true,
        "schema": {
          "type": "string",
          "description": "Solana network",
          "enum": [
            "mainnet",
            "testnet"
          ]
        }
      },
      "CardanoNetwork": {
        "name": "network",
        "in": "path",
        "description": "Cardano network",
        "required": true,
        "schema": {
          "type": "string",
          "description": "Cardano network",
          "enum": [
            "mainnet",
            "preprod",
            "localnet"
          ]
        }
      },
      "NearWallets": {
        "name": "wallets",
        "description": "Array of NEAR wallets",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
            "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
            "example": "alice.near"
          }
        }
      },
      "PolkadotNetwork": {
        "name": "network",
        "in": "path",
        "description": "Polkadot network",
        "required": true,
        "schema": {
          "type": "string",
          "description": "Coin network",
          "enum": [
            "mainnet",
            "kusama",
            "westend"
          ]
        }
      },
      "AvaxNetwork": {
        "name": "network",
        "in": "path",
        "description": "Avalanche network",
        "required": true,
        "schema": {
          "type": "string",
          "description": "Avalanche network",
          "enum": [
            "mainnet",
            "fuji",
            "local"
          ]
        }
      },
      "CosmosNetwork": {
        "name": "network",
        "in": "path",
        "description": "Cosmos network",
        "required": true,
        "schema": {
          "type": "string",
          "description": "Cosmos network",
          "enum": [
            "mainnet",
            "testnet"
          ]
        }
      },
      "CosmosWallets": {
        "name": "wallets",
        "description": "Array of Cosmos wallets",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "bech32",
            "pattern": "^cosmos[1-9a-zA-Z]{39}$",
            "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
          }
        }
      },
      "BinanceNetwork": {
        "name": "network",
        "in": "path",
        "description": "Binance network",
        "required": true,
        "schema": {
          "type": "string",
          "description": "Binance beacon chain network",
          "enum": [
            "mainnet",
            "testnet"
          ]
        }
      },
      "BinanceWallets": {
        "name": "wallets",
        "description": "Array of Binance wallets",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Binance beacon chain address.",
            "format": "bech32",
            "pattern": "^bnb[0-9a-z]+$",
            "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
          }
        }
      }
    },
    "responses": {
      "Cancelled": {
        "description": "Cancellation Successful",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "description": "Success Response",
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Status Code",
                  "example": 201
                },
                "message": {
                  "type": "string",
                  "description": "Confirmation Message",
                  "example": "Canceled"
                }
              }
            }
          }
        }
      },
      "BootstrappingIntent": {
        "description": "Bootstrapping intent created",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "protocol",
                "network",
                "customer_id"
              ],
              "properties": {
                "protocol": {
                  "type": "string",
                  "description": "Blockchain protocol.",
                  "enum": [
                    "ethereum",
                    "polkadot",
                    "solana",
                    "cosmos",
                    "polygon",
                    "near",
                    "cardano",
                    "avalanche",
                    "binance"
                  ],
                  "example": "polygon"
                },
                "network": {
                  "type": "string",
                  "description": "Protocol-specific network.",
                  "enum": [
                    "mainnet",
                    "localnet",
                    "goerli",
                    "prater",
                    "holesky",
                    "testnet",
                    "devnet",
                    "kusama",
                    "westend",
                    "preprod",
                    "fuji",
                    "local"
                  ]
                },
                "polygon": {
                  "type": "object",
                  "description": "Polygon Bootstrapping Intent",
                  "required": [
                    "to",
                    "unsigned_transaction",
                    "wallet_address"
                  ],
                  "properties": {
                    "to": {
                      "type": "string",
                      "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                      "format": "hex",
                      "pattern": "^0x[a-fA-F0-9]{40}$",
                      "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                    },
                    "unsigned_transaction": {
                      "type": "string",
                      "format": "base64",
                      "description": "Generated unsigned transaction smart contract call data.",
                      "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                    },
                    "wallet_address": {
                      "type": "string",
                      "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                      "format": "hex",
                      "pattern": "^0x[a-fA-F0-9]{40}$",
                      "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                    }
                  }
                },
                "customer_id": {
                  "type": "string",
                  "description": "Unique identifier for a customer",
                  "example": "SatoshiNakamoto-xUYJbPw9hw",
                  "minimum": 1
                }
              }
            }
          }
        }
      },
      "DeactivationIntents": {
        "description": "List of deactivation intents.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "description": "Deactivation intents",
              "required": [
                "protocol",
                "network",
                "customer_id"
              ],
              "properties": {
                "protocol": {
                  "type": "string",
                  "description": "Blockchain protocol.",
                  "enum": [
                    "ethereum",
                    "polkadot",
                    "solana",
                    "cosmos",
                    "polygon",
                    "near",
                    "cardano",
                    "avalanche",
                    "binance"
                  ]
                },
                "network": {
                  "type": "string",
                  "description": "Protocol-specific network.",
                  "enum": [
                    "mainnet",
                    "localnet",
                    "goerli",
                    "prater",
                    "holesky",
                    "testnet",
                    "devnet",
                    "kusama",
                    "westend",
                    "preprod",
                    "fuji",
                    "local"
                  ]
                },
                "polygon": {
                  "type": "object",
                  "required": [
                    "items",
                    "wallet_address"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Unbond information",
                        "required": [
                          "nonce",
                          "amount",
                          "withdraw_epoch"
                        ],
                        "properties": {
                          "nonce": {
                            "type": "integer",
                            "description": "Number for one use only",
                            "example": 1
                          },
                          "amount": {
                            "type": "string",
                            "description": "Denomination of the cryptocurrency Polygon.",
                            "pattern": "^[1-9]\\d+$",
                            "example": "100"
                          },
                          "withdraw_epoch": {
                            "type": "integer"
                          }
                        }
                      }
                    },
                    "wallet_address": {
                      "type": "string",
                      "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                      "format": "hex",
                      "pattern": "^0x[a-fA-F0-9]{40}$",
                      "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                    }
                  }
                },
                "solana": {
                  "description": "List of deactivation intents",
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "required": [
                          "deactivate_intent_id",
                          "customer_id"
                        ],
                        "properties": {
                          "deactivate_intent_id": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Unique idenifier for deactivate intent.",
                            "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                          },
                          "customer_id": {
                            "type": "string",
                            "description": "Unique identifier for a customer",
                            "example": "SatoshiNakamoto-xUYJbPw9hw",
                            "minimum": 1
                          }
                        }
                      },
                      {
                        "type": "object",
                        "description": "Response to a new deactivation intent request.",
                        "required": [
                          "network",
                          "protocol",
                          "solana"
                        ],
                        "properties": {
                          "protocol": {
                            "type": "string",
                            "description": "Solana protocol",
                            "enum": [
                              "solana"
                            ]
                          },
                          "network": {
                            "type": "string",
                            "description": "Solana network",
                            "enum": [
                              "mainnet",
                              "testnet"
                            ]
                          },
                          "solana": {
                            "type": "object",
                            "description": "Result of the new Deactivate Intent request.",
                            "required": [
                              "total_deactivated_amount",
                              "deactivates",
                              "splits"
                            ],
                            "properties": {
                              "deactivates": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "description": "Result of the deactivation transaction request",
                                  "required": [
                                    "unsigned_transaction",
                                    "stake_account_authority",
                                    "stake_account_address",
                                    "withdrawal_authority",
                                    "stake_id",
                                    "amount",
                                    "expiration_time"
                                  ],
                                  "properties": {
                                    "unsigned_transaction": {
                                      "type": "string",
                                      "format": "base64",
                                      "description": "Generated unsigned transaction smart contract call data.",
                                      "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                                    },
                                    "stake_account_authority": {
                                      "type": "string",
                                      "description": "Public Key of an asymmetric key-pair.",
                                      "format": "base58",
                                      "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                      "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                    },
                                    "stake_account_address": {
                                      "type": "string",
                                      "description": "Public Key of an asymmetric key-pair.",
                                      "format": "base58",
                                      "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                      "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                    },
                                    "withdrawal_authority": {
                                      "type": "string",
                                      "description": "Public Key of an asymmetric key-pair.",
                                      "format": "base58",
                                      "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                      "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                    },
                                    "stake_id": {
                                      "description": "Unique stake identifier.",
                                      "type": "string",
                                      "format": "base58",
                                      "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                                    },
                                    "amount": {
                                      "type": "string",
                                      "description": "Denomination of the cryptocurrency Solana.",
                                      "pattern": "^[1-9]\\d+$",
                                      "example": "100"
                                    },
                                    "expiration_time": {
                                      "type": "integer",
                                      "description": "Transaction expiration time",
                                      "format": "int64",
                                      "example": 1689939023
                                    }
                                  }
                                }
                              },
                              "splits": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "description": "Result of the split transaction request",
                                  "required": [
                                    "unsigned_transaction",
                                    "stake_account_authority",
                                    "new_stake_account_address",
                                    "new_stake_id",
                                    "splitted_stake_account_address",
                                    "splitted_stake_id",
                                    "amount"
                                  ],
                                  "properties": {
                                    "unsigned_transaction": {
                                      "type": "string",
                                      "format": "base64",
                                      "description": "Generated unsigned transaction smart contract call data.",
                                      "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                                    },
                                    "stake_account_authority": {
                                      "type": "string",
                                      "description": "Public Key of an asymmetric key-pair.",
                                      "format": "base58",
                                      "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                      "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                    },
                                    "new_stake_account_address": {
                                      "type": "string",
                                      "description": "Public Key of an asymmetric key-pair.",
                                      "format": "base58",
                                      "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                      "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                    },
                                    "new_stake_id": {
                                      "description": "Unique stake identifier.",
                                      "type": "string",
                                      "format": "base58",
                                      "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                                    },
                                    "splitted_stake_account_address": {
                                      "type": "string",
                                      "description": "Public Key of an asymmetric key-pair.",
                                      "format": "base58",
                                      "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                      "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                    },
                                    "splitted_stake_id": {
                                      "description": "Unique stake identifier.",
                                      "type": "string",
                                      "format": "base58",
                                      "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                                    },
                                    "amount": {
                                      "type": "string",
                                      "description": "Denomination of the cryptocurrency Solana.",
                                      "pattern": "^[1-9]\\d+$",
                                      "example": "100"
                                    }
                                  }
                                }
                              },
                              "total_deactivated_amount": {
                                "type": "string",
                                "description": "Denomination of the cryptocurrency Solana.",
                                "pattern": "^[1-9]\\d+$",
                                "example": "100"
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "near": {
                  "type": "array",
                  "description": "List of deactivation intents",
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "required": [
                          "deactivate_intent_id",
                          "customer_id"
                        ],
                        "properties": {
                          "deactivate_intent_id": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Unique idenifier for deactivate intent.",
                            "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                          },
                          "customer_id": {
                            "type": "string",
                            "description": "Unique identifier for a customer",
                            "example": "SatoshiNakamoto-xUYJbPw9hw",
                            "minimum": 1
                          }
                        }
                      },
                      {
                        "type": "object",
                        "description": "Response to a new deactivation intent request.",
                        "required": [
                          "protocol",
                          "network",
                          "near"
                        ],
                        "properties": {
                          "protocol": {
                            "type": "string",
                            "description": "Near protocol",
                            "enum": [
                              "near"
                            ]
                          },
                          "network": {
                            "type": "string",
                            "description": "NEAR network",
                            "enum": [
                              "mainnet",
                              "testnet",
                              "localnet"
                            ]
                          },
                          "near": {
                            "type": "object",
                            "description": "NEAR Protocol Deactivate Intent",
                            "required": [
                              "to",
                              "unsigned_transaction",
                              "amount",
                              "wallet_address",
                              "public_key",
                              "expiration_time"
                            ],
                            "properties": {
                              "to": {
                                "type": "string",
                                "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                                "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                                "example": "alice.near"
                              },
                              "unsigned_transaction": {
                                "type": "string",
                                "format": "base64",
                                "description": "Generated unsigned transaction smart contract call data.",
                                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                              },
                              "amount": {
                                "type": "string",
                                "description": "Denomination of NEAR Protocol.",
                                "pattern": "^[1-9]\\d+$",
                                "example": "100000000000000000000000000"
                              },
                              "wallet_address": {
                                "type": "string",
                                "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                                "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                                "example": "alice.near"
                              },
                              "public_key": {
                                "type": "string",
                                "description": "Base58 encoded public key prefixed by ed25519, associated with the private key that will be used to sign the transaction.",
                                "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
                                "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
                              },
                              "expiration_time": {
                                "type": "integer",
                                "description": "Transaction expiration time",
                                "format": "int64",
                                "example": 1689939023
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "cardano": {
                  "type": "array",
                  "description": "List of deactivation intents",
                  "items": {
                    "type": "object",
                    "description": "Cardano Protocol Deactivate Intent",
                    "required": [
                      "deactivate_intent_id",
                      "base_address",
                      "unsigned_transaction"
                    ],
                    "properties": {
                      "deactivate_intent_id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique idenifier for deactivate intent.",
                        "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                      },
                      "base_address": {
                        "type": "string",
                        "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
                        "format": "bech32",
                        "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
                      },
                      "unsigned_transaction": {
                        "type": "string",
                        "format": "base64",
                        "description": "Generated unsigned transaction smart contract call data.",
                        "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                      }
                    }
                  }
                },
                "cosmos": {
                  "type": "array",
                  "description": "List of deactivation intents",
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "required": [
                          "deactivate_intent_id",
                          "customer_id"
                        ],
                        "properties": {
                          "deactivate_intent_id": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Unique idenifier for deactivate intent.",
                            "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                          },
                          "customer_id": {
                            "type": "string",
                            "description": "Unique identifier for a customer",
                            "example": "SatoshiNakamoto-xUYJbPw9hw",
                            "minimum": 1
                          }
                        }
                      },
                      {
                        "type": "object",
                        "description": "Response to a new deactivation intent request.",
                        "required": [
                          "protocol",
                          "network",
                          "cosmos"
                        ],
                        "properties": {
                          "protocol": {
                            "type": "string",
                            "description": "Cosmos protocol",
                            "enum": [
                              "cosmos"
                            ]
                          },
                          "network": {
                            "type": "string",
                            "description": "Cosmos network",
                            "enum": [
                              "mainnet",
                              "testnet"
                            ]
                          },
                          "cosmos": {
                            "type": "object",
                            "description": "Cosmos Deactivate Intent",
                            "required": [
                              "unsigned_transaction",
                              "delegator_address",
                              "validator_address",
                              "amount"
                            ],
                            "properties": {
                              "unsigned_transaction": {
                                "type": "string",
                                "format": "base64",
                                "description": "Generated unsigned transaction smart contract call data.",
                                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                              },
                              "delegator_address": {
                                "type": "string",
                                "description": "Public Key of an asymmetric key-pair.",
                                "format": "bech32",
                                "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                                "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                              },
                              "validator_address": {
                                "type": "string",
                                "description": "Public Key of an asymmetric key-pair.",
                                "format": "bech32",
                                "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                                "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                              },
                              "amount": {
                                "type": "string",
                                "description": "Denomination of the cryptocurrency Cosmos.",
                                "pattern": "^[1-9]\\d+$",
                                "example": "100"
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "binance": {
                  "type": "array",
                  "description": "List of deactivation intents",
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "required": [
                          "deactivate_intent_id",
                          "customer_id"
                        ],
                        "properties": {
                          "deactivate_intent_id": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Unique idenifier for deactivate intent.",
                            "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                          },
                          "customer_id": {
                            "type": "string",
                            "description": "Unique identifier for a customer",
                            "example": "SatoshiNakamoto-xUYJbPw9hw",
                            "minimum": 1
                          }
                        }
                      },
                      {
                        "type": "object",
                        "description": "Response to a new deactivation intent request.",
                        "required": [
                          "protocol",
                          "network",
                          "binance"
                        ],
                        "properties": {
                          "protocol": {
                            "type": "string",
                            "description": "Binance beacon chain protocol",
                            "enum": [
                              "binance"
                            ]
                          },
                          "network": {
                            "type": "string",
                            "description": "Binance beacon chain network",
                            "enum": [
                              "mainnet",
                              "testnet"
                            ]
                          },
                          "binance": {
                            "type": "object",
                            "description": "Binance Deactivate Intent",
                            "required": [
                              "unsigned_transaction",
                              "delegator_address",
                              "validator_address",
                              "amount"
                            ],
                            "properties": {
                              "unsigned_transaction": {
                                "type": "string",
                                "format": "base64",
                                "description": "Generated unsigned transaction smart contract call data.",
                                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                              },
                              "delegator_address": {
                                "type": "string",
                                "description": "Binance beacon chain address.",
                                "format": "bech32",
                                "pattern": "^bnb[0-9a-z]+$",
                                "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
                              },
                              "validator_address": {
                                "type": "string",
                                "description": "Binance beacon chain validator address.",
                                "format": "bech32",
                                "pattern": "^bva[0-9a-zA-Z]*$",
                                "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                              },
                              "amount": {
                                "type": "string",
                                "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
                                "pattern": "^[1-9]\\d+$",
                                "example": "10000000000"
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "customer_id": {
                  "type": "string",
                  "description": "Unique identifier for a customer",
                  "example": "SatoshiNakamoto-xUYJbPw9hw",
                  "minimum": 1
                }
              }
            }
          }
        }
      },
      "DetailsMetrics": {
        "description": "Custodian validator performance metrics",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "protocol",
                "network",
                "custodian",
                "details"
              ],
              "properties": {
                "protocol": {
                  "type": "string",
                  "description": "Blockchain protocol.",
                  "enum": [
                    "ethereum",
                    "polkadot",
                    "solana",
                    "cosmos",
                    "polygon",
                    "near",
                    "cardano",
                    "avalanche",
                    "binance"
                  ]
                },
                "network": {
                  "type": "string",
                  "description": "Protocol-specific network.",
                  "enum": [
                    "mainnet",
                    "localnet",
                    "goerli",
                    "prater",
                    "holesky",
                    "testnet",
                    "devnet",
                    "kusama",
                    "westend",
                    "preprod",
                    "fuji",
                    "local"
                  ]
                },
                "custodian": {
                  "type": "string",
                  "description": "Custodian handle",
                  "enum": [
                    "metamask"
                  ]
                },
                "details": {
                  "type": "object",
                  "properties": {
                    "fees": {
                      "type": "number",
                      "minimum": 0,
                      "maximum": 100,
                      "format": "float",
                      "description": "Rate (%) charged based on a percentage of staking rewards",
                      "example": 3.5
                    },
                    "tvl": {
                      "type": "number",
                      "minimum": 0,
                      "format": "double",
                      "description": "Sum of validators' balances.  Includes initial deposit (32ETH) + rewards.",
                      "example": 7060624149.296207
                    },
                    "feeTiers": {
                      "type": "array",
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 100
                      },
                      "minItems": 5,
                      "maxItems": 5,
                      "description": "The tiers of operator fee rate (%), charged based on a percentage of staking rewards. The rewards of each validator a MMI user has with you get taxed depending on their **total staking position with you**: <ul>\n  <li>Tier `1`: Less than `5000 ETH`</li>\n  <li>Tier `2`: Greater than or equal to `5000 ETH` and less than `15000 ETH`</li>\n  <li>Tier `3`: Greater than or equal to `15000 ETH` and less than `30000 ETH`</li>\n  <li>Tier `4`: Greater than or equal to `30000 ETH` and less than `60000 ETH`</li>\n  <li>Tier `5`: Greater than `60000 ETH`</li>\n</ul> Each validator \"locks in\" the five tiers that the Connector was returning at the time of staking, for the whole validator lifetime.",
                      "example": [
                        7,
                        5,
                        4,
                        3,
                        2
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ForbiddenError": {
        "description": "Caller doesn't have the required permissions.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "description": "Error response envelope",
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Error code",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "description": "Error Message",
                  "example": "A descriptive error message"
                }
              }
            },
            "example": {
              "code": 403,
              "message": "Forbidden: missing permission 'read:validator'"
            }
          }
        }
      },
      "WithdrawalIntents": {
        "description": "Withdrawal intents listed",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "description": "Withdrawal intents",
              "required": [
                "protocol",
                "network",
                "customer_id"
              ],
              "properties": {
                "protocol": {
                  "type": "string",
                  "description": "Blockchain protocol.",
                  "enum": [
                    "ethereum",
                    "polkadot",
                    "solana",
                    "cosmos",
                    "polygon",
                    "near",
                    "cardano",
                    "avalanche",
                    "binance"
                  ]
                },
                "network": {
                  "type": "string",
                  "description": "Protocol-specific network.",
                  "enum": [
                    "mainnet",
                    "localnet",
                    "goerli",
                    "prater",
                    "holesky",
                    "testnet",
                    "devnet",
                    "kusama",
                    "westend",
                    "preprod",
                    "fuji",
                    "local"
                  ]
                },
                "solana": {
                  "type": "array",
                  "description": "List of withdrawal intents",
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "required": [
                          "withdraw_intent_id",
                          "customer_id"
                        ],
                        "properties": {
                          "withdraw_intent_id": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Unique idenifier for a withdrawal intent.",
                            "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                          },
                          "customer_id": {
                            "type": "string",
                            "description": "Unique identifier for a customer",
                            "example": "SatoshiNakamoto-xUYJbPw9hw",
                            "minimum": 1
                          }
                        }
                      },
                      {
                        "type": "object",
                        "description": "Result of a new withdrawal intent request.",
                        "required": [
                          "protocol",
                          "network",
                          "solana"
                        ],
                        "properties": {
                          "protocol": {
                            "type": "string",
                            "description": "Solana protocol",
                            "enum": [
                              "solana"
                            ]
                          },
                          "network": {
                            "type": "string",
                            "description": "Solana network",
                            "enum": [
                              "mainnet",
                              "testnet"
                            ]
                          },
                          "solana": {
                            "type": "object",
                            "required": [
                              "withdraws",
                              "total_withdraw_amount"
                            ],
                            "properties": {
                              "withdraws": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "description": "Result of the withdraw transaction request",
                                  "required": [
                                    "unsigned_transaction",
                                    "withdrawal_authority_public_key",
                                    "stake_account_address",
                                    "amount",
                                    "stake_id",
                                    "expiration_time"
                                  ],
                                  "properties": {
                                    "unsigned_transaction": {
                                      "type": "string",
                                      "format": "base64",
                                      "description": "Generated unsigned transaction smart contract call data.",
                                      "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                                    },
                                    "withdrawal_authority_public_key": {
                                      "type": "string",
                                      "description": "Public Key of an asymmetric key-pair.",
                                      "format": "base58",
                                      "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                      "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                    },
                                    "stake_account_address": {
                                      "type": "string",
                                      "description": "Public Key of an asymmetric key-pair.",
                                      "format": "base58",
                                      "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                      "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                    },
                                    "stake_id": {
                                      "description": "Unique stake identifier.",
                                      "type": "string",
                                      "format": "base58",
                                      "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                                    },
                                    "amount": {
                                      "type": "string",
                                      "description": "Denomination of the cryptocurrency Solana.",
                                      "pattern": "^[1-9]\\d+$",
                                      "example": "100"
                                    },
                                    "expiration_time": {
                                      "type": "integer",
                                      "description": "Transaction expiration time",
                                      "format": "int64",
                                      "example": 1689939023
                                    }
                                  }
                                }
                              },
                              "total_withdraw_amount": {
                                "type": "string",
                                "description": "Denomination of the cryptocurrency Solana.",
                                "pattern": "^[1-9]\\d+$",
                                "example": "100"
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "near": {
                  "type": "array",
                  "description": "List of withdrawal intents",
                  "items": {
                    "type": "object",
                    "description": "NEAR Protocol Withdrawal Intent",
                    "required": [
                      "to",
                      "unsigned_transaction",
                      "wallet_address",
                      "public_key",
                      "withdrawal_intent_id",
                      "expiration_time"
                    ],
                    "properties": {
                      "withdrawal_intent_id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique idenifier for deactivate intent.",
                        "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                      },
                      "to": {
                        "type": "string",
                        "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                        "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                        "example": "alice.near"
                      },
                      "unsigned_transaction": {
                        "type": "string",
                        "format": "base64",
                        "description": "Generated unsigned transaction smart contract call data.",
                        "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                      },
                      "amount": {
                        "type": "string",
                        "description": "Denomination of NEAR Protocol.",
                        "pattern": "^[1-9]\\d+$",
                        "example": "100000000000000000000000000"
                      },
                      "wallet_address": {
                        "type": "string",
                        "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                        "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                        "example": "alice.near"
                      },
                      "public_key": {
                        "type": "string",
                        "description": "Base58 encoded public key prefixed by ed25519, associated with the private key that will be used to sign the transaction.",
                        "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
                        "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
                      },
                      "expiration_time": {
                        "type": "integer",
                        "description": "Transaction expiration time",
                        "format": "int64",
                        "example": 1689939023
                      }
                    }
                  }
                },
                "customer_id": {
                  "type": "string",
                  "description": "Unique identifier for a customer",
                  "example": "SatoshiNakamoto-xUYJbPw9hw",
                  "minimum": 1
                }
              }
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal server error.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "description": "Error response envelope",
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Error code",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "description": "Error Message",
                  "example": "A descriptive error message"
                }
              }
            }
          }
        }
      },
      "DetailsId": {
        "description": "Custodian validator performance metrics id",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "EthereumQueuesProgress": {
        "description": "Ethereum queue estimate response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "validators",
                "last_updated"
              ],
              "properties": {
                "last_updated": {
                  "type": "string",
                  "description": "Time validator state was recorded",
                  "example": "2024-04-15 08:23:00"
                },
                "validators": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "Ethereum validator queue progress validator",
                    "required": [
                      "public_key",
                      "epochs_remaining"
                    ],
                    "properties": {
                      "public_key": {
                        "type": "string",
                        "description": "Public Key of an asymmetric key-pair.",
                        "format": "hex",
                        "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                      },
                      "epochs_remaining": {
                        "description": "the number of epochs remaining in the current queue",
                        "type": "integer",
                        "format": "int64",
                        "example": 280312
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "InvalidRequest": {
        "description": "Invalid request.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "description": "Error response envelope",
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Error code",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "description": "Error Message",
                  "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                }
              }
            }
          }
        }
      },
      "ListPlans": {
        "description": "Successful operation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "plans",
                "pagination"
              ],
              "properties": {
                "pagination": {
                  "type": "object",
                  "description": "encapsulates pagination properties",
                  "required": [
                    "page",
                    "per_page",
                    "total"
                  ],
                  "properties": {
                    "page": {
                      "description": "current page number",
                      "type": "integer",
                      "format": "int64"
                    },
                    "per_page": {
                      "description": "number of results per page",
                      "type": "integer",
                      "format": "int64"
                    },
                    "total": {
                      "description": "total number of results",
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                },
                "plans": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "staking plan for validators",
                    "required": [
                      "id",
                      "protocol",
                      "network",
                      "config",
                      "customer_id",
                      "staking_plan_type",
                      "title"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                        "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                      },
                      "customer_id": {
                        "type": "string",
                        "description": "Unique identifier for a customer",
                        "example": "SatoshiNakamoto-xUYJbPw9hw",
                        "minimum": 1
                      },
                      "protocol": {
                        "type": "string",
                        "description": "Blockchain protocol.",
                        "enum": [
                          "ethereum",
                          "polkadot",
                          "solana",
                          "cosmos",
                          "polygon",
                          "near",
                          "cardano",
                          "avalanche",
                          "binance"
                        ]
                      },
                      "network": {
                        "type": "string",
                        "description": "Protocol-specific network.",
                        "enum": [
                          "mainnet",
                          "localnet",
                          "goerli",
                          "prater",
                          "holesky",
                          "testnet",
                          "devnet",
                          "kusama",
                          "westend",
                          "preprod",
                          "fuji",
                          "local"
                        ]
                      },
                      "provider": {
                        "description": "Cloud provider which will host the node.",
                        "x-go-type": "models.ProviderID",
                        "x-go-type-import": {
                          "path": "go.blockdaemon.com/nodeq-server/pkg/models",
                          "name": "models"
                        }
                      },
                      "region": {
                        "description": "cloud provider's zone code",
                        "type": "string"
                      },
                      "minimum": {
                        "description": "minimum number of validators to be available. required for white label plans",
                        "type": "integer",
                        "format": "int64"
                      },
                      "config": {
                        "oneOf": [
                          {
                            "type": "object",
                            "description": "Ethereum staking plan config",
                            "required": [
                              "inventory_type"
                            ],
                            "properties": {
                              "suggested_fee_recipient": {
                                "type": "string",
                                "description": "the suggested fee recipient address",
                                "minimum": 1
                              },
                              "mev": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "description": "ID of the MEV fee recipient. optional"
                                  },
                                  "enabled": {
                                    "type": "boolean"
                                  },
                                  "relays": {
                                    "type": "array",
                                    "description": "List of Relay urls",
                                    "items": {
                                      "type": "string",
                                      "format": "uri",
                                      "description": "Relay url"
                                    },
                                    "minItems": 1
                                  }
                                }
                              },
                              "inventory_type": {
                                "type": "string",
                                "description": "Indicates if the quantity of validators for the staking plan is static or dynamic. Static is a once off deployment of a specified quantity of validators. Dynamic is where an initial quantity of validators is deployed with a threshold of available validators also configured. If the number of available validators within the validator inventory drops below the threshold (by being reserved as part of a stake intents API call) then the dynamic plan will automatically deploy the required infrastructure to bring the number of available validators above the threshold.",
                                "enum": [
                                  "static",
                                  "dynamic"
                                ]
                              },
                              "execution_client": {
                                "type": "string",
                                "description": "The execution client to use on the node",
                                "enum": [
                                  "geth",
                                  "besu"
                                ]
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Solana staking plan config",
                            "required": [
                              "validator_address"
                            ],
                            "properties": {
                              "validator_address": {
                                "type": "object",
                                "required": [
                                  "mainnet",
                                  "testnet"
                                ],
                                "properties": {
                                  "mainnet": {
                                    "type": "string",
                                    "description": "Public Key of an asymmetric key-pair.",
                                    "format": "base58",
                                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                  },
                                  "testnet": {
                                    "type": "string",
                                    "description": "Public Key of an asymmetric key-pair.",
                                    "format": "base58",
                                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Polygon staking plan config",
                            "required": [
                              "validator_share_address"
                            ],
                            "properties": {
                              "validator_share_address": {
                                "type": "object",
                                "required": [
                                  "mainnet",
                                  "testnet"
                                ],
                                "properties": {
                                  "mainnet": {
                                    "type": "string",
                                    "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                                    "format": "hex",
                                    "pattern": "^0x[a-fA-F0-9]{40}$",
                                    "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                                  },
                                  "testnet": {
                                    "type": "string",
                                    "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                                    "format": "hex",
                                    "pattern": "^0x[a-fA-F0-9]{40}$",
                                    "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Cardano staking plan config",
                            "required": [
                              "stake_pool_id"
                            ],
                            "properties": {
                              "stake_pool_id": {
                                "type": "object",
                                "required": [
                                  "mainnet",
                                  "preprod"
                                ],
                                "properties": {
                                  "mainnet": {
                                    "type": "string",
                                    "description": "bech32 encoded pool id.",
                                    "format": "bech32",
                                    "example": "pool1ev8fwfccn8gr0zcz3uyps0t0mcrefc6s95wjc6aed3ngc86y5rk"
                                  },
                                  "preprod": {
                                    "type": "string",
                                    "description": "bech32 encoded pool id.",
                                    "format": "bech32",
                                    "example": "pool1ev8fwfccn8gr0zcz3uyps0t0mcrefc6s95wjc6aed3ngc86y5rk"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Avalanche staking plan config",
                            "required": [
                              "validator_address"
                            ],
                            "properties": {
                              "validator_address": {
                                "type": "object",
                                "required": [
                                  "mainnet",
                                  "fuji"
                                ],
                                "properties": {
                                  "mainnet": {
                                    "type": "string",
                                    "description": "Avalanche validator node address",
                                    "pattern": "^NodeID-[A-Za-z0-9]{43}$",
                                    "example": "NodeID-B19uSxUKerjjnA215czAJLHMqNJMbsAMWuSxUKerjjW"
                                  },
                                  "fuji": {
                                    "type": "string",
                                    "description": "Avalanche validator node address",
                                    "pattern": "^NodeID-[A-Za-z0-9]{43}$",
                                    "example": "NodeID-B19uSxUKerjjnA215czAJLHMqNJMbsAMWuSxUKerjjW"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Cosmos staking plan config",
                            "required": [
                              "validator_address"
                            ],
                            "properties": {
                              "validator_address": {
                                "type": "object",
                                "required": [
                                  "mainnet",
                                  "testnet"
                                ],
                                "properties": {
                                  "mainnet": {
                                    "type": "string",
                                    "description": "Public Key of an asymmetric key-pair.",
                                    "format": "bech32",
                                    "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                                    "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                                  },
                                  "testnet": {
                                    "type": "string",
                                    "description": "Public Key of an asymmetric key-pair.",
                                    "format": "bech32",
                                    "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                                    "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Binance staking plan config",
                            "required": [
                              "validator_address"
                            ],
                            "properties": {
                              "validator_address": {
                                "type": "object",
                                "required": [
                                  "mainnet",
                                  "testnet"
                                ],
                                "properties": {
                                  "mainnet": {
                                    "type": "string",
                                    "description": "Binance beacon chain validator address.",
                                    "format": "bech32",
                                    "pattern": "^bva[0-9a-zA-Z]*$",
                                    "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                                  },
                                  "testnet": {
                                    "type": "string",
                                    "description": "Binance beacon chain validator address.",
                                    "format": "bech32",
                                    "pattern": "^bva[0-9a-zA-Z]*$",
                                    "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      },
                      "total_pending": {
                        "description": "total number of pending validators in a staking plan",
                        "type": "integer",
                        "format": "int64"
                      },
                      "total_available": {
                        "description": "total number of available validators in a staking plan",
                        "type": "integer",
                        "format": "int64"
                      },
                      "total_active": {
                        "description": "total number of active validators in a staking plan",
                        "type": "integer",
                        "format": "int64"
                      },
                      "staking_plan_type": {
                        "type": "string",
                        "description": "Indicates if the staking plan requires a Blockdaemon validator launch or it is associated to a public validator.",
                        "enum": [
                          "white_label",
                          "public"
                        ]
                      },
                      "title": {
                        "type": "string",
                        "description": "Plan title for display purposes"
                      },
                      "total_reserved": {
                        "description": "total number of reserved validators in a staking plan",
                        "type": "integer",
                        "format": "int64"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ListValidators": {
        "description": "Successful operation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "validators"
              ],
              "properties": {
                "pagination": {
                  "type": "object",
                  "description": "encapsulates pagination properties",
                  "required": [
                    "page",
                    "per_page",
                    "total"
                  ],
                  "properties": {
                    "page": {
                      "description": "current page number",
                      "type": "integer",
                      "format": "int64"
                    },
                    "per_page": {
                      "description": "number of results per page",
                      "type": "integer",
                      "format": "int64"
                    },
                    "total": {
                      "description": "total number of results",
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                },
                "validators": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "description": "Ethereum validator",
                        "required": [
                          "public_key",
                          "protocol",
                          "network",
                          "plan_status",
                          "node_xid"
                        ],
                        "type": "object",
                        "properties": {
                          "public_key": {
                            "type": "string",
                            "description": "A BLS public Key.",
                            "format": "base64",
                            "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                          },
                          "protocol": {
                            "type": "string",
                            "description": "Blockchain protocol.",
                            "enum": [
                              "ethereum",
                              "polkadot",
                              "solana",
                              "cosmos",
                              "polygon",
                              "near",
                              "cardano",
                              "avalanche",
                              "binance"
                            ]
                          },
                          "network": {
                            "type": "string",
                            "description": "Protocol-specific network.",
                            "enum": [
                              "mainnet",
                              "localnet",
                              "goerli",
                              "prater",
                              "holesky",
                              "testnet",
                              "devnet",
                              "kusama",
                              "westend",
                              "preprod",
                              "fuji",
                              "local"
                            ]
                          },
                          "provider": {
                            "description": "Cloud provider which will host the node.",
                            "x-go-type": "models.ProviderID",
                            "x-go-type-import": {
                              "path": "go.blockdaemon.com/nodeq-server/pkg/models",
                              "name": "models"
                            }
                          },
                          "region": {
                            "description": "cloud provider's zone code",
                            "type": "string"
                          },
                          "config": {
                            "type": "object",
                            "description": "the Ethereum config for a validator",
                            "required": [
                              "fee_recipient",
                              "mev"
                            ],
                            "properties": {
                              "fee_recipient": {
                                "type": "string",
                                "description": "fee recipient address"
                              },
                              "mev": {
                                "type": "object",
                                "required": [
                                  "enabled"
                                ],
                                "properties": {
                                  "enabled": {
                                    "type": "boolean"
                                  }
                                }
                              }
                            }
                          },
                          "plan_status": {
                            "type": "string",
                            "description": "Staking API validator status",
                            "x-go-type": "models.ValidatorStatus",
                            "x-go-type-import": {
                              "path": "go.blockdaemon.com/nodeq-server/pkg/models",
                              "name": "models"
                            }
                          },
                          "onchain_status": {
                            "type": "string",
                            "description": "On-chain status of the validator.\nReference: https://docs.blockdaemon.com/docs/eth-validator-statuses\n",
                            "enum": [
                              "pending_initialized",
                              "pending_queued",
                              "active_ongoing",
                              "active_exiting",
                              "active_slashed",
                              "exited_unslashed",
                              "exited_slashed",
                              "withdrawal_possible",
                              "withdrawal_done",
                              "unknown"
                            ]
                          },
                          "exit_submitted": {
                            "type": "boolean"
                          },
                          "node_xid": {
                            "type": "string",
                            "description": "The node XID",
                            "example": "c9slgu11eqli4rc7djlg"
                          },
                          "queue_progress": {
                            "description": "the number of epochs remaining in the current queue",
                            "type": "integer",
                            "format": "int64",
                            "example": 280312
                          },
                          "withdrawalDate": {
                            "type": "string",
                            "example": "2024-01-25T15:44:00Z",
                            "description": "Date when the validator was withdrawn."
                          },
                          "activationDate": {
                            "type": "string",
                            "example": "2024-01-25T15:44:00Z",
                            "description": "Date when the validator was activated."
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "NoValidatorsError": {
        "description": "Insufficient validators available to process Stake Intent request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "description": "Error response envelope",
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Error code",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "description": "Error Message",
                  "example": "A descriptive error message"
                }
              }
            }
          }
        }
      },
      "NotFound": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "description": "Error response envelope",
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Error code",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "description": "Error Message",
                  "example": "A descriptive error message"
                }
              }
            }
          }
        }
      },
      "RewardsRestakeIntent": {
        "description": "Rewards restake intent created",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "protocol",
                "network",
                "customer_id"
              ],
              "properties": {
                "protocol": {
                  "type": "string",
                  "description": "Blockchain protocol.",
                  "enum": [
                    "ethereum",
                    "polkadot",
                    "solana",
                    "cosmos",
                    "polygon",
                    "near",
                    "cardano",
                    "avalanche",
                    "binance"
                  ]
                },
                "network": {
                  "type": "string",
                  "description": "Protocol-specific network.",
                  "enum": [
                    "mainnet",
                    "localnet",
                    "goerli",
                    "prater",
                    "holesky",
                    "testnet",
                    "devnet",
                    "kusama",
                    "westend",
                    "preprod",
                    "fuji",
                    "local"
                  ]
                },
                "polygon": {
                  "type": "object",
                  "required": [
                    "to",
                    "unsigned_transaction",
                    "wallet_address"
                  ],
                  "properties": {
                    "to": {
                      "type": "string",
                      "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                      "format": "hex",
                      "pattern": "^0x[a-fA-F0-9]{40}$",
                      "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                    },
                    "unsigned_transaction": {
                      "type": "string",
                      "format": "base64",
                      "description": "Generated unsigned transaction smart contract call data.",
                      "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                    },
                    "wallet_address": {
                      "type": "string",
                      "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                      "format": "hex",
                      "pattern": "^0x[a-fA-F0-9]{40}$",
                      "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                    }
                  }
                },
                "customer_id": {
                  "type": "string",
                  "description": "Unique identifier for a customer",
                  "example": "SatoshiNakamoto-xUYJbPw9hw",
                  "minimum": 1
                }
              }
            }
          }
        }
      },
      "RestakeIntent": {
        "description": "Restake intent created",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "restake_intent_id",
                    "customer_id"
                  ],
                  "properties": {
                    "restake_intent_id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Unique idenifier for a restake intent.",
                      "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "Unique identifier for a customer",
                      "example": "SatoshiNakamoto-xUYJbPw9hw",
                      "minimum": 1
                    }
                  }
                },
                {
                  "type": "object",
                  "description": "Request object to create a new restake intent.",
                  "required": [
                    "protocol",
                    "network"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Blockchain protocol.",
                      "enum": [
                        "ethereum",
                        "polkadot",
                        "solana",
                        "cosmos",
                        "polygon",
                        "near",
                        "cardano",
                        "avalanche",
                        "binance"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "Protocol-specific network.",
                      "enum": [
                        "mainnet",
                        "localnet",
                        "goerli",
                        "prater",
                        "holesky",
                        "testnet",
                        "devnet",
                        "kusama",
                        "westend",
                        "preprod",
                        "fuji",
                        "local"
                      ]
                    },
                    "cosmos": {
                      "type": "object",
                      "description": "Cosmos Restake Intent",
                      "required": [
                        "unsigned_transaction",
                        "delegator_address",
                        "old_validator_address",
                        "new_validator_address",
                        "amount"
                      ],
                      "properties": {
                        "unsigned_transaction": {
                          "type": "string",
                          "format": "base64",
                          "description": "Generated unsigned transaction smart contract call data.",
                          "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                        },
                        "delegator_address": {
                          "type": "string",
                          "description": "Public Key of an asymmetric key-pair.",
                          "format": "bech32",
                          "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                          "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                        },
                        "old_validator_address": {
                          "type": "string",
                          "description": "Public Key of an asymmetric key-pair.",
                          "format": "bech32",
                          "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                          "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                        },
                        "new_validator_address": {
                          "type": "string",
                          "description": "Public Key of an asymmetric key-pair.",
                          "format": "bech32",
                          "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                          "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                        },
                        "amount": {
                          "type": "string",
                          "description": "Denomination of the cryptocurrency Cosmos.",
                          "pattern": "^[1-9]\\d+$",
                          "example": "100"
                        }
                      }
                    },
                    "binance": {
                      "type": "object",
                      "description": "Binance Restake Intent",
                      "required": [
                        "unsigned_transaction",
                        "delegator_address",
                        "old_validator_address",
                        "new_validator_address",
                        "amount"
                      ],
                      "properties": {
                        "unsigned_transaction": {
                          "type": "string",
                          "format": "base64",
                          "description": "Generated unsigned transaction smart contract call data.",
                          "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                        },
                        "delegator_address": {
                          "type": "string",
                          "description": "Binance beacon chain address.",
                          "format": "bech32",
                          "pattern": "^bnb[0-9a-z]+$",
                          "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
                        },
                        "old_validator_address": {
                          "type": "string",
                          "description": "Binance beacon chain validator address.",
                          "format": "bech32",
                          "pattern": "^bva[0-9a-zA-Z]*$",
                          "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                        },
                        "new_validator_address": {
                          "type": "string",
                          "description": "Binance beacon chain validator address.",
                          "format": "bech32",
                          "pattern": "^bva[0-9a-zA-Z]*$",
                          "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                        },
                        "amount": {
                          "type": "string",
                          "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
                          "pattern": "^[1-9]\\d+$",
                          "example": "10000000000"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "RewardsWithdrawIntentCardano": {
        "description": "Rewards withdrawal intent created",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "protocol",
                "network",
                "cardano",
                "customer_id"
              ],
              "properties": {
                "protocol": {
                  "type": "string",
                  "description": "Cardano protocol",
                  "enum": [
                    "cardano"
                  ]
                },
                "network": {
                  "type": "string",
                  "description": "Cardano network",
                  "enum": [
                    "mainnet",
                    "preprod",
                    "localnet"
                  ]
                },
                "cardano": {
                  "type": "object",
                  "required": [
                    "base_address",
                    "rewards_amount",
                    "unsigned_transaction"
                  ],
                  "properties": {
                    "base_address": {
                      "type": "string",
                      "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
                      "format": "bech32",
                      "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
                    },
                    "rewards_amount": {
                      "type": "string",
                      "description": "Denomination of the cryptocurrency Cardano.",
                      "pattern": "^[1-9]\\d+$",
                      "example": "100"
                    },
                    "unsigned_transaction": {
                      "type": "string",
                      "format": "base64",
                      "description": "Generated unsigned transaction smart contract call data.",
                      "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                    }
                  }
                },
                "customer_id": {
                  "type": "string",
                  "description": "Unique identifier for a customer",
                  "example": "SatoshiNakamoto-xUYJbPw9hw",
                  "minimum": 1
                }
              }
            }
          }
        }
      },
      "RewardsWithdrawIntentCosmos": {
        "description": "Rewards withdrawal intent created",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "protocol",
                "network",
                "cosmos",
                "customer_id"
              ],
              "properties": {
                "protocol": {
                  "type": "string",
                  "description": "Cosmos protocol",
                  "enum": [
                    "cosmos"
                  ]
                },
                "network": {
                  "type": "string",
                  "description": "Cosmos network",
                  "enum": [
                    "mainnet",
                    "testnet"
                  ]
                },
                "cosmos": {
                  "type": "object",
                  "required": [
                    "unsigned_transaction",
                    "delegator_address",
                    "validator_address",
                    "amount"
                  ],
                  "properties": {
                    "unsigned_transaction": {
                      "type": "string",
                      "format": "base64",
                      "description": "Generated unsigned transaction smart contract call data.",
                      "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                    },
                    "delegator_address": {
                      "type": "string",
                      "description": "Public Key of an asymmetric key-pair.",
                      "format": "bech32",
                      "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                      "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                    },
                    "validator_address": {
                      "type": "string",
                      "description": "Public Key of an asymmetric key-pair.",
                      "format": "bech32",
                      "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                      "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                    },
                    "amount": {
                      "type": "string",
                      "description": "Denomination of the cryptocurrency Cosmos.",
                      "pattern": "^[1-9]\\d+$",
                      "example": "100"
                    }
                  }
                },
                "customer_id": {
                  "type": "string",
                  "description": "Unique identifier for a customer",
                  "example": "SatoshiNakamoto-xUYJbPw9hw",
                  "minimum": 1
                }
              }
            }
          }
        }
      },
      "RewardsWithdrawIntentPolygon": {
        "description": "Rewards withdrawal intent created",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "protocol",
                "network",
                "polygon",
                "customer_id"
              ],
              "properties": {
                "protocol": {
                  "type": "string",
                  "description": "Polygon protocol",
                  "enum": [
                    "polygon"
                  ]
                },
                "network": {
                  "type": "string",
                  "description": "Polygon network",
                  "enum": [
                    "mainnet",
                    "goerli",
                    "prater"
                  ]
                },
                "polygon": {
                  "type": "object",
                  "required": [
                    "to",
                    "unsigned_transaction",
                    "wallet_address"
                  ],
                  "properties": {
                    "to": {
                      "type": "string",
                      "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                      "format": "hex",
                      "pattern": "^0x[a-fA-F0-9]{40}$",
                      "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                    },
                    "unsigned_transaction": {
                      "type": "string",
                      "format": "base64",
                      "description": "Generated unsigned transaction smart contract call data.",
                      "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                    },
                    "wallet_address": {
                      "type": "string",
                      "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                      "format": "hex",
                      "pattern": "^0x[a-fA-F0-9]{40}$",
                      "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                    }
                  }
                },
                "customer_id": {
                  "type": "string",
                  "description": "Unique identifier for a customer",
                  "example": "SatoshiNakamoto-xUYJbPw9hw",
                  "minimum": 1
                }
              }
            }
          }
        }
      },
      "StakeIntentNotFound": {
        "description": "Stake Intent not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "description": "Error response envelope",
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Error code",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "description": "Error Message",
                  "example": "A descriptive error message"
                }
              }
            }
          }
        }
      },
      "StakingPlans": {
        "description": "Create staking plans response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "description": "Staking plans",
              "required": [
                "plans"
              ],
              "properties": {
                "customer_id": {
                  "type": "string",
                  "description": "Unique identifier for a customer",
                  "example": "SatoshiNakamoto-xUYJbPw9hw",
                  "minimum": 1
                },
                "plans": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "the plan config for validator plan",
                    "required": [
                      "protocol",
                      "network",
                      "config",
                      "staking_plan_type",
                      "title"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                        "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                      },
                      "customer_id": {
                        "type": "string",
                        "description": "Unique identifier for a customer",
                        "example": "SatoshiNakamoto-xUYJbPw9hw",
                        "minimum": 1
                      },
                      "protocol": {
                        "type": "string",
                        "description": "Blockchain protocol.",
                        "enum": [
                          "ethereum",
                          "polkadot",
                          "solana",
                          "cosmos",
                          "polygon",
                          "near",
                          "cardano",
                          "avalanche",
                          "binance"
                        ]
                      },
                      "network": {
                        "type": "string",
                        "description": "Protocol-specific network.",
                        "enum": [
                          "mainnet",
                          "localnet",
                          "goerli",
                          "prater",
                          "holesky",
                          "testnet",
                          "devnet",
                          "kusama",
                          "westend",
                          "preprod",
                          "fuji",
                          "local"
                        ]
                      },
                      "providers": {
                        "type": "array",
                        "description": "list of node providers",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "description": "node provider",
                          "required": [
                            "provider",
                            "region",
                            "priority"
                          ],
                          "properties": {
                            "provider": {
                              "description": "Cloud provider which will host the node.",
                              "x-go-type": "models.ProviderID",
                              "x-go-type-import": {
                                "path": "go.blockdaemon.com/nodeq-server/pkg/models",
                                "name": "models"
                              }
                            },
                            "region": {
                              "description": "cloud provider's zone code",
                              "type": "string"
                            },
                            "priority": {
                              "description": "reflect priority weighting. provider with weighted 1 will be the first one to try.",
                              "type": "integer",
                              "format": "uint8"
                            }
                          }
                        }
                      },
                      "minimum": {
                        "description": "minimum number of validators to be available. required for white label plans",
                        "type": "integer",
                        "format": "int64"
                      },
                      "config": {
                        "oneOf": [
                          {
                            "type": "object",
                            "description": "Ethereum staking plan config",
                            "required": [
                              "inventory_type"
                            ],
                            "properties": {
                              "suggested_fee_recipient": {
                                "type": "string",
                                "description": "the suggested fee recipient address",
                                "minimum": 1
                              },
                              "mev": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "description": "ID of the MEV fee recipient. optional"
                                  },
                                  "enabled": {
                                    "type": "boolean"
                                  },
                                  "relays": {
                                    "type": "array",
                                    "description": "List of Relay urls",
                                    "items": {
                                      "type": "string",
                                      "format": "uri",
                                      "description": "Relay url"
                                    },
                                    "minItems": 1
                                  }
                                }
                              },
                              "inventory_type": {
                                "type": "string",
                                "description": "Indicates if the quantity of validators for the staking plan is static or dynamic. Static is a once off deployment of a specified quantity of validators. Dynamic is where an initial quantity of validators is deployed with a threshold of available validators also configured. If the number of available validators within the validator inventory drops below the threshold (by being reserved as part of a stake intents API call) then the dynamic plan will automatically deploy the required infrastructure to bring the number of available validators above the threshold.",
                                "enum": [
                                  "static",
                                  "dynamic"
                                ]
                              },
                              "execution_client": {
                                "type": "string",
                                "description": "The execution client to use on the node",
                                "enum": [
                                  "geth",
                                  "besu"
                                ]
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Solana staking plan config",
                            "required": [
                              "validator_address"
                            ],
                            "properties": {
                              "validator_address": {
                                "type": "object",
                                "required": [
                                  "mainnet",
                                  "testnet"
                                ],
                                "properties": {
                                  "mainnet": {
                                    "type": "string",
                                    "description": "Public Key of an asymmetric key-pair.",
                                    "format": "base58",
                                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                  },
                                  "testnet": {
                                    "type": "string",
                                    "description": "Public Key of an asymmetric key-pair.",
                                    "format": "base58",
                                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Polygon staking plan config",
                            "required": [
                              "validator_share_address"
                            ],
                            "properties": {
                              "validator_share_address": {
                                "type": "object",
                                "required": [
                                  "mainnet",
                                  "testnet"
                                ],
                                "properties": {
                                  "mainnet": {
                                    "type": "string",
                                    "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                                    "format": "hex",
                                    "pattern": "^0x[a-fA-F0-9]{40}$",
                                    "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                                  },
                                  "testnet": {
                                    "type": "string",
                                    "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                                    "format": "hex",
                                    "pattern": "^0x[a-fA-F0-9]{40}$",
                                    "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "NEAR Protocol staking plan config",
                            "required": [
                              "validator_address"
                            ],
                            "properties": {
                              "validator_address": {
                                "type": "object",
                                "required": [
                                  "mainnet",
                                  "testnet"
                                ],
                                "properties": {
                                  "mainnet": {
                                    "type": "string",
                                    "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                                    "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                                    "example": "alice.near"
                                  },
                                  "testnet": {
                                    "type": "string",
                                    "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                                    "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                                    "example": "alice.near"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Cardano staking plan config",
                            "required": [
                              "stake_pool_id"
                            ],
                            "properties": {
                              "stake_pool_id": {
                                "type": "object",
                                "required": [
                                  "mainnet",
                                  "preprod"
                                ],
                                "properties": {
                                  "mainnet": {
                                    "type": "string",
                                    "description": "bech32 encoded pool id.",
                                    "format": "bech32",
                                    "example": "pool1ev8fwfccn8gr0zcz3uyps0t0mcrefc6s95wjc6aed3ngc86y5rk"
                                  },
                                  "preprod": {
                                    "type": "string",
                                    "description": "bech32 encoded pool id.",
                                    "format": "bech32",
                                    "example": "pool1ev8fwfccn8gr0zcz3uyps0t0mcrefc6s95wjc6aed3ngc86y5rk"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Avalanche staking plan config",
                            "required": [
                              "validator_address"
                            ],
                            "properties": {
                              "validator_address": {
                                "type": "object",
                                "required": [
                                  "mainnet",
                                  "fuji"
                                ],
                                "properties": {
                                  "mainnet": {
                                    "type": "string",
                                    "description": "Avalanche validator node address",
                                    "pattern": "^NodeID-[A-Za-z0-9]{43}$",
                                    "example": "NodeID-B19uSxUKerjjnA215czAJLHMqNJMbsAMWuSxUKerjjW"
                                  },
                                  "fuji": {
                                    "type": "string",
                                    "description": "Avalanche validator node address",
                                    "pattern": "^NodeID-[A-Za-z0-9]{43}$",
                                    "example": "NodeID-B19uSxUKerjjnA215czAJLHMqNJMbsAMWuSxUKerjjW"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Cosmos staking plan config",
                            "required": [
                              "validator_address"
                            ],
                            "properties": {
                              "validator_address": {
                                "type": "object",
                                "required": [
                                  "mainnet",
                                  "testnet"
                                ],
                                "properties": {
                                  "mainnet": {
                                    "type": "string",
                                    "description": "Public Key of an asymmetric key-pair.",
                                    "format": "bech32",
                                    "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                                    "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                                  },
                                  "testnet": {
                                    "type": "string",
                                    "description": "Public Key of an asymmetric key-pair.",
                                    "format": "bech32",
                                    "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                                    "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      },
                      "staking_plan_type": {
                        "type": "string",
                        "description": "Indicates if the staking plan requires a Blockdaemon validator launch or it is associated to a public validator.",
                        "enum": [
                          "white_label",
                          "public"
                        ]
                      },
                      "title": {
                        "type": "string",
                        "description": "Plan title for display purposes"
                      },
                      "shared": {
                        "description": "flag for shared plans",
                        "type": "boolean"
                      },
                      "validators_per_node": {
                        "description": "number of validators per node, default is 500",
                        "type": "integer",
                        "format": "int32",
                        "default": 500
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "StatusNotImplemented": {
        "description": "Not implemented for the given protocol",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "description": "Error response envelope",
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Error code",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "description": "Error Message",
                  "example": "A descriptive error message"
                }
              }
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Header 'X-API-Key' missing.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "description": "Error response envelope",
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Error code",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "description": "Error Message",
                  "example": "A human-readable diagnostic message detailing any authorization failure"
                }
              }
            }
          }
        }
      },
      "EthereumExitValidatorTx": {
        "description": "Ethereum exit validator transaction response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "description": "Ethereum exit validator transaction response",
              "required": [
                "message",
                "signature",
                "fork_version"
              ],
              "properties": {
                "message": {
                  "type": "object",
                  "description": "Ethereum exit validator message",
                  "required": [
                    "validator_index",
                    "epoch"
                  ],
                  "properties": {
                    "validator_index": {
                      "type": "string",
                      "description": "Validator index",
                      "example": "25"
                    },
                    "epoch": {
                      "type": "string",
                      "description": "The numeric index of an [Ethereum epoch](https://ethereum.org/en/glossary/#epoch).",
                      "example": "1001"
                    }
                  }
                },
                "signature": {
                  "type": "string",
                  "format": "hex",
                  "description": "Ethereum signature",
                  "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187"
                },
                "fork_version": {
                  "type": "string",
                  "description": "A hex-encoded Ethereum fork version value.\n\nThe fork versions values are unique for each network and each fork. As an example, here is the constants preset file for Mainnet:\nhttps://github.com/ethereum/consensus-specs/blob/dev/configs/mainnet.yaml",
                  "example": "0x03000000"
                }
              }
            }
          }
        }
      },
      "EthereumGasEstimate": {
        "description": "Ethereum gas estimate response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "description": "Ethereum estimated gas",
              "required": [
                "estimated_gas"
              ],
              "properties": {
                "estimated_gas": {
                  "type": "integer",
                  "description": "Gas estimation of the transaction",
                  "format": "uint64",
                  "example": 1001
                }
              }
            }
          }
        }
      },
      "RewardsWithdrawIntents": {
        "description": "List of rewards withdraw intents",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "description": "Rewards withdrawal intents.",
              "required": [
                "protocol",
                "network",
                "customer_id"
              ],
              "properties": {
                "protocol": {
                  "type": "string",
                  "description": "Blockchain protocol.",
                  "enum": [
                    "ethereum",
                    "polkadot",
                    "solana",
                    "cosmos",
                    "polygon",
                    "near",
                    "cardano",
                    "avalanche",
                    "binance"
                  ]
                },
                "network": {
                  "type": "string",
                  "description": "Protocol-specific network.",
                  "enum": [
                    "mainnet",
                    "localnet",
                    "goerli",
                    "prater",
                    "holesky",
                    "testnet",
                    "devnet",
                    "kusama",
                    "westend",
                    "preprod",
                    "fuji",
                    "local"
                  ]
                },
                "cardano": {
                  "type": "array",
                  "description": "List of Rewards Withdrawal Intents",
                  "items": {
                    "type": "object",
                    "description": "Cardano Protocol Reward Withdrawal Intent",
                    "required": [
                      "base_address",
                      "rewards_amount",
                      "unsigned_transaction"
                    ],
                    "properties": {
                      "base_address": {
                        "type": "string",
                        "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
                        "format": "bech32",
                        "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
                      },
                      "rewards_amount": {
                        "type": "string",
                        "description": "Denomination of the cryptocurrency Cardano.",
                        "pattern": "^[1-9]\\d+$",
                        "example": "100"
                      },
                      "unsigned_transaction": {
                        "type": "string",
                        "format": "base64",
                        "description": "Generated unsigned transaction smart contract call data.",
                        "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                      }
                    }
                  }
                },
                "customer_id": {
                  "type": "string",
                  "description": "Unique identifier for a customer",
                  "example": "SatoshiNakamoto-xUYJbPw9hw",
                  "minimum": 1
                }
              }
            }
          }
        }
      },
      "ListStakeIntents": {
        "description": "Successful operation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "stake_intents",
                "pagination"
              ],
              "properties": {
                "stake_intents": {
                  "type": "array",
                  "description": "List of stake intents",
                  "items": {
                    "type": "object",
                    "required": [
                      "stake_intent_id",
                      "protocol",
                      "network",
                      "customer_id"
                    ],
                    "properties": {
                      "stake_intent_id": {
                        "type": "string",
                        "format": "base58",
                        "description": "Unique idenifier for a group of stakes.",
                        "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
                      },
                      "protocol": {
                        "type": "string",
                        "description": "Blockchain protocol.",
                        "enum": [
                          "ethereum",
                          "polkadot",
                          "solana",
                          "cosmos",
                          "polygon",
                          "near",
                          "cardano",
                          "avalanche",
                          "binance"
                        ]
                      },
                      "network": {
                        "type": "string",
                        "description": "Protocol-specific network.",
                        "enum": [
                          "mainnet",
                          "localnet",
                          "goerli",
                          "prater",
                          "holesky",
                          "testnet",
                          "devnet",
                          "kusama",
                          "westend",
                          "preprod",
                          "fuji",
                          "local"
                        ]
                      },
                      "ethereum": {
                        "type": "object",
                        "description": "Ethereum Stake Intent response",
                        "required": [
                          "stakes",
                          "contract_address",
                          "unsigned_transaction",
                          "estimated_gas",
                          "expiration_time"
                        ],
                        "properties": {
                          "stakes": {
                            "description": "Stakes being made.",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "description": "Individual Ethereum Stake Response",
                              "required": [
                                "stake_id",
                                "amount",
                                "validator_public_key",
                                "withdrawal_credentials",
                                "fee_recipient"
                              ],
                              "properties": {
                                "stake_id": {
                                  "description": "Unique stake identifier.",
                                  "type": "string",
                                  "format": "base58",
                                  "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                                },
                                "amount": {
                                  "type": "string",
                                  "description": "Amount of ETH (denominated in Gwei).",
                                  "pattern": "^[1-9]\\d{10,}$",
                                  "example": "32000000000"
                                },
                                "validator_public_key": {
                                  "type": "string",
                                  "description": "A BLS public Key.",
                                  "format": "base64",
                                  "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                                },
                                "withdrawal_credentials": {
                                  "type": "string",
                                  "format": "hex",
                                  "pattern": "^0x0(0|1)[a-fA-F0-9]{62}$",
                                  "example": "0x0092c20062cee70389f1cb4fa566a2be5e2319ff43965db26dbaa3ce90b9df99",
                                  "description": "Hexadecimal encoded [withdrawal credentials](https://github.com/ethereum/consensus-specs/blob/master/specs/phase0/validator.md#withdrawal-credentials) which can be either a BLS public key or an Ethereum account address.\n\nThis parameter currently accepts ETH1 and BLS withdrawal credentials, but it is considered deprecated after the Capella/Shanghai fork. All users are now advised to use an ETH1 withdrawal address, specified through the `withdrawal_address` parameter as this is required to enable the ongoing accrual of rewards.\n\nFor more information regarding creating withdrawal credentials, please see the official [Ethereum Launchpad FAQ](https://launchpad.ethereum.org/en/faq#withdrawal-credentials)."
                                },
                                "fee_recipient": {
                                  "type": "string",
                                  "description": "An Ethereum address to receive transaction fees from published blocks. 20-bytes, hex encoded with 0x prefix, case insensitive.",
                                  "example": "0x93247f2209abcacf57b75a51dafae777f9dd38bc",
                                  "pattern": "^0x[a-fA-F0-9]{40}$"
                                }
                              }
                            }
                          },
                          "contract_address": {
                            "type": "string",
                            "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                            "format": "hex",
                            "pattern": "^0x[a-fA-F0-9]{40}$",
                            "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                          },
                          "unsigned_transaction": {
                            "type": "string",
                            "format": "base64",
                            "description": "Generated unsigned transaction smart contract call data.",
                            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                          },
                          "estimated_gas": {
                            "type": "integer",
                            "description": "Gas estimation of the transaction",
                            "format": "uint64",
                            "example": 1001
                          },
                          "expiration_time": {
                            "type": "integer",
                            "description": "Transaction expiration time",
                            "format": "int64",
                            "example": 1689939023
                          }
                        }
                      },
                      "polkadot": {
                        "type": "object",
                        "description": "Polkadot Stake Intent Response",
                        "required": [
                          "stake_id",
                          "unsigned_transaction",
                          "proxy_address"
                        ],
                        "properties": {
                          "unsigned_transaction": {
                            "description": "Unsigned transaction that bonds a Blockdaemon's proxy account to the given customer account.\nOnce this transaction is signed, broadcasted to the network and included in the canonical history of the chain, the proxy account will be associated with the customer account.",
                            "type": "string",
                            "format": "base64",
                            "example": "0xa4041601008c16e19e94328985d65cb7e3245213892730dd0e841f6511478cb12f23a178330100000000"
                          },
                          "customer_address": {
                            "description": "Address of the customer account to associate with the proxy account.",
                            "type": "string",
                            "format": "base58",
                            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                          },
                          "controller_address": {
                            "description": "Address of the customer account to associate with the proxy account.\nSame as customer_address. Deprecated - will be removed in a later version.",
                            "type": "string",
                            "format": "base58",
                            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                          },
                          "proxy_address": {
                            "description": "Address of the proxy account to associate with the customer account.",
                            "type": "string",
                            "format": "base58",
                            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                          }
                        }
                      },
                      "solana": {
                        "type": "object",
                        "description": "Solana Stake Intent response",
                        "required": [
                          "stake_id",
                          "amount",
                          "validator_public_key",
                          "withdrawal_authority",
                          "staking_authority",
                          "stake_account_public_key",
                          "unsigned_transaction",
                          "expiration_time"
                        ],
                        "properties": {
                          "stake_id": {
                            "description": "Unique stake identifier.",
                            "type": "string",
                            "format": "base58",
                            "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                          },
                          "amount": {
                            "type": "string",
                            "description": "Denomination of the cryptocurrency Solana.",
                            "pattern": "^[1-9]\\d+$",
                            "example": "100"
                          },
                          "validator_public_key": {
                            "type": "string",
                            "description": "A BLS public Key.",
                            "format": "base64",
                            "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                          },
                          "staking_authority": {
                            "type": "string",
                            "description": "Public Key of an asymmetric key-pair.",
                            "format": "base58",
                            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                          },
                          "withdrawal_authority": {
                            "type": "string",
                            "description": "A BLS public Key.",
                            "format": "base64",
                            "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                          },
                          "stake_account_public_key": {
                            "type": "string",
                            "description": "Public Key of an asymmetric key-pair.",
                            "format": "base58",
                            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                          },
                          "unsigned_transaction": {
                            "type": "string",
                            "format": "base64",
                            "description": "Generated unsigned transaction smart contract call data.",
                            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                          },
                          "expiration_time": {
                            "type": "integer",
                            "description": "Transaction expiration time",
                            "format": "int64",
                            "example": 1689939023
                          }
                        }
                      },
                      "cosmos": {
                        "type": "object",
                        "description": "Cosmos Stake Intent response",
                        "required": [
                          "unsigned_transaction",
                          "amount",
                          "delegator_address",
                          "validator_address"
                        ],
                        "properties": {
                          "unsigned_transaction": {
                            "type": "string",
                            "format": "base64",
                            "description": "Generated unsigned transaction smart contract call data.",
                            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                          },
                          "delegator_address": {
                            "type": "string",
                            "description": "Public Key of an asymmetric key-pair.",
                            "format": "bech32",
                            "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                            "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                          },
                          "validator_address": {
                            "type": "string",
                            "description": "Public Key of an asymmetric key-pair.",
                            "format": "bech32",
                            "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                            "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                          },
                          "amount": {
                            "type": "string",
                            "description": "Denomination of the cryptocurrency Cosmos.",
                            "pattern": "^[1-9]\\d+$",
                            "example": "100"
                          }
                        }
                      },
                      "binance": {
                        "type": "object",
                        "description": "Binance Stake Intent response",
                        "required": [
                          "unsigned_transaction",
                          "amount",
                          "delegator_address",
                          "validator_address"
                        ],
                        "properties": {
                          "unsigned_transaction": {
                            "type": "string",
                            "format": "base64",
                            "description": "Generated unsigned transaction smart contract call data.",
                            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                          },
                          "delegator_address": {
                            "type": "string",
                            "description": "Binance beacon chain address.",
                            "format": "bech32",
                            "pattern": "^bnb[0-9a-z]+$",
                            "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
                          },
                          "validator_address": {
                            "type": "string",
                            "description": "Binance beacon chain validator address.",
                            "format": "bech32",
                            "pattern": "^bva[0-9a-zA-Z]*$",
                            "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                          },
                          "amount": {
                            "type": "string",
                            "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
                            "pattern": "^[1-9]\\d+$",
                            "example": "10000000000"
                          }
                        }
                      },
                      "polygon": {
                        "type": "object",
                        "description": "Polygon Stake Intent",
                        "required": [
                          "to",
                          "unsigned_transaction",
                          "amount",
                          "wallet_address"
                        ],
                        "properties": {
                          "to": {
                            "type": "string",
                            "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                            "format": "hex",
                            "pattern": "^0x[a-fA-F0-9]{40}$",
                            "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                          },
                          "unsigned_transaction": {
                            "type": "string",
                            "format": "base64",
                            "description": "Generated unsigned transaction smart contract call data.",
                            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                          },
                          "amount": {
                            "type": "string",
                            "description": "Denomination of the cryptocurrency Polygon.",
                            "pattern": "^[1-9]\\d+$",
                            "example": "100"
                          },
                          "wallet_address": {
                            "type": "string",
                            "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                            "format": "hex",
                            "pattern": "^0x[a-fA-F0-9]{40}$",
                            "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                          }
                        }
                      },
                      "near": {
                        "type": "object",
                        "description": "NEAR Protocol Stake Intent",
                        "required": [
                          "to",
                          "unsigned_transaction",
                          "amount",
                          "wallet_address",
                          "public_key",
                          "expiration_time"
                        ],
                        "properties": {
                          "to": {
                            "type": "string",
                            "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                            "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                            "example": "alice.near"
                          },
                          "unsigned_transaction": {
                            "type": "string",
                            "format": "base64",
                            "description": "Generated unsigned transaction smart contract call data.",
                            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                          },
                          "amount": {
                            "type": "string",
                            "description": "Denomination of NEAR Protocol.",
                            "pattern": "^[1-9]\\d+$",
                            "example": "100000000000000000000000000"
                          },
                          "wallet_address": {
                            "type": "string",
                            "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                            "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                            "example": "alice.near"
                          },
                          "public_key": {
                            "type": "string",
                            "description": "Base58 encoded public key prefixed by ed25519, associated with the private key that will be used to sign the transaction.",
                            "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
                            "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
                          },
                          "expiration_time": {
                            "type": "integer",
                            "description": "Transaction expiration time",
                            "format": "int64",
                            "example": 1689939023
                          }
                        }
                      },
                      "cardano": {
                        "type": "object",
                        "description": "Cardano Protocol Stake Intent",
                        "required": [
                          "pool_id",
                          "unsigned_transaction",
                          "base_address"
                        ],
                        "properties": {
                          "pool_id": {
                            "type": "string",
                            "description": "bech32 encoded pool id.",
                            "format": "bech32",
                            "example": "pool1ev8fwfccn8gr0zcz3uyps0t0mcrefc6s95wjc6aed3ngc86y5rk"
                          },
                          "unsigned_transaction": {
                            "type": "string",
                            "format": "base64",
                            "description": "Generated unsigned transaction smart contract call data.",
                            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                          },
                          "base_address": {
                            "type": "string",
                            "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
                            "format": "bech32",
                            "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
                          }
                        }
                      },
                      "avalanche": {
                        "type": "object",
                        "description": "Avalanche Stake Intent",
                        "required": [
                          "validator_address",
                          "unsigned_transaction",
                          "amount",
                          "delegator_address",
                          "start_time",
                          "end_time"
                        ],
                        "properties": {
                          "validator_address": {
                            "type": "string",
                            "description": "Avalanche validator node address",
                            "pattern": "^NodeID-[A-Za-z0-9]{43}$",
                            "example": "NodeID-B19uSxUKerjjnA215czAJLHMqNJMbsAMWuSxUKerjjW"
                          },
                          "unsigned_transaction": {
                            "type": "string",
                            "format": "base64",
                            "description": "Generated unsigned transaction smart contract call data.",
                            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                          },
                          "amount": {
                            "type": "string",
                            "description": "Denomination of Avalanche.",
                            "pattern": "^[1-9]\\d+$",
                            "example": "10000000000"
                          },
                          "delegator_address": {
                            "type": "string",
                            "description": "Avalanche platform chain address",
                            "pattern": "^([P]|[a-km-zA-HJ-NP-Z1-9]{36,72})-[a-zA-Z]{1,83}1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{38}$",
                            "example": "P-fuji1g2g0jxcfn5sp59ld7g0t0tp4jrqppvqcfqc7hy"
                          },
                          "start_time": {
                            "description": "Avalanche staking start time",
                            "type": "integer",
                            "format": "int64",
                            "example": 1689939023
                          },
                          "end_time": {
                            "description": "Avalanche staking end time",
                            "type": "integer",
                            "format": "int64",
                            "example": 1689939023
                          }
                        }
                      },
                      "customer_id": {
                        "type": "string",
                        "description": "Unique identifier for a customer",
                        "example": "SatoshiNakamoto-xUYJbPw9hw",
                        "minimum": 1
                      },
                      "plan_id": {
                        "type": "string",
                        "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                        "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                      },
                      "created_at": {
                        "description": "Timestamp",
                        "type": "string",
                        "example": "2023-01-11 06:22:46.182"
                      },
                      "updated_at": {
                        "description": "Timestamp",
                        "type": "string",
                        "example": "2023-01-11 06:22:46.182"
                      }
                    }
                  }
                },
                "pagination": {
                  "type": "object",
                  "description": "encapsulates pagination properties",
                  "required": [
                    "page",
                    "per_page",
                    "total"
                  ],
                  "properties": {
                    "page": {
                      "description": "current page number",
                      "type": "integer",
                      "format": "int64"
                    },
                    "per_page": {
                      "description": "number of results per page",
                      "type": "integer",
                      "format": "int64"
                    },
                    "total": {
                      "description": "total number of results",
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ValidatorNotFound": {
        "description": "Validator not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "description": "Error response envelope",
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Error code",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "description": "Error Message",
                  "example": "A descriptive error message"
                }
              }
            }
          }
        }
      },
      "ListPlansAdmin": {
        "description": "Successful operation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "plans",
                "pagination"
              ],
              "properties": {
                "pagination": {
                  "type": "object",
                  "description": "encapsulates pagination properties",
                  "required": [
                    "page",
                    "per_page",
                    "total"
                  ],
                  "properties": {
                    "page": {
                      "description": "current page number",
                      "type": "integer",
                      "format": "int64"
                    },
                    "per_page": {
                      "description": "number of results per page",
                      "type": "integer",
                      "format": "int64"
                    },
                    "total": {
                      "description": "total number of results",
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                },
                "plans": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "staking plan for validators",
                    "required": [
                      "id",
                      "protocol",
                      "network",
                      "config",
                      "customer_id",
                      "staking_plan_type",
                      "title"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                        "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                      },
                      "customer_id": {
                        "type": "string",
                        "description": "Unique identifier for a customer",
                        "example": "SatoshiNakamoto-xUYJbPw9hw",
                        "minimum": 1
                      },
                      "protocol": {
                        "type": "string",
                        "description": "Blockchain protocol.",
                        "enum": [
                          "ethereum",
                          "polkadot",
                          "solana",
                          "cosmos",
                          "polygon",
                          "near",
                          "cardano",
                          "avalanche",
                          "binance"
                        ]
                      },
                      "network": {
                        "type": "string",
                        "description": "Protocol-specific network.",
                        "enum": [
                          "mainnet",
                          "localnet",
                          "goerli",
                          "prater",
                          "holesky",
                          "testnet",
                          "devnet",
                          "kusama",
                          "westend",
                          "preprod",
                          "fuji",
                          "local"
                        ]
                      },
                      "providers": {
                        "type": "array",
                        "description": "list of node providers",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "description": "node provider",
                          "required": [
                            "provider",
                            "region",
                            "priority"
                          ],
                          "properties": {
                            "provider": {
                              "description": "Cloud provider which will host the node.",
                              "x-go-type": "models.ProviderID",
                              "x-go-type-import": {
                                "path": "go.blockdaemon.com/nodeq-server/pkg/models",
                                "name": "models"
                              }
                            },
                            "region": {
                              "description": "cloud provider's zone code",
                              "type": "string"
                            },
                            "priority": {
                              "description": "reflect priority weighting. provider with weighted 1 will be the first one to try.",
                              "type": "integer",
                              "format": "uint8"
                            }
                          }
                        }
                      },
                      "minimum": {
                        "description": "minimum number of validators to be available. required for white label plans",
                        "type": "integer",
                        "format": "int64"
                      },
                      "config": {
                        "oneOf": [
                          {
                            "type": "object",
                            "description": "Ethereum staking plan config",
                            "required": [
                              "inventory_type"
                            ],
                            "properties": {
                              "suggested_fee_recipient": {
                                "type": "string",
                                "description": "the suggested fee recipient address",
                                "minimum": 1
                              },
                              "mev": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "description": "ID of the MEV fee recipient. optional"
                                  },
                                  "enabled": {
                                    "type": "boolean"
                                  },
                                  "relays": {
                                    "type": "array",
                                    "description": "List of Relay urls",
                                    "items": {
                                      "type": "string",
                                      "format": "uri",
                                      "description": "Relay url"
                                    },
                                    "minItems": 1
                                  }
                                }
                              },
                              "inventory_type": {
                                "type": "string",
                                "description": "Indicates if the quantity of validators for the staking plan is static or dynamic. Static is a once off deployment of a specified quantity of validators. Dynamic is where an initial quantity of validators is deployed with a threshold of available validators also configured. If the number of available validators within the validator inventory drops below the threshold (by being reserved as part of a stake intents API call) then the dynamic plan will automatically deploy the required infrastructure to bring the number of available validators above the threshold.",
                                "enum": [
                                  "static",
                                  "dynamic"
                                ]
                              },
                              "execution_client": {
                                "type": "string",
                                "description": "The execution client to use on the node",
                                "enum": [
                                  "geth",
                                  "besu"
                                ]
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Solana staking plan config",
                            "required": [
                              "validator_address"
                            ],
                            "properties": {
                              "validator_address": {
                                "type": "object",
                                "required": [
                                  "mainnet",
                                  "testnet"
                                ],
                                "properties": {
                                  "mainnet": {
                                    "type": "string",
                                    "description": "Public Key of an asymmetric key-pair.",
                                    "format": "base58",
                                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                  },
                                  "testnet": {
                                    "type": "string",
                                    "description": "Public Key of an asymmetric key-pair.",
                                    "format": "base58",
                                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Polygon staking plan config",
                            "required": [
                              "validator_share_address"
                            ],
                            "properties": {
                              "validator_share_address": {
                                "type": "object",
                                "required": [
                                  "mainnet",
                                  "testnet"
                                ],
                                "properties": {
                                  "mainnet": {
                                    "type": "string",
                                    "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                                    "format": "hex",
                                    "pattern": "^0x[a-fA-F0-9]{40}$",
                                    "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                                  },
                                  "testnet": {
                                    "type": "string",
                                    "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                                    "format": "hex",
                                    "pattern": "^0x[a-fA-F0-9]{40}$",
                                    "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Cardano staking plan config",
                            "required": [
                              "stake_pool_id"
                            ],
                            "properties": {
                              "stake_pool_id": {
                                "type": "object",
                                "required": [
                                  "mainnet",
                                  "preprod"
                                ],
                                "properties": {
                                  "mainnet": {
                                    "type": "string",
                                    "description": "bech32 encoded pool id.",
                                    "format": "bech32",
                                    "example": "pool1ev8fwfccn8gr0zcz3uyps0t0mcrefc6s95wjc6aed3ngc86y5rk"
                                  },
                                  "preprod": {
                                    "type": "string",
                                    "description": "bech32 encoded pool id.",
                                    "format": "bech32",
                                    "example": "pool1ev8fwfccn8gr0zcz3uyps0t0mcrefc6s95wjc6aed3ngc86y5rk"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Avalanche staking plan config",
                            "required": [
                              "validator_address"
                            ],
                            "properties": {
                              "validator_address": {
                                "type": "object",
                                "required": [
                                  "mainnet",
                                  "fuji"
                                ],
                                "properties": {
                                  "mainnet": {
                                    "type": "string",
                                    "description": "Avalanche validator node address",
                                    "pattern": "^NodeID-[A-Za-z0-9]{43}$",
                                    "example": "NodeID-B19uSxUKerjjnA215czAJLHMqNJMbsAMWuSxUKerjjW"
                                  },
                                  "fuji": {
                                    "type": "string",
                                    "description": "Avalanche validator node address",
                                    "pattern": "^NodeID-[A-Za-z0-9]{43}$",
                                    "example": "NodeID-B19uSxUKerjjnA215czAJLHMqNJMbsAMWuSxUKerjjW"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Cosmos staking plan config",
                            "required": [
                              "validator_address"
                            ],
                            "properties": {
                              "validator_address": {
                                "type": "object",
                                "required": [
                                  "mainnet",
                                  "testnet"
                                ],
                                "properties": {
                                  "mainnet": {
                                    "type": "string",
                                    "description": "Public Key of an asymmetric key-pair.",
                                    "format": "bech32",
                                    "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                                    "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                                  },
                                  "testnet": {
                                    "type": "string",
                                    "description": "Public Key of an asymmetric key-pair.",
                                    "format": "bech32",
                                    "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                                    "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Binance staking plan config",
                            "required": [
                              "validator_address"
                            ],
                            "properties": {
                              "validator_address": {
                                "type": "object",
                                "required": [
                                  "mainnet",
                                  "testnet"
                                ],
                                "properties": {
                                  "mainnet": {
                                    "type": "string",
                                    "description": "Binance beacon chain validator address.",
                                    "format": "bech32",
                                    "pattern": "^bva[0-9a-zA-Z]*$",
                                    "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                                  },
                                  "testnet": {
                                    "type": "string",
                                    "description": "Binance beacon chain validator address.",
                                    "format": "bech32",
                                    "pattern": "^bva[0-9a-zA-Z]*$",
                                    "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      },
                      "total_pending": {
                        "description": "total number of pending validators in a staking plan",
                        "type": "integer",
                        "format": "int64"
                      },
                      "total_available": {
                        "description": "total number of available validators in a staking plan",
                        "type": "integer",
                        "format": "int64"
                      },
                      "total_active": {
                        "description": "total number of active validators in a staking plan",
                        "type": "integer",
                        "format": "int64"
                      },
                      "staking_plan_type": {
                        "type": "string",
                        "description": "Indicates if the staking plan requires a Blockdaemon validator launch or it is associated to a public validator.",
                        "enum": [
                          "white_label",
                          "public"
                        ]
                      },
                      "title": {
                        "type": "string",
                        "description": "Plan title for display purposes"
                      },
                      "total_reserved": {
                        "description": "total number of reserved validators in a staking plan",
                        "type": "integer",
                        "format": "int64"
                      },
                      "shared": {
                        "description": "flag for shared plans",
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ListSharedPlans": {
        "description": "Successful operation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "plans"
              ],
              "properties": {
                "plans": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "staking plan for validators",
                    "required": [
                      "id",
                      "protocol",
                      "network",
                      "config",
                      "customer_id",
                      "staking_plan_type",
                      "title"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                        "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                      },
                      "customer_id": {
                        "type": "string",
                        "description": "Unique identifier for a customer",
                        "example": "SatoshiNakamoto-xUYJbPw9hw",
                        "minimum": 1
                      },
                      "protocol": {
                        "type": "string",
                        "description": "Blockchain protocol.",
                        "enum": [
                          "ethereum",
                          "polkadot",
                          "solana",
                          "cosmos",
                          "polygon",
                          "near",
                          "cardano",
                          "avalanche",
                          "binance"
                        ]
                      },
                      "network": {
                        "type": "string",
                        "description": "Protocol-specific network.",
                        "enum": [
                          "mainnet",
                          "localnet",
                          "goerli",
                          "prater",
                          "holesky",
                          "testnet",
                          "devnet",
                          "kusama",
                          "westend",
                          "preprod",
                          "fuji",
                          "local"
                        ]
                      },
                      "providers": {
                        "type": "array",
                        "description": "list of node providers",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "description": "node provider",
                          "required": [
                            "provider",
                            "region",
                            "priority"
                          ],
                          "properties": {
                            "provider": {
                              "description": "Cloud provider which will host the node.",
                              "x-go-type": "models.ProviderID",
                              "x-go-type-import": {
                                "path": "go.blockdaemon.com/nodeq-server/pkg/models",
                                "name": "models"
                              }
                            },
                            "region": {
                              "description": "cloud provider's zone code",
                              "type": "string"
                            },
                            "priority": {
                              "description": "reflect priority weighting. provider with weighted 1 will be the first one to try.",
                              "type": "integer",
                              "format": "uint8"
                            }
                          }
                        }
                      },
                      "minimum": {
                        "description": "minimum number of validators to be available. required for white label plans",
                        "type": "integer",
                        "format": "int64"
                      },
                      "config": {
                        "oneOf": [
                          {
                            "type": "object",
                            "description": "Ethereum staking plan config",
                            "required": [
                              "inventory_type"
                            ],
                            "properties": {
                              "suggested_fee_recipient": {
                                "type": "string",
                                "description": "the suggested fee recipient address",
                                "minimum": 1
                              },
                              "mev": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "description": "ID of the MEV fee recipient. optional"
                                  },
                                  "enabled": {
                                    "type": "boolean"
                                  },
                                  "relays": {
                                    "type": "array",
                                    "description": "List of Relay urls",
                                    "items": {
                                      "type": "string",
                                      "format": "uri",
                                      "description": "Relay url"
                                    },
                                    "minItems": 1
                                  }
                                }
                              },
                              "inventory_type": {
                                "type": "string",
                                "description": "Indicates if the quantity of validators for the staking plan is static or dynamic. Static is a once off deployment of a specified quantity of validators. Dynamic is where an initial quantity of validators is deployed with a threshold of available validators also configured. If the number of available validators within the validator inventory drops below the threshold (by being reserved as part of a stake intents API call) then the dynamic plan will automatically deploy the required infrastructure to bring the number of available validators above the threshold.",
                                "enum": [
                                  "static",
                                  "dynamic"
                                ]
                              },
                              "execution_client": {
                                "type": "string",
                                "description": "The execution client to use on the node",
                                "enum": [
                                  "geth",
                                  "besu"
                                ]
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Solana staking plan config",
                            "required": [
                              "validator_address"
                            ],
                            "properties": {
                              "validator_address": {
                                "type": "object",
                                "required": [
                                  "mainnet",
                                  "testnet"
                                ],
                                "properties": {
                                  "mainnet": {
                                    "type": "string",
                                    "description": "Public Key of an asymmetric key-pair.",
                                    "format": "base58",
                                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                  },
                                  "testnet": {
                                    "type": "string",
                                    "description": "Public Key of an asymmetric key-pair.",
                                    "format": "base58",
                                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Polygon staking plan config",
                            "required": [
                              "validator_share_address"
                            ],
                            "properties": {
                              "validator_share_address": {
                                "type": "object",
                                "required": [
                                  "mainnet",
                                  "testnet"
                                ],
                                "properties": {
                                  "mainnet": {
                                    "type": "string",
                                    "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                                    "format": "hex",
                                    "pattern": "^0x[a-fA-F0-9]{40}$",
                                    "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                                  },
                                  "testnet": {
                                    "type": "string",
                                    "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                                    "format": "hex",
                                    "pattern": "^0x[a-fA-F0-9]{40}$",
                                    "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Cardano staking plan config",
                            "required": [
                              "stake_pool_id"
                            ],
                            "properties": {
                              "stake_pool_id": {
                                "type": "object",
                                "required": [
                                  "mainnet",
                                  "preprod"
                                ],
                                "properties": {
                                  "mainnet": {
                                    "type": "string",
                                    "description": "bech32 encoded pool id.",
                                    "format": "bech32",
                                    "example": "pool1ev8fwfccn8gr0zcz3uyps0t0mcrefc6s95wjc6aed3ngc86y5rk"
                                  },
                                  "preprod": {
                                    "type": "string",
                                    "description": "bech32 encoded pool id.",
                                    "format": "bech32",
                                    "example": "pool1ev8fwfccn8gr0zcz3uyps0t0mcrefc6s95wjc6aed3ngc86y5rk"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Avalanche staking plan config",
                            "required": [
                              "validator_address"
                            ],
                            "properties": {
                              "validator_address": {
                                "type": "object",
                                "required": [
                                  "mainnet",
                                  "fuji"
                                ],
                                "properties": {
                                  "mainnet": {
                                    "type": "string",
                                    "description": "Avalanche validator node address",
                                    "pattern": "^NodeID-[A-Za-z0-9]{43}$",
                                    "example": "NodeID-B19uSxUKerjjnA215czAJLHMqNJMbsAMWuSxUKerjjW"
                                  },
                                  "fuji": {
                                    "type": "string",
                                    "description": "Avalanche validator node address",
                                    "pattern": "^NodeID-[A-Za-z0-9]{43}$",
                                    "example": "NodeID-B19uSxUKerjjnA215czAJLHMqNJMbsAMWuSxUKerjjW"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Cosmos staking plan config",
                            "required": [
                              "validator_address"
                            ],
                            "properties": {
                              "validator_address": {
                                "type": "object",
                                "required": [
                                  "mainnet",
                                  "testnet"
                                ],
                                "properties": {
                                  "mainnet": {
                                    "type": "string",
                                    "description": "Public Key of an asymmetric key-pair.",
                                    "format": "bech32",
                                    "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                                    "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                                  },
                                  "testnet": {
                                    "type": "string",
                                    "description": "Public Key of an asymmetric key-pair.",
                                    "format": "bech32",
                                    "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                                    "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Binance staking plan config",
                            "required": [
                              "validator_address"
                            ],
                            "properties": {
                              "validator_address": {
                                "type": "object",
                                "required": [
                                  "mainnet",
                                  "testnet"
                                ],
                                "properties": {
                                  "mainnet": {
                                    "type": "string",
                                    "description": "Binance beacon chain validator address.",
                                    "format": "bech32",
                                    "pattern": "^bva[0-9a-zA-Z]*$",
                                    "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                                  },
                                  "testnet": {
                                    "type": "string",
                                    "description": "Binance beacon chain validator address.",
                                    "format": "bech32",
                                    "pattern": "^bva[0-9a-zA-Z]*$",
                                    "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      },
                      "total_pending": {
                        "description": "total number of pending validators in a staking plan",
                        "type": "integer",
                        "format": "int64"
                      },
                      "total_available": {
                        "description": "total number of available validators in a staking plan",
                        "type": "integer",
                        "format": "int64"
                      },
                      "total_active": {
                        "description": "total number of active validators in a staking plan",
                        "type": "integer",
                        "format": "int64"
                      },
                      "staking_plan_type": {
                        "type": "string",
                        "description": "Indicates if the staking plan requires a Blockdaemon validator launch or it is associated to a public validator.",
                        "enum": [
                          "white_label",
                          "public"
                        ]
                      },
                      "title": {
                        "type": "string",
                        "description": "Plan title for display purposes"
                      },
                      "total_reserved": {
                        "description": "total number of reserved validators in a staking plan",
                        "type": "integer",
                        "format": "int64"
                      },
                      "shared": {
                        "description": "flag for shared plans",
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ValidatorBondTimeResponse": {
        "description": "Estimate bond time for validators for given protocol",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "description": "Epochs object indicates number of epochs required for validator bonding to occur.",
              "required": [
                "epochs"
              ],
              "properties": {
                "epochs": {
                  "type": "object",
                  "description": "Validator bonding / unbonding estimates in epochs",
                  "required": [
                    "current",
                    "min"
                  ],
                  "properties": {
                    "min": {
                      "type": "integer",
                      "format": "int64",
                      "description": "estimated minimum epochs for validator bonding / unbonding to occur"
                    },
                    "max": {
                      "type": "integer",
                      "format": "int64",
                      "description": "estimated maximum epochs for validator bonding / unbonding to occur"
                    },
                    "current": {
                      "type": "integer",
                      "format": "int64",
                      "description": "current epoch where max / min epochs were calculated"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ValidatorUnbondTimeResponse": {
        "description": "Estimate unbond time for validators for given protocol",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "description": "Epochs object indicates number of epochs required for validator unbonding to occur.",
              "required": [
                "epochs"
              ],
              "properties": {
                "epochs": {
                  "type": "object",
                  "description": "Validator bonding / unbonding estimates in epochs",
                  "required": [
                    "current",
                    "min"
                  ],
                  "properties": {
                    "min": {
                      "type": "integer",
                      "format": "int64",
                      "description": "estimated minimum epochs for validator bonding / unbonding to occur"
                    },
                    "max": {
                      "type": "integer",
                      "format": "int64",
                      "description": "estimated maximum epochs for validator bonding / unbonding to occur"
                    },
                    "current": {
                      "type": "integer",
                      "format": "int64",
                      "description": "current epoch where max / min epochs were calculated"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "ActivationDate": {
        "type": "string",
        "example": "2024-01-25T15:44:00Z",
        "description": "Date when the validator was activated."
      },
      "Addresses": {
        "type": "object",
        "required": [
          "addresses"
        ],
        "properties": {
          "addresses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AnyStakeIntentResponse": {
        "type": "object",
        "description": "Protocol-specific stake intent response",
        "oneOf": [
          {
            "allOf": [
              {
                "type": "object",
                "required": [
                  "stake_intent_id",
                  "customer_id"
                ],
                "properties": {
                  "stake_intent_id": {
                    "type": "string",
                    "format": "base58",
                    "description": "Unique idenifier for a group of stakes.",
                    "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
                  },
                  "customer_id": {
                    "type": "string",
                    "description": "Unique identifier for a customer",
                    "example": "SatoshiNakamoto-xUYJbPw9hw",
                    "minimum": 1
                  },
                  "plan_id": {
                    "type": "string",
                    "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                    "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "protocol",
                  "network"
                ],
                "properties": {
                  "protocol": {
                    "type": "string",
                    "description": "Ethereum protocol",
                    "enum": [
                      "ethereum"
                    ]
                  },
                  "network": {
                    "type": "string",
                    "description": "Ethereum network",
                    "enum": [
                      "mainnet",
                      "holesky"
                    ]
                  },
                  "ethereum": {
                    "type": "object",
                    "description": "Ethereum Stake Intent response",
                    "required": [
                      "stakes",
                      "contract_address",
                      "unsigned_transaction",
                      "estimated_gas",
                      "expiration_time"
                    ],
                    "properties": {
                      "stakes": {
                        "description": "Stakes being made.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "description": "Individual Ethereum Stake Response",
                          "required": [
                            "stake_id",
                            "amount",
                            "validator_public_key",
                            "withdrawal_credentials",
                            "fee_recipient"
                          ],
                          "properties": {
                            "stake_id": {
                              "description": "Unique stake identifier.",
                              "type": "string",
                              "format": "base58",
                              "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                            },
                            "amount": {
                              "type": "string",
                              "description": "Amount of ETH (denominated in Gwei).",
                              "pattern": "^[1-9]\\d{10,}$",
                              "example": "32000000000"
                            },
                            "validator_public_key": {
                              "type": "string",
                              "description": "A BLS public Key.",
                              "format": "base64",
                              "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                            },
                            "withdrawal_credentials": {
                              "type": "string",
                              "format": "hex",
                              "pattern": "^0x0(0|1)[a-fA-F0-9]{62}$",
                              "example": "0x0092c20062cee70389f1cb4fa566a2be5e2319ff43965db26dbaa3ce90b9df99",
                              "description": "Hexadecimal encoded [withdrawal credentials](https://github.com/ethereum/consensus-specs/blob/master/specs/phase0/validator.md#withdrawal-credentials) which can be either a BLS public key or an Ethereum account address.\n\nThis parameter currently accepts ETH1 and BLS withdrawal credentials, but it is considered deprecated after the Capella/Shanghai fork. All users are now advised to use an ETH1 withdrawal address, specified through the `withdrawal_address` parameter as this is required to enable the ongoing accrual of rewards.\n\nFor more information regarding creating withdrawal credentials, please see the official [Ethereum Launchpad FAQ](https://launchpad.ethereum.org/en/faq#withdrawal-credentials)."
                            },
                            "fee_recipient": {
                              "type": "string",
                              "description": "An Ethereum address to receive transaction fees from published blocks. 20-bytes, hex encoded with 0x prefix, case insensitive.",
                              "example": "0x93247f2209abcacf57b75a51dafae777f9dd38bc",
                              "pattern": "^0x[a-fA-F0-9]{40}$"
                            }
                          }
                        }
                      },
                      "contract_address": {
                        "type": "string",
                        "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                        "format": "hex",
                        "pattern": "^0x[a-fA-F0-9]{40}$",
                        "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                      },
                      "unsigned_transaction": {
                        "type": "string",
                        "format": "base64",
                        "description": "Generated unsigned transaction smart contract call data.",
                        "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                      },
                      "estimated_gas": {
                        "type": "integer",
                        "description": "Gas estimation of the transaction",
                        "format": "uint64",
                        "example": 1001
                      },
                      "expiration_time": {
                        "type": "integer",
                        "description": "Transaction expiration time",
                        "format": "int64",
                        "example": 1689939023
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "type": "object",
                "required": [
                  "stake_intent_id",
                  "customer_id"
                ],
                "properties": {
                  "stake_intent_id": {
                    "type": "string",
                    "format": "base58",
                    "description": "Unique idenifier for a group of stakes.",
                    "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
                  },
                  "customer_id": {
                    "type": "string",
                    "description": "Unique identifier for a customer",
                    "example": "SatoshiNakamoto-xUYJbPw9hw",
                    "minimum": 1
                  },
                  "plan_id": {
                    "type": "string",
                    "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                    "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "protocol",
                  "network"
                ],
                "properties": {
                  "protocol": {
                    "type": "string",
                    "description": "Solana protocol",
                    "enum": [
                      "solana"
                    ]
                  },
                  "network": {
                    "type": "string",
                    "description": "Solana network",
                    "enum": [
                      "mainnet",
                      "testnet"
                    ]
                  },
                  "solana": {
                    "type": "object",
                    "description": "Solana Stake Intent response",
                    "required": [
                      "stake_id",
                      "amount",
                      "validator_public_key",
                      "withdrawal_authority",
                      "staking_authority",
                      "stake_account_public_key",
                      "unsigned_transaction",
                      "expiration_time"
                    ],
                    "properties": {
                      "stake_id": {
                        "description": "Unique stake identifier.",
                        "type": "string",
                        "format": "base58",
                        "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                      },
                      "amount": {
                        "type": "string",
                        "description": "Denomination of the cryptocurrency Solana.",
                        "pattern": "^[1-9]\\d+$",
                        "example": "100"
                      },
                      "validator_public_key": {
                        "type": "string",
                        "description": "A BLS public Key.",
                        "format": "base64",
                        "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                      },
                      "staking_authority": {
                        "type": "string",
                        "description": "Public Key of an asymmetric key-pair.",
                        "format": "base58",
                        "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                        "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                      },
                      "withdrawal_authority": {
                        "type": "string",
                        "description": "A BLS public Key.",
                        "format": "base64",
                        "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                      },
                      "stake_account_public_key": {
                        "type": "string",
                        "description": "Public Key of an asymmetric key-pair.",
                        "format": "base58",
                        "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                        "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                      },
                      "unsigned_transaction": {
                        "type": "string",
                        "format": "base64",
                        "description": "Generated unsigned transaction smart contract call data.",
                        "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                      },
                      "expiration_time": {
                        "type": "integer",
                        "description": "Transaction expiration time",
                        "format": "int64",
                        "example": 1689939023
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "type": "object",
                "required": [
                  "stake_intent_id",
                  "customer_id"
                ],
                "properties": {
                  "stake_intent_id": {
                    "type": "string",
                    "format": "base58",
                    "description": "Unique idenifier for a group of stakes.",
                    "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
                  },
                  "customer_id": {
                    "type": "string",
                    "description": "Unique identifier for a customer",
                    "example": "SatoshiNakamoto-xUYJbPw9hw",
                    "minimum": 1
                  },
                  "plan_id": {
                    "type": "string",
                    "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                    "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "protocol",
                  "network"
                ],
                "properties": {
                  "protocol": {
                    "type": "string",
                    "description": "Polygon protocol",
                    "enum": [
                      "polygon"
                    ]
                  },
                  "network": {
                    "type": "string",
                    "description": "Polygon network",
                    "enum": [
                      "mainnet",
                      "goerli",
                      "prater"
                    ]
                  },
                  "polygon": {
                    "type": "object",
                    "description": "Polygon Stake Intent",
                    "required": [
                      "to",
                      "unsigned_transaction",
                      "amount",
                      "wallet_address"
                    ],
                    "properties": {
                      "to": {
                        "type": "string",
                        "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                        "format": "hex",
                        "pattern": "^0x[a-fA-F0-9]{40}$",
                        "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                      },
                      "unsigned_transaction": {
                        "type": "string",
                        "format": "base64",
                        "description": "Generated unsigned transaction smart contract call data.",
                        "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                      },
                      "amount": {
                        "type": "string",
                        "description": "Denomination of the cryptocurrency Polygon.",
                        "pattern": "^[1-9]\\d+$",
                        "example": "100"
                      },
                      "wallet_address": {
                        "type": "string",
                        "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                        "format": "hex",
                        "pattern": "^0x[a-fA-F0-9]{40}$",
                        "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "type": "object",
                "required": [
                  "stake_intent_id",
                  "customer_id"
                ],
                "properties": {
                  "stake_intent_id": {
                    "type": "string",
                    "format": "base58",
                    "description": "Unique idenifier for a group of stakes.",
                    "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
                  },
                  "customer_id": {
                    "type": "string",
                    "description": "Unique identifier for a customer",
                    "example": "SatoshiNakamoto-xUYJbPw9hw",
                    "minimum": 1
                  },
                  "plan_id": {
                    "type": "string",
                    "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                    "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "protocol",
                  "network"
                ],
                "properties": {
                  "protocol": {
                    "type": "string",
                    "description": "Polkadot protocol",
                    "enum": [
                      "polkadot"
                    ]
                  },
                  "network": {
                    "type": "string",
                    "description": "Coin network",
                    "enum": [
                      "mainnet",
                      "kusama",
                      "westend"
                    ]
                  },
                  "polkadot": {
                    "type": "object",
                    "description": "Polkadot Stake Intent Response",
                    "required": [
                      "stake_id",
                      "unsigned_transaction",
                      "proxy_address"
                    ],
                    "properties": {
                      "unsigned_transaction": {
                        "description": "Unsigned transaction that bonds a Blockdaemon's proxy account to the given customer account.\nOnce this transaction is signed, broadcasted to the network and included in the canonical history of the chain, the proxy account will be associated with the customer account.",
                        "type": "string",
                        "format": "base64",
                        "example": "0xa4041601008c16e19e94328985d65cb7e3245213892730dd0e841f6511478cb12f23a178330100000000"
                      },
                      "customer_address": {
                        "description": "Address of the customer account to associate with the proxy account.",
                        "type": "string",
                        "format": "base58",
                        "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                        "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                      },
                      "controller_address": {
                        "description": "Address of the customer account to associate with the proxy account.\nSame as customer_address. Deprecated - will be removed in a later version.",
                        "type": "string",
                        "format": "base58",
                        "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                        "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                      },
                      "proxy_address": {
                        "description": "Address of the proxy account to associate with the customer account.",
                        "type": "string",
                        "format": "base58",
                        "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                        "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "type": "object",
                "required": [
                  "stake_intent_id",
                  "customer_id"
                ],
                "properties": {
                  "stake_intent_id": {
                    "type": "string",
                    "format": "base58",
                    "description": "Unique idenifier for a group of stakes.",
                    "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
                  },
                  "customer_id": {
                    "type": "string",
                    "description": "Unique identifier for a customer",
                    "example": "SatoshiNakamoto-xUYJbPw9hw",
                    "minimum": 1
                  },
                  "plan_id": {
                    "type": "string",
                    "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                    "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "protocol",
                  "network"
                ],
                "properties": {
                  "protocol": {
                    "type": "string",
                    "description": "Near protocol",
                    "enum": [
                      "near"
                    ]
                  },
                  "network": {
                    "type": "string",
                    "description": "NEAR network",
                    "enum": [
                      "mainnet",
                      "testnet",
                      "localnet"
                    ]
                  },
                  "near": {
                    "type": "object",
                    "description": "NEAR Protocol Stake Intent",
                    "required": [
                      "to",
                      "unsigned_transaction",
                      "amount",
                      "wallet_address",
                      "public_key",
                      "expiration_time"
                    ],
                    "properties": {
                      "to": {
                        "type": "string",
                        "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                        "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                        "example": "alice.near"
                      },
                      "unsigned_transaction": {
                        "type": "string",
                        "format": "base64",
                        "description": "Generated unsigned transaction smart contract call data.",
                        "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                      },
                      "amount": {
                        "type": "string",
                        "description": "Denomination of NEAR Protocol.",
                        "pattern": "^[1-9]\\d+$",
                        "example": "100000000000000000000000000"
                      },
                      "wallet_address": {
                        "type": "string",
                        "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                        "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                        "example": "alice.near"
                      },
                      "public_key": {
                        "type": "string",
                        "description": "Base58 encoded public key prefixed by ed25519, associated with the private key that will be used to sign the transaction.",
                        "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
                        "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
                      },
                      "expiration_time": {
                        "type": "integer",
                        "description": "Transaction expiration time",
                        "format": "int64",
                        "example": 1689939023
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "type": "object",
                "required": [
                  "stake_intent_id",
                  "customer_id"
                ],
                "properties": {
                  "stake_intent_id": {
                    "type": "string",
                    "format": "base58",
                    "description": "Unique idenifier for a group of stakes.",
                    "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
                  },
                  "customer_id": {
                    "type": "string",
                    "description": "Unique identifier for a customer",
                    "example": "SatoshiNakamoto-xUYJbPw9hw",
                    "minimum": 1
                  },
                  "plan_id": {
                    "type": "string",
                    "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                    "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "protocol",
                  "network"
                ],
                "properties": {
                  "protocol": {
                    "type": "string",
                    "description": "Avalanche protocol",
                    "enum": [
                      "avalanche"
                    ]
                  },
                  "network": {
                    "type": "string",
                    "description": "Avalanche network",
                    "enum": [
                      "mainnet",
                      "fuji",
                      "local"
                    ]
                  },
                  "avalanche": {
                    "type": "object",
                    "description": "Avalanche Stake Intent",
                    "required": [
                      "validator_address",
                      "unsigned_transaction",
                      "amount",
                      "delegator_address",
                      "start_time",
                      "end_time"
                    ],
                    "properties": {
                      "validator_address": {
                        "type": "string",
                        "description": "Avalanche validator node address",
                        "pattern": "^NodeID-[A-Za-z0-9]{43}$",
                        "example": "NodeID-B19uSxUKerjjnA215czAJLHMqNJMbsAMWuSxUKerjjW"
                      },
                      "unsigned_transaction": {
                        "type": "string",
                        "format": "base64",
                        "description": "Generated unsigned transaction smart contract call data.",
                        "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                      },
                      "amount": {
                        "type": "string",
                        "description": "Denomination of Avalanche.",
                        "pattern": "^[1-9]\\d+$",
                        "example": "10000000000"
                      },
                      "delegator_address": {
                        "type": "string",
                        "description": "Avalanche platform chain address",
                        "pattern": "^([P]|[a-km-zA-HJ-NP-Z1-9]{36,72})-[a-zA-Z]{1,83}1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{38}$",
                        "example": "P-fuji1g2g0jxcfn5sp59ld7g0t0tp4jrqppvqcfqc7hy"
                      },
                      "start_time": {
                        "description": "Avalanche staking start time",
                        "type": "integer",
                        "format": "int64",
                        "example": 1689939023
                      },
                      "end_time": {
                        "description": "Avalanche staking end time",
                        "type": "integer",
                        "format": "int64",
                        "example": 1689939023
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "type": "object",
                "required": [
                  "stake_intent_id",
                  "customer_id"
                ],
                "properties": {
                  "stake_intent_id": {
                    "type": "string",
                    "format": "base58",
                    "description": "Unique idenifier for a group of stakes.",
                    "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
                  },
                  "customer_id": {
                    "type": "string",
                    "description": "Unique identifier for a customer",
                    "example": "SatoshiNakamoto-xUYJbPw9hw",
                    "minimum": 1
                  },
                  "plan_id": {
                    "type": "string",
                    "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                    "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "protocol",
                  "network"
                ],
                "properties": {
                  "protocol": {
                    "type": "string",
                    "description": "Cosmos protocol",
                    "enum": [
                      "cosmos"
                    ]
                  },
                  "network": {
                    "type": "string",
                    "description": "Cosmos network",
                    "enum": [
                      "mainnet",
                      "testnet"
                    ]
                  },
                  "cosmos": {
                    "type": "object",
                    "description": "Cosmos Stake Intent response",
                    "required": [
                      "unsigned_transaction",
                      "amount",
                      "delegator_address",
                      "validator_address"
                    ],
                    "properties": {
                      "unsigned_transaction": {
                        "type": "string",
                        "format": "base64",
                        "description": "Generated unsigned transaction smart contract call data.",
                        "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                      },
                      "delegator_address": {
                        "type": "string",
                        "description": "Public Key of an asymmetric key-pair.",
                        "format": "bech32",
                        "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                        "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                      },
                      "validator_address": {
                        "type": "string",
                        "description": "Public Key of an asymmetric key-pair.",
                        "format": "bech32",
                        "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                        "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                      },
                      "amount": {
                        "type": "string",
                        "description": "Denomination of the cryptocurrency Cosmos.",
                        "pattern": "^[1-9]\\d+$",
                        "example": "100"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "type": "object",
                "required": [
                  "stake_intent_id",
                  "customer_id"
                ],
                "properties": {
                  "stake_intent_id": {
                    "type": "string",
                    "format": "base58",
                    "description": "Unique idenifier for a group of stakes.",
                    "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
                  },
                  "customer_id": {
                    "type": "string",
                    "description": "Unique identifier for a customer",
                    "example": "SatoshiNakamoto-xUYJbPw9hw",
                    "minimum": 1
                  },
                  "plan_id": {
                    "type": "string",
                    "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                    "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "protocol",
                  "network"
                ],
                "properties": {
                  "protocol": {
                    "type": "string",
                    "description": "Cardano protocol",
                    "enum": [
                      "cardano"
                    ]
                  },
                  "network": {
                    "type": "string",
                    "description": "Cardano network",
                    "enum": [
                      "mainnet",
                      "preprod",
                      "localnet"
                    ]
                  },
                  "cardano": {
                    "type": "object",
                    "description": "Cardano Protocol Stake Intent",
                    "required": [
                      "pool_id",
                      "unsigned_transaction",
                      "base_address"
                    ],
                    "properties": {
                      "pool_id": {
                        "type": "string",
                        "description": "bech32 encoded pool id.",
                        "format": "bech32",
                        "example": "pool1ev8fwfccn8gr0zcz3uyps0t0mcrefc6s95wjc6aed3ngc86y5rk"
                      },
                      "unsigned_transaction": {
                        "type": "string",
                        "format": "base64",
                        "description": "Generated unsigned transaction smart contract call data.",
                        "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                      },
                      "base_address": {
                        "type": "string",
                        "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
                        "format": "bech32",
                        "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "type": "object",
                "required": [
                  "stake_intent_id",
                  "customer_id"
                ],
                "properties": {
                  "stake_intent_id": {
                    "type": "string",
                    "format": "base58",
                    "description": "Unique idenifier for a group of stakes.",
                    "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
                  },
                  "customer_id": {
                    "type": "string",
                    "description": "Unique identifier for a customer",
                    "example": "SatoshiNakamoto-xUYJbPw9hw",
                    "minimum": 1
                  },
                  "plan_id": {
                    "type": "string",
                    "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                    "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "protocol",
                  "network",
                  "binance"
                ],
                "properties": {
                  "protocol": {
                    "type": "string",
                    "description": "Binance beacon chain protocol",
                    "enum": [
                      "binance"
                    ]
                  },
                  "network": {
                    "type": "string",
                    "description": "Binance beacon chain network",
                    "enum": [
                      "mainnet",
                      "testnet"
                    ]
                  },
                  "binance": {
                    "type": "object",
                    "description": "Binance Stake Intent response",
                    "required": [
                      "unsigned_transaction",
                      "amount",
                      "delegator_address",
                      "validator_address"
                    ],
                    "properties": {
                      "unsigned_transaction": {
                        "type": "string",
                        "format": "base64",
                        "description": "Generated unsigned transaction smart contract call data.",
                        "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                      },
                      "delegator_address": {
                        "type": "string",
                        "description": "Binance beacon chain address.",
                        "format": "bech32",
                        "pattern": "^bnb[0-9a-z]+$",
                        "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
                      },
                      "validator_address": {
                        "type": "string",
                        "description": "Binance beacon chain validator address.",
                        "format": "bech32",
                        "pattern": "^bva[0-9a-zA-Z]*$",
                        "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                      },
                      "amount": {
                        "type": "string",
                        "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
                        "pattern": "^[1-9]\\d+$",
                        "example": "10000000000"
                      }
                    }
                  }
                }
              }
            ]
          }
        ]
      },
      "BootstrappingIntent": {
        "type": "object",
        "required": [
          "protocol",
          "network",
          "customer_id"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ],
            "example": "polygon"
          },
          "network": {
            "type": "string",
            "description": "Protocol-specific network.",
            "enum": [
              "mainnet",
              "localnet",
              "goerli",
              "prater",
              "holesky",
              "testnet",
              "devnet",
              "kusama",
              "westend",
              "preprod",
              "fuji",
              "local"
            ]
          },
          "polygon": {
            "type": "object",
            "description": "Polygon Bootstrapping Intent",
            "required": [
              "to",
              "unsigned_transaction",
              "wallet_address"
            ],
            "properties": {
              "to": {
                "type": "string",
                "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                "format": "hex",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
              },
              "unsigned_transaction": {
                "type": "string",
                "format": "base64",
                "description": "Generated unsigned transaction smart contract call data.",
                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
              },
              "wallet_address": {
                "type": "string",
                "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                "format": "hex",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
              }
            }
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          }
        }
      },
      "BootstrappingIntentPolygon": {
        "type": "object",
        "description": "Polygon Bootstrapping Intent",
        "required": [
          "to",
          "unsigned_transaction",
          "wallet_address"
        ],
        "properties": {
          "to": {
            "type": "string",
            "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
            "format": "hex",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
          },
          "unsigned_transaction": {
            "type": "string",
            "format": "base64",
            "description": "Generated unsigned transaction smart contract call data.",
            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
          },
          "wallet_address": {
            "type": "string",
            "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
            "format": "hex",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
          }
        }
      },
      "CommonStakeIntentResponse": {
        "type": "object",
        "required": [
          "stake_intent_id",
          "customer_id"
        ],
        "properties": {
          "stake_intent_id": {
            "type": "string",
            "format": "base58",
            "description": "Unique idenifier for a group of stakes.",
            "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          },
          "plan_id": {
            "type": "string",
            "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
            "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
          }
        }
      },
      "CommonRestakeResponse": {
        "type": "object",
        "required": [
          "restake_intent_id",
          "customer_id"
        ],
        "properties": {
          "restake_intent_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique idenifier for a restake intent.",
            "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          }
        }
      },
      "CommonDeactivationResponse": {
        "type": "object",
        "required": [
          "deactivate_intent_id",
          "customer_id"
        ],
        "properties": {
          "deactivate_intent_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique idenifier for deactivate intent.",
            "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          }
        }
      },
      "CommonWithdrawalResponse": {
        "type": "object",
        "required": [
          "withdraw_intent_id",
          "customer_id"
        ],
        "properties": {
          "withdraw_intent_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique idenifier for a withdrawal intent.",
            "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          }
        }
      },
      "CosmosAccountAddress": {
        "type": "string",
        "description": "Public Key of an asymmetric key-pair.",
        "format": "bech32",
        "pattern": "^cosmos[1-9a-zA-Z]{39}$",
        "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
      },
      "BinanceAccountAddress": {
        "type": "string",
        "description": "Binance beacon chain address.",
        "format": "bech32",
        "pattern": "^bnb[0-9a-z]+$",
        "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
      },
      "CreateEthereumNodeParams": {
        "type": "object",
        "description": "Request object to create a new Eth Node.",
        "required": [
          "customer_id",
          "providers",
          "protocol",
          "network",
          "plan_id"
        ],
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "the customer ID"
          },
          "providers": {
            "type": "array",
            "description": "list of node providers",
            "minItems": 1,
            "items": {
              "type": "object",
              "description": "node provider",
              "required": [
                "provider",
                "region",
                "priority"
              ],
              "properties": {
                "provider": {
                  "description": "Cloud provider which will host the node.",
                  "x-go-type": "models.ProviderID",
                  "x-go-type-import": {
                    "path": "go.blockdaemon.com/nodeq-server/pkg/models",
                    "name": "models"
                  }
                },
                "region": {
                  "description": "cloud provider's zone code",
                  "type": "string"
                },
                "priority": {
                  "description": "reflect priority weighting. provider with weighted 1 will be the first one to try.",
                  "type": "integer",
                  "format": "uint8"
                }
              }
            }
          },
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          },
          "network": {
            "type": "string",
            "description": "Protocol-specific network.",
            "enum": [
              "mainnet",
              "localnet",
              "goerli",
              "prater",
              "holesky",
              "testnet",
              "devnet",
              "kusama",
              "westend",
              "preprod",
              "fuji",
              "local"
            ]
          },
          "config": {
            "type": "object",
            "description": "Ethereum staking plan config",
            "required": [
              "inventory_type"
            ],
            "properties": {
              "suggested_fee_recipient": {
                "type": "string",
                "description": "the suggested fee recipient address",
                "minimum": 1
              },
              "mev": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "ID of the MEV fee recipient. optional"
                  },
                  "enabled": {
                    "type": "boolean"
                  },
                  "relays": {
                    "type": "array",
                    "description": "List of Relay urls",
                    "items": {
                      "type": "string",
                      "format": "uri",
                      "description": "Relay url"
                    },
                    "minItems": 1
                  }
                }
              },
              "inventory_type": {
                "type": "string",
                "description": "Indicates if the quantity of validators for the staking plan is static or dynamic. Static is a once off deployment of a specified quantity of validators. Dynamic is where an initial quantity of validators is deployed with a threshold of available validators also configured. If the number of available validators within the validator inventory drops below the threshold (by being reserved as part of a stake intents API call) then the dynamic plan will automatically deploy the required infrastructure to bring the number of available validators above the threshold.",
                "enum": [
                  "static",
                  "dynamic"
                ]
              },
              "execution_client": {
                "type": "string",
                "description": "The execution client to use on the node",
                "enum": [
                  "geth",
                  "besu"
                ]
              }
            }
          },
          "validator_quantity": {
            "type": "integer",
            "description": "number of validators to create",
            "format": "uint64"
          },
          "plan_id": {
            "type": "string",
            "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
            "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
          }
        }
      },
      "CreateNodeResponse": {
        "type": "object",
        "description": "The response object for creating new node.",
        "required": [
          "xid"
        ],
        "properties": {
          "xid": {
            "type": "string",
            "description": "The node XID",
            "example": "c9slgu11eqli4rc7djlg"
          }
        }
      },
      "Custodian": {
        "type": "string",
        "description": "Custodian handle",
        "enum": [
          "metamask"
        ]
      },
      "Customer": {
        "type": "object",
        "description": "Customer's identity.",
        "required": [
          "customer_id",
          "org_id",
          "org_username",
          "org_user_username"
        ],
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          },
          "org_id": {
            "type": "string",
            "description": "Customer organization ID",
            "pattern": "^[0-9]+$",
            "minLength": 1
          },
          "org_username": {
            "type": "string",
            "description": "Customer organization username",
            "pattern": "^[A-Za-z0-9\\-\\_]+$",
            "minLength": 1
          },
          "org_user_username": {
            "type": "string",
            "description": "Customer organization user's username",
            "pattern": "^[A-Za-z0-9\\-\\_]+$",
            "minLength": 1
          },
          "customer_status": {
            "type": "string",
            "description": "the customer status",
            "pattern": "^[A-Za-z]+$",
            "minLength": 1
          }
        }
      },
      "CustomerId": {
        "type": "string",
        "description": "Unique identifier for a customer",
        "example": "SatoshiNakamoto-xUYJbPw9hw",
        "minimum": 1
      },
      "CustomerOrgId": {
        "type": "string",
        "description": "Customer organization ID",
        "pattern": "^[0-9]+$",
        "minLength": 1
      },
      "CustomerOrgUsername": {
        "type": "string",
        "description": "Customer organization username",
        "pattern": "^[A-Za-z0-9\\-\\_]+$",
        "minLength": 1
      },
      "CustomerOrgUserUsername": {
        "type": "string",
        "description": "Customer organization user's username",
        "pattern": "^[A-Za-z0-9\\-\\_]+$",
        "minLength": 1
      },
      "CustomerSharedPlan": {
        "type": "object",
        "description": "Customer's identity.",
        "required": [
          "customer_id"
        ],
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          }
        }
      },
      "CustomerSharedPlanEnable": {
        "type": "boolean",
        "description": "Enable or disable share"
      },
      "CustomerSharedPlanEnabled": {
        "type": "object",
        "description": "Customer's identity.",
        "required": [
          "customer_id",
          "enabled"
        ],
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          },
          "enabled": {
            "type": "boolean",
            "description": "Enable or disable share"
          }
        }
      },
      "CustomerStatus": {
        "type": "string",
        "description": "the customer status",
        "pattern": "^[A-Za-z]+$",
        "minLength": 1
      },
      "DeactivateIntent": {
        "type": "object",
        "description": "Result of the new Deactivate Intent request.",
        "required": [
          "deactivate_intent_id",
          "protocol",
          "network",
          "customer_id"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          },
          "network": {
            "type": "string",
            "description": "Protocol-specific network.",
            "enum": [
              "mainnet",
              "localnet",
              "goerli",
              "prater",
              "holesky",
              "testnet",
              "devnet",
              "kusama",
              "westend",
              "preprod",
              "fuji",
              "local"
            ]
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          },
          "deactivate_intent_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique idenifier for deactivate intent.",
            "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
          },
          "cardano": {
            "type": "object",
            "description": "Result of the new Deactivate Intent request.",
            "required": [
              "base_address",
              "unsigned_transaction"
            ],
            "properties": {
              "base_address": {
                "type": "string",
                "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
                "format": "bech32",
                "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
              },
              "unsigned_transaction": {
                "type": "string",
                "format": "base64",
                "description": "Generated unsigned transaction smart contract call data.",
                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
              }
            }
          },
          "polkadot": {
            "type": "object",
            "description": "Polkadot Deactivate Intent Response",
            "required": [
              "unsigned_transaction",
              "proxy_address",
              "amount",
              "deactivationType"
            ],
            "properties": {
              "unsigned_transaction": {
                "description": "Unsigned remove proxy transaction.\nOnce this transaction is signed, broadcasted to the network and included in the canonical history of the chain, the specified amount will be removed from the staked amount. If the amount is the entire stake, the proxy account of Blockdaemon will be unbound from the customer account.",
                "type": "string",
                "format": "base64",
                "example": "0xd00410020c0606060202286bee1602008c16e19e94328985d65cb7e3245213892730dd0e841f6511478cb12f23a178330100000000"
              },
              "customer_address": {
                "description": "Address of the customer account from which the proxy will be removed.",
                "type": "string",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              },
              "controller_address": {
                "description": "Address of the customer account from which the proxy will be removed.\nSame as customer_address. Deprecated - will be removed in a later version.",
                "type": "string",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              },
              "proxy_address": {
                "description": "Address of the proxy account that will be removed from the customer account.",
                "type": "string",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              },
              "amount": {
                "description": "Amount of DOT that will be unbond.",
                "type": "string",
                "pattern": "^[1-9]\\d+$",
                "example": "100"
              },
              "deactivationType": {
                "description": "Type of deactivation.\nThis can be either \"full\" or \"partial\". If \"full\" is specified, the entire stake will be removed from the proxy account. If \"partial\" is specified, the amount specified in the amount field will be removed from the proxy account.",
                "type": "string",
                "enum": [
                  "full",
                  "partial"
                ]
              }
            }
          },
          "solana": {
            "type": "object",
            "description": "Result of the new Deactivate Intent request.",
            "required": [
              "total_deactivated_amount",
              "deactivates",
              "splits"
            ],
            "properties": {
              "deactivates": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "Result of the deactivation transaction request",
                  "required": [
                    "unsigned_transaction",
                    "stake_account_authority",
                    "stake_account_address",
                    "withdrawal_authority",
                    "stake_id",
                    "amount",
                    "expiration_time"
                  ],
                  "properties": {
                    "unsigned_transaction": {
                      "type": "string",
                      "format": "base64",
                      "description": "Generated unsigned transaction smart contract call data.",
                      "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                    },
                    "stake_account_authority": {
                      "type": "string",
                      "description": "Public Key of an asymmetric key-pair.",
                      "format": "base58",
                      "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                      "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                    },
                    "stake_account_address": {
                      "type": "string",
                      "description": "Public Key of an asymmetric key-pair.",
                      "format": "base58",
                      "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                      "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                    },
                    "withdrawal_authority": {
                      "type": "string",
                      "description": "Public Key of an asymmetric key-pair.",
                      "format": "base58",
                      "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                      "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                    },
                    "stake_id": {
                      "description": "Unique stake identifier.",
                      "type": "string",
                      "format": "base58",
                      "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                    },
                    "amount": {
                      "type": "string",
                      "description": "Denomination of the cryptocurrency Solana.",
                      "pattern": "^[1-9]\\d+$",
                      "example": "100"
                    },
                    "expiration_time": {
                      "type": "integer",
                      "description": "Transaction expiration time",
                      "format": "int64",
                      "example": 1689939023
                    }
                  }
                }
              },
              "splits": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "Result of the split transaction request",
                  "required": [
                    "unsigned_transaction",
                    "stake_account_authority",
                    "new_stake_account_address",
                    "new_stake_id",
                    "splitted_stake_account_address",
                    "splitted_stake_id",
                    "amount"
                  ],
                  "properties": {
                    "unsigned_transaction": {
                      "type": "string",
                      "format": "base64",
                      "description": "Generated unsigned transaction smart contract call data.",
                      "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                    },
                    "stake_account_authority": {
                      "type": "string",
                      "description": "Public Key of an asymmetric key-pair.",
                      "format": "base58",
                      "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                      "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                    },
                    "new_stake_account_address": {
                      "type": "string",
                      "description": "Public Key of an asymmetric key-pair.",
                      "format": "base58",
                      "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                      "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                    },
                    "new_stake_id": {
                      "description": "Unique stake identifier.",
                      "type": "string",
                      "format": "base58",
                      "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                    },
                    "splitted_stake_account_address": {
                      "type": "string",
                      "description": "Public Key of an asymmetric key-pair.",
                      "format": "base58",
                      "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                      "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                    },
                    "splitted_stake_id": {
                      "description": "Unique stake identifier.",
                      "type": "string",
                      "format": "base58",
                      "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                    },
                    "amount": {
                      "type": "string",
                      "description": "Denomination of the cryptocurrency Solana.",
                      "pattern": "^[1-9]\\d+$",
                      "example": "100"
                    }
                  }
                }
              },
              "total_deactivated_amount": {
                "type": "string",
                "description": "Denomination of the cryptocurrency Solana.",
                "pattern": "^[1-9]\\d+$",
                "example": "100"
              }
            }
          },
          "polygon": {
            "type": "object",
            "description": "Polygon Deactivate Intent",
            "required": [
              "to",
              "unsigned_transaction",
              "amount",
              "wallet_address"
            ],
            "properties": {
              "to": {
                "type": "string",
                "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                "format": "hex",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
              },
              "unsigned_transaction": {
                "type": "string",
                "format": "base64",
                "description": "Generated unsigned transaction smart contract call data.",
                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
              },
              "amount": {
                "type": "string",
                "description": "Denomination of the cryptocurrency Polygon.",
                "pattern": "^[1-9]\\d+$",
                "example": "100"
              },
              "wallet_address": {
                "type": "string",
                "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                "format": "hex",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
              }
            }
          },
          "near": {
            "type": "object",
            "description": "NEAR Protocol Deactivate Intent",
            "required": [
              "to",
              "unsigned_transaction",
              "amount",
              "wallet_address",
              "public_key",
              "expiration_time"
            ],
            "properties": {
              "to": {
                "type": "string",
                "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                "example": "alice.near"
              },
              "unsigned_transaction": {
                "type": "string",
                "format": "base64",
                "description": "Generated unsigned transaction smart contract call data.",
                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
              },
              "amount": {
                "type": "string",
                "description": "Denomination of NEAR Protocol.",
                "pattern": "^[1-9]\\d+$",
                "example": "100000000000000000000000000"
              },
              "wallet_address": {
                "type": "string",
                "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                "example": "alice.near"
              },
              "public_key": {
                "type": "string",
                "description": "Base58 encoded public key prefixed by ed25519, associated with the private key that will be used to sign the transaction.",
                "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
                "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
              },
              "expiration_time": {
                "type": "integer",
                "description": "Transaction expiration time",
                "format": "int64",
                "example": 1689939023
              }
            }
          },
          "cosmos": {
            "type": "object",
            "description": "Cosmos Deactivate Intent",
            "required": [
              "unsigned_transaction",
              "delegator_address",
              "validator_address",
              "amount"
            ],
            "properties": {
              "unsigned_transaction": {
                "type": "string",
                "format": "base64",
                "description": "Generated unsigned transaction smart contract call data.",
                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
              },
              "delegator_address": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "bech32",
                "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
              },
              "validator_address": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "bech32",
                "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
              },
              "amount": {
                "type": "string",
                "description": "Denomination of the cryptocurrency Cosmos.",
                "pattern": "^[1-9]\\d+$",
                "example": "100"
              }
            }
          },
          "binance": {
            "type": "object",
            "description": "Binance Deactivate Intent",
            "required": [
              "unsigned_transaction",
              "delegator_address",
              "validator_address",
              "amount"
            ],
            "properties": {
              "unsigned_transaction": {
                "type": "string",
                "format": "base64",
                "description": "Generated unsigned transaction smart contract call data.",
                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
              },
              "delegator_address": {
                "type": "string",
                "description": "Binance beacon chain address.",
                "format": "bech32",
                "pattern": "^bnb[0-9a-z]+$",
                "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
              },
              "validator_address": {
                "type": "string",
                "description": "Binance beacon chain validator address.",
                "format": "bech32",
                "pattern": "^bva[0-9a-zA-Z]*$",
                "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
              },
              "amount": {
                "type": "string",
                "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
                "pattern": "^[1-9]\\d+$",
                "example": "10000000000"
              }
            }
          }
        }
      },
      "DeactivateIntentPolkadot": {
        "type": "object",
        "description": "Polkadot Deactivate Intent Response",
        "required": [
          "unsigned_transaction",
          "proxy_address",
          "amount",
          "deactivationType"
        ],
        "properties": {
          "unsigned_transaction": {
            "description": "Unsigned remove proxy transaction.\nOnce this transaction is signed, broadcasted to the network and included in the canonical history of the chain, the specified amount will be removed from the staked amount. If the amount is the entire stake, the proxy account of Blockdaemon will be unbound from the customer account.",
            "type": "string",
            "format": "base64",
            "example": "0xd00410020c0606060202286bee1602008c16e19e94328985d65cb7e3245213892730dd0e841f6511478cb12f23a178330100000000"
          },
          "customer_address": {
            "description": "Address of the customer account from which the proxy will be removed.",
            "type": "string",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "controller_address": {
            "description": "Address of the customer account from which the proxy will be removed.\nSame as customer_address. Deprecated - will be removed in a later version.",
            "type": "string",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "proxy_address": {
            "description": "Address of the proxy account that will be removed from the customer account.",
            "type": "string",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "amount": {
            "description": "Amount of DOT that will be unbond.",
            "type": "string",
            "pattern": "^[1-9]\\d+$",
            "example": "100"
          },
          "deactivationType": {
            "description": "Type of deactivation.\nThis can be either \"full\" or \"partial\". If \"full\" is specified, the entire stake will be removed from the proxy account. If \"partial\" is specified, the amount specified in the amount field will be removed from the proxy account.",
            "type": "string",
            "enum": [
              "full",
              "partial"
            ]
          }
        }
      },
      "DeactivateIntentPolygon": {
        "type": "object",
        "description": "Polygon Deactivate Intent",
        "required": [
          "to",
          "unsigned_transaction",
          "amount",
          "wallet_address"
        ],
        "properties": {
          "to": {
            "type": "string",
            "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
            "format": "hex",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
          },
          "unsigned_transaction": {
            "type": "string",
            "format": "base64",
            "description": "Generated unsigned transaction smart contract call data.",
            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
          },
          "amount": {
            "type": "string",
            "description": "Denomination of the cryptocurrency Polygon.",
            "pattern": "^[1-9]\\d+$",
            "example": "100"
          },
          "wallet_address": {
            "type": "string",
            "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
            "format": "hex",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
          }
        }
      },
      "DeactivateIntentSolana": {
        "type": "object",
        "description": "Result of the new Deactivate Intent request.",
        "required": [
          "total_deactivated_amount",
          "deactivates",
          "splits"
        ],
        "properties": {
          "deactivates": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Result of the deactivation transaction request",
              "required": [
                "unsigned_transaction",
                "stake_account_authority",
                "stake_account_address",
                "withdrawal_authority",
                "stake_id",
                "amount",
                "expiration_time"
              ],
              "properties": {
                "unsigned_transaction": {
                  "type": "string",
                  "format": "base64",
                  "description": "Generated unsigned transaction smart contract call data.",
                  "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                },
                "stake_account_authority": {
                  "type": "string",
                  "description": "Public Key of an asymmetric key-pair.",
                  "format": "base58",
                  "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                  "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                },
                "stake_account_address": {
                  "type": "string",
                  "description": "Public Key of an asymmetric key-pair.",
                  "format": "base58",
                  "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                  "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                },
                "withdrawal_authority": {
                  "type": "string",
                  "description": "Public Key of an asymmetric key-pair.",
                  "format": "base58",
                  "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                  "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                },
                "stake_id": {
                  "description": "Unique stake identifier.",
                  "type": "string",
                  "format": "base58",
                  "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                },
                "amount": {
                  "type": "string",
                  "description": "Denomination of the cryptocurrency Solana.",
                  "pattern": "^[1-9]\\d+$",
                  "example": "100"
                },
                "expiration_time": {
                  "type": "integer",
                  "description": "Transaction expiration time",
                  "format": "int64",
                  "example": 1689939023
                }
              }
            }
          },
          "splits": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Result of the split transaction request",
              "required": [
                "unsigned_transaction",
                "stake_account_authority",
                "new_stake_account_address",
                "new_stake_id",
                "splitted_stake_account_address",
                "splitted_stake_id",
                "amount"
              ],
              "properties": {
                "unsigned_transaction": {
                  "type": "string",
                  "format": "base64",
                  "description": "Generated unsigned transaction smart contract call data.",
                  "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                },
                "stake_account_authority": {
                  "type": "string",
                  "description": "Public Key of an asymmetric key-pair.",
                  "format": "base58",
                  "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                  "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                },
                "new_stake_account_address": {
                  "type": "string",
                  "description": "Public Key of an asymmetric key-pair.",
                  "format": "base58",
                  "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                  "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                },
                "new_stake_id": {
                  "description": "Unique stake identifier.",
                  "type": "string",
                  "format": "base58",
                  "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                },
                "splitted_stake_account_address": {
                  "type": "string",
                  "description": "Public Key of an asymmetric key-pair.",
                  "format": "base58",
                  "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                  "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                },
                "splitted_stake_id": {
                  "description": "Unique stake identifier.",
                  "type": "string",
                  "format": "base58",
                  "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                },
                "amount": {
                  "type": "string",
                  "description": "Denomination of the cryptocurrency Solana.",
                  "pattern": "^[1-9]\\d+$",
                  "example": "100"
                }
              }
            }
          },
          "total_deactivated_amount": {
            "type": "string",
            "description": "Denomination of the cryptocurrency Solana.",
            "pattern": "^[1-9]\\d+$",
            "example": "100"
          }
        }
      },
      "DeactivateIntentCardano": {
        "type": "object",
        "description": "Result of the new Deactivate Intent request.",
        "required": [
          "base_address",
          "unsigned_transaction"
        ],
        "properties": {
          "base_address": {
            "type": "string",
            "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
            "format": "bech32",
            "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
          },
          "unsigned_transaction": {
            "type": "string",
            "format": "base64",
            "description": "Generated unsigned transaction smart contract call data.",
            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
          }
        }
      },
      "CardanoRewardsWithdrawIntent": {
        "type": "object",
        "required": [
          "base_address",
          "rewards_amount",
          "unsigned_transaction"
        ],
        "properties": {
          "base_address": {
            "type": "string",
            "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
            "format": "bech32",
            "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
          },
          "rewards_amount": {
            "type": "string",
            "description": "Denomination of the cryptocurrency Cardano.",
            "pattern": "^[1-9]\\d+$",
            "example": "100"
          },
          "unsigned_transaction": {
            "type": "string",
            "format": "base64",
            "description": "Generated unsigned transaction smart contract call data.",
            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
          }
        }
      },
      "DeactivateStake": {
        "type": "object",
        "description": "Result of the a new deactivation transaction request.",
        "required": [
          "protocol",
          "network"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          },
          "network": {
            "type": "string",
            "description": "Protocol-specific network.",
            "enum": [
              "mainnet",
              "localnet",
              "goerli",
              "prater",
              "holesky",
              "testnet",
              "devnet",
              "kusama",
              "westend",
              "preprod",
              "fuji",
              "local"
            ]
          },
          "solana": {
            "type": "object",
            "description": "Result of the deactivation transaction request",
            "required": [
              "unsigned_transaction",
              "stake_account_authority",
              "stake_account_address",
              "withdrawal_authority",
              "stake_id",
              "amount",
              "expiration_time"
            ],
            "properties": {
              "unsigned_transaction": {
                "type": "string",
                "format": "base64",
                "description": "Generated unsigned transaction smart contract call data.",
                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
              },
              "stake_account_authority": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              },
              "stake_account_address": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              },
              "withdrawal_authority": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              },
              "stake_id": {
                "description": "Unique stake identifier.",
                "type": "string",
                "format": "base58",
                "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
              },
              "amount": {
                "type": "string",
                "description": "Denomination of the cryptocurrency Solana.",
                "pattern": "^[1-9]\\d+$",
                "example": "100"
              },
              "expiration_time": {
                "type": "integer",
                "description": "Transaction expiration time",
                "format": "int64",
                "example": 1689939023
              }
            }
          }
        }
      },
      "DeactivateStakeSolana": {
        "type": "object",
        "description": "Result of the deactivation transaction request",
        "required": [
          "unsigned_transaction",
          "stake_account_authority",
          "stake_account_address",
          "withdrawal_authority",
          "stake_id",
          "amount",
          "expiration_time"
        ],
        "properties": {
          "unsigned_transaction": {
            "type": "string",
            "format": "base64",
            "description": "Generated unsigned transaction smart contract call data.",
            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
          },
          "stake_account_authority": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "stake_account_address": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "withdrawal_authority": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "stake_id": {
            "description": "Unique stake identifier.",
            "type": "string",
            "format": "base58",
            "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
          },
          "amount": {
            "type": "string",
            "description": "Denomination of the cryptocurrency Solana.",
            "pattern": "^[1-9]\\d+$",
            "example": "100"
          },
          "expiration_time": {
            "type": "integer",
            "description": "Transaction expiration time",
            "format": "int64",
            "example": 1689939023
          }
        }
      },
      "DeactivationIntents": {
        "type": "object",
        "description": "Deactivation intents",
        "required": [
          "protocol",
          "network",
          "customer_id"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          },
          "network": {
            "type": "string",
            "description": "Protocol-specific network.",
            "enum": [
              "mainnet",
              "localnet",
              "goerli",
              "prater",
              "holesky",
              "testnet",
              "devnet",
              "kusama",
              "westend",
              "preprod",
              "fuji",
              "local"
            ]
          },
          "polygon": {
            "type": "object",
            "required": [
              "items",
              "wallet_address"
            ],
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "Unbond information",
                  "required": [
                    "nonce",
                    "amount",
                    "withdraw_epoch"
                  ],
                  "properties": {
                    "nonce": {
                      "type": "integer",
                      "description": "Number for one use only",
                      "example": 1
                    },
                    "amount": {
                      "type": "string",
                      "description": "Denomination of the cryptocurrency Polygon.",
                      "pattern": "^[1-9]\\d+$",
                      "example": "100"
                    },
                    "withdraw_epoch": {
                      "type": "integer"
                    }
                  }
                }
              },
              "wallet_address": {
                "type": "string",
                "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                "format": "hex",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
              }
            }
          },
          "solana": {
            "description": "List of deactivation intents",
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "deactivate_intent_id",
                    "customer_id"
                  ],
                  "properties": {
                    "deactivate_intent_id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Unique idenifier for deactivate intent.",
                      "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "Unique identifier for a customer",
                      "example": "SatoshiNakamoto-xUYJbPw9hw",
                      "minimum": 1
                    }
                  }
                },
                {
                  "type": "object",
                  "description": "Response to a new deactivation intent request.",
                  "required": [
                    "network",
                    "protocol",
                    "solana"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Solana protocol",
                      "enum": [
                        "solana"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "Solana network",
                      "enum": [
                        "mainnet",
                        "testnet"
                      ]
                    },
                    "solana": {
                      "type": "object",
                      "description": "Result of the new Deactivate Intent request.",
                      "required": [
                        "total_deactivated_amount",
                        "deactivates",
                        "splits"
                      ],
                      "properties": {
                        "deactivates": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "description": "Result of the deactivation transaction request",
                            "required": [
                              "unsigned_transaction",
                              "stake_account_authority",
                              "stake_account_address",
                              "withdrawal_authority",
                              "stake_id",
                              "amount",
                              "expiration_time"
                            ],
                            "properties": {
                              "unsigned_transaction": {
                                "type": "string",
                                "format": "base64",
                                "description": "Generated unsigned transaction smart contract call data.",
                                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                              },
                              "stake_account_authority": {
                                "type": "string",
                                "description": "Public Key of an asymmetric key-pair.",
                                "format": "base58",
                                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                              },
                              "stake_account_address": {
                                "type": "string",
                                "description": "Public Key of an asymmetric key-pair.",
                                "format": "base58",
                                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                              },
                              "withdrawal_authority": {
                                "type": "string",
                                "description": "Public Key of an asymmetric key-pair.",
                                "format": "base58",
                                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                              },
                              "stake_id": {
                                "description": "Unique stake identifier.",
                                "type": "string",
                                "format": "base58",
                                "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                              },
                              "amount": {
                                "type": "string",
                                "description": "Denomination of the cryptocurrency Solana.",
                                "pattern": "^[1-9]\\d+$",
                                "example": "100"
                              },
                              "expiration_time": {
                                "type": "integer",
                                "description": "Transaction expiration time",
                                "format": "int64",
                                "example": 1689939023
                              }
                            }
                          }
                        },
                        "splits": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "description": "Result of the split transaction request",
                            "required": [
                              "unsigned_transaction",
                              "stake_account_authority",
                              "new_stake_account_address",
                              "new_stake_id",
                              "splitted_stake_account_address",
                              "splitted_stake_id",
                              "amount"
                            ],
                            "properties": {
                              "unsigned_transaction": {
                                "type": "string",
                                "format": "base64",
                                "description": "Generated unsigned transaction smart contract call data.",
                                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                              },
                              "stake_account_authority": {
                                "type": "string",
                                "description": "Public Key of an asymmetric key-pair.",
                                "format": "base58",
                                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                              },
                              "new_stake_account_address": {
                                "type": "string",
                                "description": "Public Key of an asymmetric key-pair.",
                                "format": "base58",
                                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                              },
                              "new_stake_id": {
                                "description": "Unique stake identifier.",
                                "type": "string",
                                "format": "base58",
                                "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                              },
                              "splitted_stake_account_address": {
                                "type": "string",
                                "description": "Public Key of an asymmetric key-pair.",
                                "format": "base58",
                                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                              },
                              "splitted_stake_id": {
                                "description": "Unique stake identifier.",
                                "type": "string",
                                "format": "base58",
                                "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                              },
                              "amount": {
                                "type": "string",
                                "description": "Denomination of the cryptocurrency Solana.",
                                "pattern": "^[1-9]\\d+$",
                                "example": "100"
                              }
                            }
                          }
                        },
                        "total_deactivated_amount": {
                          "type": "string",
                          "description": "Denomination of the cryptocurrency Solana.",
                          "pattern": "^[1-9]\\d+$",
                          "example": "100"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "near": {
            "type": "array",
            "description": "List of deactivation intents",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "deactivate_intent_id",
                    "customer_id"
                  ],
                  "properties": {
                    "deactivate_intent_id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Unique idenifier for deactivate intent.",
                      "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "Unique identifier for a customer",
                      "example": "SatoshiNakamoto-xUYJbPw9hw",
                      "minimum": 1
                    }
                  }
                },
                {
                  "type": "object",
                  "description": "Response to a new deactivation intent request.",
                  "required": [
                    "protocol",
                    "network",
                    "near"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Near protocol",
                      "enum": [
                        "near"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "NEAR network",
                      "enum": [
                        "mainnet",
                        "testnet",
                        "localnet"
                      ]
                    },
                    "near": {
                      "type": "object",
                      "description": "NEAR Protocol Deactivate Intent",
                      "required": [
                        "to",
                        "unsigned_transaction",
                        "amount",
                        "wallet_address",
                        "public_key",
                        "expiration_time"
                      ],
                      "properties": {
                        "to": {
                          "type": "string",
                          "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                          "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                          "example": "alice.near"
                        },
                        "unsigned_transaction": {
                          "type": "string",
                          "format": "base64",
                          "description": "Generated unsigned transaction smart contract call data.",
                          "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                        },
                        "amount": {
                          "type": "string",
                          "description": "Denomination of NEAR Protocol.",
                          "pattern": "^[1-9]\\d+$",
                          "example": "100000000000000000000000000"
                        },
                        "wallet_address": {
                          "type": "string",
                          "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                          "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                          "example": "alice.near"
                        },
                        "public_key": {
                          "type": "string",
                          "description": "Base58 encoded public key prefixed by ed25519, associated with the private key that will be used to sign the transaction.",
                          "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
                          "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
                        },
                        "expiration_time": {
                          "type": "integer",
                          "description": "Transaction expiration time",
                          "format": "int64",
                          "example": 1689939023
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "cardano": {
            "type": "array",
            "description": "List of deactivation intents",
            "items": {
              "type": "object",
              "description": "Cardano Protocol Deactivate Intent",
              "required": [
                "deactivate_intent_id",
                "base_address",
                "unsigned_transaction"
              ],
              "properties": {
                "deactivate_intent_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique idenifier for deactivate intent.",
                  "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                },
                "base_address": {
                  "type": "string",
                  "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
                  "format": "bech32",
                  "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
                },
                "unsigned_transaction": {
                  "type": "string",
                  "format": "base64",
                  "description": "Generated unsigned transaction smart contract call data.",
                  "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                }
              }
            }
          },
          "cosmos": {
            "type": "array",
            "description": "List of deactivation intents",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "deactivate_intent_id",
                    "customer_id"
                  ],
                  "properties": {
                    "deactivate_intent_id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Unique idenifier for deactivate intent.",
                      "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "Unique identifier for a customer",
                      "example": "SatoshiNakamoto-xUYJbPw9hw",
                      "minimum": 1
                    }
                  }
                },
                {
                  "type": "object",
                  "description": "Response to a new deactivation intent request.",
                  "required": [
                    "protocol",
                    "network",
                    "cosmos"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Cosmos protocol",
                      "enum": [
                        "cosmos"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "Cosmos network",
                      "enum": [
                        "mainnet",
                        "testnet"
                      ]
                    },
                    "cosmos": {
                      "type": "object",
                      "description": "Cosmos Deactivate Intent",
                      "required": [
                        "unsigned_transaction",
                        "delegator_address",
                        "validator_address",
                        "amount"
                      ],
                      "properties": {
                        "unsigned_transaction": {
                          "type": "string",
                          "format": "base64",
                          "description": "Generated unsigned transaction smart contract call data.",
                          "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                        },
                        "delegator_address": {
                          "type": "string",
                          "description": "Public Key of an asymmetric key-pair.",
                          "format": "bech32",
                          "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                          "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                        },
                        "validator_address": {
                          "type": "string",
                          "description": "Public Key of an asymmetric key-pair.",
                          "format": "bech32",
                          "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                          "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                        },
                        "amount": {
                          "type": "string",
                          "description": "Denomination of the cryptocurrency Cosmos.",
                          "pattern": "^[1-9]\\d+$",
                          "example": "100"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "binance": {
            "type": "array",
            "description": "List of deactivation intents",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "deactivate_intent_id",
                    "customer_id"
                  ],
                  "properties": {
                    "deactivate_intent_id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Unique idenifier for deactivate intent.",
                      "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "Unique identifier for a customer",
                      "example": "SatoshiNakamoto-xUYJbPw9hw",
                      "minimum": 1
                    }
                  }
                },
                {
                  "type": "object",
                  "description": "Response to a new deactivation intent request.",
                  "required": [
                    "protocol",
                    "network",
                    "binance"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Binance beacon chain protocol",
                      "enum": [
                        "binance"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "Binance beacon chain network",
                      "enum": [
                        "mainnet",
                        "testnet"
                      ]
                    },
                    "binance": {
                      "type": "object",
                      "description": "Binance Deactivate Intent",
                      "required": [
                        "unsigned_transaction",
                        "delegator_address",
                        "validator_address",
                        "amount"
                      ],
                      "properties": {
                        "unsigned_transaction": {
                          "type": "string",
                          "format": "base64",
                          "description": "Generated unsigned transaction smart contract call data.",
                          "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                        },
                        "delegator_address": {
                          "type": "string",
                          "description": "Binance beacon chain address.",
                          "format": "bech32",
                          "pattern": "^bnb[0-9a-z]+$",
                          "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
                        },
                        "validator_address": {
                          "type": "string",
                          "description": "Binance beacon chain validator address.",
                          "format": "bech32",
                          "pattern": "^bva[0-9a-zA-Z]*$",
                          "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                        },
                        "amount": {
                          "type": "string",
                          "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
                          "pattern": "^[1-9]\\d+$",
                          "example": "10000000000"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          }
        }
      },
      "DeactivationIntentsPolygon": {
        "type": "object",
        "required": [
          "items",
          "wallet_address"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Unbond information",
              "required": [
                "nonce",
                "amount",
                "withdraw_epoch"
              ],
              "properties": {
                "nonce": {
                  "type": "integer",
                  "description": "Number for one use only",
                  "example": 1
                },
                "amount": {
                  "type": "string",
                  "description": "Denomination of the cryptocurrency Polygon.",
                  "pattern": "^[1-9]\\d+$",
                  "example": "100"
                },
                "withdraw_epoch": {
                  "type": "integer"
                }
              }
            }
          },
          "wallet_address": {
            "type": "string",
            "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
            "format": "hex",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
          }
        }
      },
      "DeactivationIntentsSolana": {
        "description": "List of deactivation intents",
        "type": "array",
        "items": {
          "allOf": [
            {
              "type": "object",
              "required": [
                "deactivate_intent_id",
                "customer_id"
              ],
              "properties": {
                "deactivate_intent_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique idenifier for deactivate intent.",
                  "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                },
                "customer_id": {
                  "type": "string",
                  "description": "Unique identifier for a customer",
                  "example": "SatoshiNakamoto-xUYJbPw9hw",
                  "minimum": 1
                }
              }
            },
            {
              "type": "object",
              "description": "Response to a new deactivation intent request.",
              "required": [
                "network",
                "protocol",
                "solana"
              ],
              "properties": {
                "protocol": {
                  "type": "string",
                  "description": "Solana protocol",
                  "enum": [
                    "solana"
                  ]
                },
                "network": {
                  "type": "string",
                  "description": "Solana network",
                  "enum": [
                    "mainnet",
                    "testnet"
                  ]
                },
                "solana": {
                  "type": "object",
                  "description": "Result of the new Deactivate Intent request.",
                  "required": [
                    "total_deactivated_amount",
                    "deactivates",
                    "splits"
                  ],
                  "properties": {
                    "deactivates": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Result of the deactivation transaction request",
                        "required": [
                          "unsigned_transaction",
                          "stake_account_authority",
                          "stake_account_address",
                          "withdrawal_authority",
                          "stake_id",
                          "amount",
                          "expiration_time"
                        ],
                        "properties": {
                          "unsigned_transaction": {
                            "type": "string",
                            "format": "base64",
                            "description": "Generated unsigned transaction smart contract call data.",
                            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                          },
                          "stake_account_authority": {
                            "type": "string",
                            "description": "Public Key of an asymmetric key-pair.",
                            "format": "base58",
                            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                          },
                          "stake_account_address": {
                            "type": "string",
                            "description": "Public Key of an asymmetric key-pair.",
                            "format": "base58",
                            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                          },
                          "withdrawal_authority": {
                            "type": "string",
                            "description": "Public Key of an asymmetric key-pair.",
                            "format": "base58",
                            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                          },
                          "stake_id": {
                            "description": "Unique stake identifier.",
                            "type": "string",
                            "format": "base58",
                            "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                          },
                          "amount": {
                            "type": "string",
                            "description": "Denomination of the cryptocurrency Solana.",
                            "pattern": "^[1-9]\\d+$",
                            "example": "100"
                          },
                          "expiration_time": {
                            "type": "integer",
                            "description": "Transaction expiration time",
                            "format": "int64",
                            "example": 1689939023
                          }
                        }
                      }
                    },
                    "splits": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Result of the split transaction request",
                        "required": [
                          "unsigned_transaction",
                          "stake_account_authority",
                          "new_stake_account_address",
                          "new_stake_id",
                          "splitted_stake_account_address",
                          "splitted_stake_id",
                          "amount"
                        ],
                        "properties": {
                          "unsigned_transaction": {
                            "type": "string",
                            "format": "base64",
                            "description": "Generated unsigned transaction smart contract call data.",
                            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                          },
                          "stake_account_authority": {
                            "type": "string",
                            "description": "Public Key of an asymmetric key-pair.",
                            "format": "base58",
                            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                          },
                          "new_stake_account_address": {
                            "type": "string",
                            "description": "Public Key of an asymmetric key-pair.",
                            "format": "base58",
                            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                          },
                          "new_stake_id": {
                            "description": "Unique stake identifier.",
                            "type": "string",
                            "format": "base58",
                            "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                          },
                          "splitted_stake_account_address": {
                            "type": "string",
                            "description": "Public Key of an asymmetric key-pair.",
                            "format": "base58",
                            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                          },
                          "splitted_stake_id": {
                            "description": "Unique stake identifier.",
                            "type": "string",
                            "format": "base58",
                            "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                          },
                          "amount": {
                            "type": "string",
                            "description": "Denomination of the cryptocurrency Solana.",
                            "pattern": "^[1-9]\\d+$",
                            "example": "100"
                          }
                        }
                      }
                    },
                    "total_deactivated_amount": {
                      "type": "string",
                      "description": "Denomination of the cryptocurrency Solana.",
                      "pattern": "^[1-9]\\d+$",
                      "example": "100"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "SolanaStakeAccountStatus": {
        "type": "string",
        "description": "Solana stake account internal status based on the transaction intents that have been created against the stake accounts.",
        "enum": [
          "pending",
          "active",
          "activating",
          "deactivated",
          "deactivating",
          "withdrawing",
          "withdrawn"
        ]
      },
      "SolanaStakeAccount": {
        "type": "object",
        "description": "Stake account",
        "required": [
          "status",
          "amount",
          "stake_account_address",
          "stake_account_authority",
          "withdrawal_authority",
          "delegator_address",
          "vote_account",
          "network"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Solana stake account internal status based on the transaction intents that have been created against the stake accounts.",
            "enum": [
              "pending",
              "active",
              "activating",
              "deactivated",
              "deactivating",
              "withdrawing",
              "withdrawn"
            ]
          },
          "amount": {
            "type": "string",
            "description": "Denomination of the cryptocurrency Solana.",
            "pattern": "^[1-9]\\d+$",
            "example": "100"
          },
          "stake_account_address": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "stake_account_authority": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "withdrawal_authority": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "delegator_address": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "vote_account": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "network": {
            "type": "string",
            "description": "Solana network",
            "enum": [
              "mainnet",
              "testnet"
            ]
          }
        }
      },
      "SolanaStakeAccounts": {
        "type": "object",
        "required": [
          "stake_accounts",
          "pagination"
        ],
        "properties": {
          "stake_accounts": {
            "type": "array",
            "description": "List of stake accounts",
            "items": {
              "type": "object",
              "description": "Stake account",
              "required": [
                "status",
                "amount",
                "stake_account_address",
                "stake_account_authority",
                "withdrawal_authority",
                "delegator_address",
                "vote_account",
                "network"
              ],
              "properties": {
                "status": {
                  "type": "string",
                  "description": "Solana stake account internal status based on the transaction intents that have been created against the stake accounts.",
                  "enum": [
                    "pending",
                    "active",
                    "activating",
                    "deactivated",
                    "deactivating",
                    "withdrawing",
                    "withdrawn"
                  ]
                },
                "amount": {
                  "type": "string",
                  "description": "Denomination of the cryptocurrency Solana.",
                  "pattern": "^[1-9]\\d+$",
                  "example": "100"
                },
                "stake_account_address": {
                  "type": "string",
                  "description": "Public Key of an asymmetric key-pair.",
                  "format": "base58",
                  "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                  "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                },
                "stake_account_authority": {
                  "type": "string",
                  "description": "Public Key of an asymmetric key-pair.",
                  "format": "base58",
                  "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                  "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                },
                "withdrawal_authority": {
                  "type": "string",
                  "description": "Public Key of an asymmetric key-pair.",
                  "format": "base58",
                  "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                  "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                },
                "delegator_address": {
                  "type": "string",
                  "description": "Public Key of an asymmetric key-pair.",
                  "format": "base58",
                  "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                  "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                },
                "vote_account": {
                  "type": "string",
                  "description": "Public Key of an asymmetric key-pair.",
                  "format": "base58",
                  "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                  "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                },
                "network": {
                  "type": "string",
                  "description": "Solana network",
                  "enum": [
                    "mainnet",
                    "testnet"
                  ]
                }
              }
            }
          },
          "pagination": {
            "type": "object",
            "description": "encapsulates pagination properties",
            "required": [
              "page",
              "per_page",
              "total"
            ],
            "properties": {
              "page": {
                "description": "current page number",
                "type": "integer",
                "format": "int64"
              },
              "per_page": {
                "description": "number of results per page",
                "type": "integer",
                "format": "int64"
              },
              "total": {
                "description": "total number of results",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        }
      },
      "Details": {
        "type": "object",
        "properties": {
          "fees": {
            "type": "number",
            "minimum": 0,
            "maximum": 100,
            "format": "float",
            "description": "Rate (%) charged based on a percentage of staking rewards",
            "example": 3.5
          },
          "tvl": {
            "type": "number",
            "minimum": 0,
            "format": "double",
            "description": "Sum of validators' balances.  Includes initial deposit (32ETH) + rewards.",
            "example": 7060624149.296207
          },
          "feeTiers": {
            "type": "array",
            "items": {
              "type": "number",
              "minimum": 0,
              "maximum": 100
            },
            "minItems": 5,
            "maxItems": 5,
            "description": "The tiers of operator fee rate (%), charged based on a percentage of staking rewards. The rewards of each validator a MMI user has with you get taxed depending on their **total staking position with you**: <ul>\n  <li>Tier `1`: Less than `5000 ETH`</li>\n  <li>Tier `2`: Greater than or equal to `5000 ETH` and less than `15000 ETH`</li>\n  <li>Tier `3`: Greater than or equal to `15000 ETH` and less than `30000 ETH`</li>\n  <li>Tier `4`: Greater than or equal to `30000 ETH` and less than `60000 ETH`</li>\n  <li>Tier `5`: Greater than `60000 ETH`</li>\n</ul> Each validator \"locks in\" the five tiers that the Connector was returning at the time of staking, for the whole validator lifetime.",
            "example": [
              7,
              5,
              4,
              3,
              2
            ]
          }
        }
      },
      "Dot": {
        "type": "string",
        "description": "Denomination of the cryptocurrency Polkadot.",
        "pattern": "^[1-9]\\d+$",
        "example": "100"
      },
      "Epochs": {
        "type": "object",
        "description": "Validator bonding / unbonding estimates in epochs",
        "required": [
          "current",
          "min"
        ],
        "properties": {
          "min": {
            "type": "integer",
            "format": "int64",
            "description": "estimated minimum epochs for validator bonding / unbonding to occur"
          },
          "max": {
            "type": "integer",
            "format": "int64",
            "description": "estimated maximum epochs for validator bonding / unbonding to occur"
          },
          "current": {
            "type": "integer",
            "format": "int64",
            "description": "current epoch where max / min epochs were calculated"
          }
        }
      },
      "Error": {
        "type": "object",
        "description": "Error response envelope",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "description": "Error code",
            "example": 500
          },
          "message": {
            "type": "string",
            "description": "Error Message",
            "example": "A descriptive error message"
          }
        }
      },
      "GetDetails": {
        "type": "object",
        "required": [
          "details"
        ],
        "properties": {
          "details": {
            "type": "object",
            "properties": {
              "fees": {
                "type": "number",
                "minimum": 0,
                "maximum": 100,
                "format": "float",
                "description": "Rate (%) charged based on a percentage of staking rewards",
                "example": 3.5
              },
              "tvl": {
                "type": "number",
                "minimum": 0,
                "format": "double",
                "description": "Sum of validators' balances.  Includes initial deposit (32ETH) + rewards.",
                "example": 7060624149.296207
              },
              "feeTiers": {
                "type": "array",
                "items": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 100
                },
                "minItems": 5,
                "maxItems": 5,
                "description": "The tiers of operator fee rate (%), charged based on a percentage of staking rewards. The rewards of each validator a MMI user has with you get taxed depending on their **total staking position with you**: <ul>\n  <li>Tier `1`: Less than `5000 ETH`</li>\n  <li>Tier `2`: Greater than or equal to `5000 ETH` and less than `15000 ETH`</li>\n  <li>Tier `3`: Greater than or equal to `15000 ETH` and less than `30000 ETH`</li>\n  <li>Tier `4`: Greater than or equal to `30000 ETH` and less than `60000 ETH`</li>\n  <li>Tier `5`: Greater than `60000 ETH`</li>\n</ul> Each validator \"locks in\" the five tiers that the Connector was returning at the time of staking, for the whole validator lifetime.",
                "example": [
                  7,
                  5,
                  4,
                  3,
                  2
                ]
              }
            }
          }
        }
      },
      "InsufficientFundsError": {
        "type": "object",
        "description": "Error response envelope",
        "required": [
          "code",
          "message",
          "requested_amount",
          "max_amount"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "description": "Error code"
          },
          "message": {
            "type": "string",
            "description": "Error Message"
          },
          "requested_amount": {
            "type": "string",
            "pattern": "^[1-9]\\d+$",
            "example": "123456",
            "description": "The amount requested by the user"
          },
          "max_amount": {
            "type": "string",
            "pattern": "^[1-9]\\d+$",
            "example": "123456",
            "description": "The maximum amount that can be used"
          }
        }
      },
      "EthereumAddress": {
        "type": "string",
        "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
        "format": "hex",
        "pattern": "^0x[a-fA-F0-9]{40}$",
        "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
      },
      "EthereumLaunchpadDeposit": {
        "description": "An array of data that should be submitted to launchpad.ethereum.org to register the validators it describes.",
        "type": "array",
        "items": {
          "type": "object",
          "description": "Data about a validator that can be registered at launchpad.ethereum.org",
          "required": [
            "pubkey",
            "withdrawal_credentials",
            "amount",
            "signature",
            "deposit_message_root",
            "deposit_data_root",
            "fork_version",
            "network_name",
            "deposit_cli_version"
          ],
          "properties": {
            "pubkey": {
              "type": "string",
              "description": "Validator public key, 96 hex digits, no `0x` prefix"
            },
            "withdrawal_credentials": {
              "type": "string",
              "description": "Validator withdrawal credentials, 64 hex digits, no `0x` prefix"
            },
            "amount": {
              "type": "integer",
              "format": "uint64",
              "description": "Amount of ether that this validator has staked"
            },
            "signature": {
              "type": "string",
              "description": "Signed validator domain root, hex digits, no `0x` prefix"
            },
            "deposit_message_root": {
              "type": "string",
              "description": "Merkle root for the deposit message, 32 hex digits, no `0x` prefix"
            },
            "deposit_data_root": {
              "type": "string",
              "description": "Merkle root for the deposit data, 32 hex digits, no `0x` prefix"
            },
            "fork_version": {
              "type": "string",
              "description": "Network fork version, 8 hex digits, no `0x` prefix"
            },
            "network_name": {
              "type": "string",
              "description": "Name for the deposit network (mainnet, holesky...), lowercase"
            },
            "deposit_cli_version": {
              "type": "string",
              "description": "String form of 3-number generator version, eg. `2.3.0`"
            }
          }
        },
        "format": "json"
      },
      "EthereumLaunchpadDepositEntry": {
        "type": "object",
        "description": "Data about a validator that can be registered at launchpad.ethereum.org",
        "required": [
          "pubkey",
          "withdrawal_credentials",
          "amount",
          "signature",
          "deposit_message_root",
          "deposit_data_root",
          "fork_version",
          "network_name",
          "deposit_cli_version"
        ],
        "properties": {
          "pubkey": {
            "type": "string",
            "description": "Validator public key, 96 hex digits, no `0x` prefix"
          },
          "withdrawal_credentials": {
            "type": "string",
            "description": "Validator withdrawal credentials, 64 hex digits, no `0x` prefix"
          },
          "amount": {
            "type": "integer",
            "format": "uint64",
            "description": "Amount of ether that this validator has staked"
          },
          "signature": {
            "type": "string",
            "description": "Signed validator domain root, hex digits, no `0x` prefix"
          },
          "deposit_message_root": {
            "type": "string",
            "description": "Merkle root for the deposit message, 32 hex digits, no `0x` prefix"
          },
          "deposit_data_root": {
            "type": "string",
            "description": "Merkle root for the deposit data, 32 hex digits, no `0x` prefix"
          },
          "fork_version": {
            "type": "string",
            "description": "Network fork version, 8 hex digits, no `0x` prefix"
          },
          "network_name": {
            "type": "string",
            "description": "Name for the deposit network (mainnet, holesky...), lowercase"
          },
          "deposit_cli_version": {
            "type": "string",
            "description": "String form of 3-number generator version, eg. `2.3.0`"
          }
        }
      },
      "EthereumNetwork": {
        "type": "string",
        "description": "Ethereum network",
        "enum": [
          "mainnet",
          "holesky"
        ]
      },
      "EthereumQueuesProgress": {
        "type": "object",
        "required": [
          "validators",
          "last_updated"
        ],
        "properties": {
          "last_updated": {
            "type": "string",
            "description": "Time validator state was recorded",
            "example": "2024-04-15 08:23:00"
          },
          "validators": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Ethereum validator queue progress validator",
              "required": [
                "public_key",
                "epochs_remaining"
              ],
              "properties": {
                "public_key": {
                  "type": "string",
                  "description": "Public Key of an asymmetric key-pair.",
                  "format": "hex",
                  "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                },
                "epochs_remaining": {
                  "description": "the number of epochs remaining in the current queue",
                  "type": "integer",
                  "format": "int64",
                  "example": 280312
                }
              }
            }
          }
        }
      },
      "ValidatorQueueProgress": {
        "type": "object",
        "description": "Ethereum validator queue progress validator",
        "required": [
          "public_key",
          "epochs_remaining"
        ],
        "properties": {
          "public_key": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "hex",
            "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
          },
          "epochs_remaining": {
            "description": "the number of epochs remaining in the current queue",
            "type": "integer",
            "format": "int64",
            "example": 280312
          }
        }
      },
      "EthereumQueuesProgressRequest": {
        "type": "object",
        "description": "List of Ethereum validator ids.",
        "required": [
          "public_keys"
        ],
        "properties": {
          "public_keys": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Public Key of an asymmetric key-pair.",
              "format": "hex",
              "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
            }
          }
        }
      },
      "EthereumWithdrawalCredentials": {
        "type": "string",
        "format": "hex",
        "pattern": "^0x0(0|1)[a-fA-F0-9]{62}$",
        "example": "0x0092c20062cee70389f1cb4fa566a2be5e2319ff43965db26dbaa3ce90b9df99",
        "description": "Hexadecimal encoded [withdrawal credentials](https://github.com/ethereum/consensus-specs/blob/master/specs/phase0/validator.md#withdrawal-credentials) which can be either a BLS public key or an Ethereum account address.\n\nThis parameter currently accepts ETH1 and BLS withdrawal credentials, but it is considered deprecated after the Capella/Shanghai fork. All users are now advised to use an ETH1 withdrawal address, specified through the `withdrawal_address` parameter as this is required to enable the ongoing accrual of rewards.\n\nFor more information regarding creating withdrawal credentials, please see the official [Ethereum Launchpad FAQ](https://launchpad.ethereum.org/en/faq#withdrawal-credentials)."
      },
      "EpochsRemaining": {
        "description": "the number of epochs remaining in the current queue",
        "type": "integer",
        "format": "int64",
        "example": 280312
      },
      "GenerateEthereumLDParams": {
        "type": "object",
        "description": "Request for generating an Ethereum Launchpad deposit string",
        "required": [
          "validators"
        ],
        "properties": {
          "validators": {
            "description": "Validators public keys",
            "type": "array",
            "items": {
              "type": "string",
              "description": "A BLS public Key.",
              "format": "base64",
              "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
            }
          }
        }
      },
      "GetDeactivationIntents": {
        "type": "object",
        "description": "Request object to get deactivation intents",
        "required": [
          "protocol",
          "network",
          "customer_id"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          },
          "network": {
            "type": "string",
            "description": "Protocol-specific network.",
            "enum": [
              "mainnet",
              "localnet",
              "goerli",
              "prater",
              "holesky",
              "testnet",
              "devnet",
              "kusama",
              "westend",
              "preprod",
              "fuji",
              "local"
            ]
          },
          "polygon": {
            "type": "object",
            "description": "Request object to get Deactivation Intents for Polygon",
            "required": [
              "wallet_address"
            ],
            "properties": {
              "wallet_address": {
                "type": "string",
                "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                "format": "hex",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
              }
            }
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          }
        }
      },
      "GetDeactivationIntentsPolygon": {
        "type": "object",
        "description": "Request object to get Deactivation Intents for Polygon",
        "required": [
          "wallet_address"
        ],
        "properties": {
          "wallet_address": {
            "type": "string",
            "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
            "format": "hex",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
          }
        }
      },
      "GetValidatorStatuses": {
        "type": "object",
        "description": "Request object to get validator statuses on-chain",
        "required": [
          "protocol",
          "network",
          "addresses",
          "customer_id"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          },
          "network": {
            "type": "string",
            "description": "Protocol-specific network.",
            "enum": [
              "mainnet",
              "localnet",
              "goerli",
              "prater",
              "holesky",
              "testnet",
              "devnet",
              "kusama",
              "westend",
              "preprod",
              "fuji",
              "local"
            ]
          },
          "addresses": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
              "format": "hex",
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
            }
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          }
        }
      },
      "Gwei": {
        "type": "string",
        "description": "Amount of ETH (denominated in Gwei).",
        "pattern": "^[1-9]\\d{10,}$",
        "example": "32000000000"
      },
      "HealthCheck": {
        "type": "object",
        "description": "Health check response",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Indicates whether the server is healthy or not",
            "enum": [
              "ok",
              "error",
              "warn"
            ]
          }
        }
      },
      "Id": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "Lamport": {
        "type": "string",
        "description": "Denomination of the cryptocurrency Solana.",
        "pattern": "^[1-9]\\d+$",
        "example": "100"
      },
      "ListValidatorsRequest": {
        "type": "object",
        "description": "List specific validators request",
        "required": [
          "addresses"
        ],
        "properties": {
          "summary": {
            "description": "Flag to return a summary of the schema information",
            "type": "boolean"
          },
          "skip_onchain_status": {
            "description": "Flag to skip retrieving onchain status",
            "type": "boolean"
          },
          "addresses": {
            "description": "list of addresses",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Mev": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the MEV fee recipient. optional"
          },
          "enabled": {
            "type": "boolean"
          },
          "relays": {
            "type": "array",
            "description": "List of Relay urls",
            "items": {
              "type": "string",
              "format": "uri",
              "description": "Relay url"
            },
            "minItems": 1
          }
        }
      },
      "Minimum": {
        "description": "minimum number of validators to be available. required for white label plans",
        "type": "integer",
        "format": "int64"
      },
      "NearDeactivationIntentResponse": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "deactivate_intent_id",
              "customer_id"
            ],
            "properties": {
              "deactivate_intent_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique idenifier for deactivate intent.",
                "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
              },
              "customer_id": {
                "type": "string",
                "description": "Unique identifier for a customer",
                "example": "SatoshiNakamoto-xUYJbPw9hw",
                "minimum": 1
              }
            }
          },
          {
            "type": "object",
            "description": "Response to a new deactivation intent request.",
            "required": [
              "protocol",
              "network",
              "near"
            ],
            "properties": {
              "protocol": {
                "type": "string",
                "description": "Near protocol",
                "enum": [
                  "near"
                ]
              },
              "network": {
                "type": "string",
                "description": "NEAR network",
                "enum": [
                  "mainnet",
                  "testnet",
                  "localnet"
                ]
              },
              "near": {
                "type": "object",
                "description": "NEAR Protocol Deactivate Intent",
                "required": [
                  "to",
                  "unsigned_transaction",
                  "amount",
                  "wallet_address",
                  "public_key",
                  "expiration_time"
                ],
                "properties": {
                  "to": {
                    "type": "string",
                    "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                    "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                    "example": "alice.near"
                  },
                  "unsigned_transaction": {
                    "type": "string",
                    "format": "base64",
                    "description": "Generated unsigned transaction smart contract call data.",
                    "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                  },
                  "amount": {
                    "type": "string",
                    "description": "Denomination of NEAR Protocol.",
                    "pattern": "^[1-9]\\d+$",
                    "example": "100000000000000000000000000"
                  },
                  "wallet_address": {
                    "type": "string",
                    "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                    "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                    "example": "alice.near"
                  },
                  "public_key": {
                    "type": "string",
                    "description": "Base58 encoded public key prefixed by ed25519, associated with the private key that will be used to sign the transaction.",
                    "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
                    "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
                  },
                  "expiration_time": {
                    "type": "integer",
                    "description": "Transaction expiration time",
                    "format": "int64",
                    "example": 1689939023
                  }
                }
              }
            }
          }
        ]
      },
      "Network": {
        "type": "string",
        "description": "Protocol-specific network.",
        "enum": [
          "mainnet",
          "localnet",
          "goerli",
          "prater",
          "holesky",
          "testnet",
          "devnet",
          "kusama",
          "westend",
          "preprod",
          "fuji",
          "local"
        ]
      },
      "NewBootstrappingIntent": {
        "type": "object",
        "description": "Request object to create a new Bootstrapping Intent.",
        "required": [
          "protocol",
          "network",
          "customer_id"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          },
          "network": {
            "type": "string",
            "description": "Protocol-specific network.",
            "enum": [
              "mainnet",
              "localnet",
              "goerli",
              "prater",
              "holesky",
              "testnet",
              "devnet",
              "kusama",
              "westend",
              "preprod",
              "fuji",
              "local"
            ]
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          },
          "polygon": {
            "type": "object",
            "description": "Request object to create a new Bootstrapping Intent for Polygon.",
            "required": [
              "wallet_address"
            ],
            "properties": {
              "wallet_address": {
                "type": "string",
                "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                "format": "hex",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
              }
            }
          }
        }
      },
      "NewBootstrappingIntentPolygon": {
        "type": "object",
        "description": "Request object to create a new Bootstrapping Intent for Polygon.",
        "required": [
          "wallet_address"
        ],
        "properties": {
          "wallet_address": {
            "type": "string",
            "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
            "format": "hex",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
          }
        }
      },
      "NewDeactivateIntentPolkadot": {
        "type": "object",
        "description": "Request object to create a new deactivation intent for Polkadot.",
        "properties": {
          "customer_address": {
            "description": "Address of the customer account to deactivate.",
            "type": "string",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "controller_address": {
            "description": "Address of the customer account to deactivate.\nSame as customer_address. Deprecated - will be removed in a later version.",
            "type": "string",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "amount": {
            "description": "Amount of DOT to unbond. If not supplied, the entire active stake is unbonded.",
            "type": "string",
            "pattern": "^[1-9]\\d+$",
            "example": "100"
          }
        }
      },
      "NewDeactivateIntent": {
        "type": "object",
        "description": "Internal deactivate intent request object",
        "required": [
          "protocol",
          "network",
          "customer_id"
        ],
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          },
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          },
          "network": {
            "type": "string",
            "description": "Protocol-specific network.",
            "enum": [
              "mainnet",
              "localnet",
              "goerli",
              "prater",
              "holesky",
              "testnet",
              "devnet",
              "kusama",
              "westend",
              "preprod",
              "fuji",
              "local"
            ]
          },
          "cardano": {
            "type": "object",
            "description": "Request object to create a new deactivation intent for Cardano.",
            "required": [
              "base_address"
            ],
            "properties": {
              "base_address": {
                "type": "string",
                "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
                "format": "bech32",
                "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
              }
            }
          },
          "polkadot": {
            "type": "object",
            "description": "Request object to create a new deactivation intent for Polkadot.",
            "properties": {
              "customer_address": {
                "description": "Address of the customer account to deactivate.",
                "type": "string",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              },
              "controller_address": {
                "description": "Address of the customer account to deactivate.\nSame as customer_address. Deprecated - will be removed in a later version.",
                "type": "string",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              },
              "amount": {
                "description": "Amount of DOT to unbond. If not supplied, the entire active stake is unbonded.",
                "type": "string",
                "pattern": "^[1-9]\\d+$",
                "example": "100"
              }
            }
          },
          "solana": {
            "type": "object",
            "description": "Request object to create a new deactivation intent for Solana.",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "type": "string",
                "description": "The amount of funds you want to deactivate (in Lamports).",
                "pattern": "^[1-9]\\d+$",
                "example": "100"
              },
              "delegator_address": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              },
              "staking_authority": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              },
              "withdrawal_authority": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              }
            }
          },
          "polygon": {
            "type": "object",
            "description": "Request object to create a new deactivation intent for Polygon.",
            "required": [
              "amount",
              "wallet_address"
            ],
            "properties": {
              "amount": {
                "type": "string",
                "description": "Denomination of the cryptocurrency Polygon.",
                "pattern": "^[1-9]\\d+$",
                "example": "100"
              },
              "wallet_address": {
                "type": "string",
                "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                "format": "hex",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
              },
              "validator_share_address": {
                "type": "string",
                "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                "format": "hex",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
              },
              "plan_id": {
                "type": "string",
                "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
              }
            }
          },
          "near": {
            "type": "object",
            "description": "Request object to create a new deactivation intent for NEAR Protocol.",
            "required": [
              "amount",
              "wallet_address",
              "public_key"
            ],
            "properties": {
              "amount": {
                "type": "string",
                "description": "Amount of yoctoNEAR to deactivate. 1 NEAR = 1e24 yoctoNEAR",
                "pattern": "^[1-9]\\d+$",
                "example": "100000000000000000000000000"
              },
              "wallet_address": {
                "type": "string",
                "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                "example": "alice.near"
              },
              "public_key": {
                "type": "string",
                "description": "Base58 encoded public key prefixed by ed25519, associated with the private key that will be used to sign the transaction.",
                "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
                "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
              },
              "to": {
                "type": "string",
                "description": "Specifies the validator the stake was delegated to. Please note that specifying this parameter is only allowed for the `testnet` network.",
                "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                "example": "alice.near"
              }
            }
          },
          "cosmos": {
            "type": "object",
            "description": "Request object to create a new deactivation intent for Cosmos.",
            "required": [
              "delegator_address",
              "amount"
            ],
            "properties": {
              "delegator_address": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "bech32",
                "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
              },
              "amount": {
                "type": "string",
                "description": "Denomination of the cryptocurrency Cosmos.",
                "pattern": "^[1-9]\\d+$",
                "example": "100"
              },
              "plan_id": {
                "type": "string",
                "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
              }
            }
          },
          "binance": {
            "type": "object",
            "description": "Request object to create a new deactivation intent for Binance.",
            "required": [
              "delegator_address",
              "amount"
            ],
            "properties": {
              "delegator_address": {
                "type": "string",
                "description": "Binance beacon chain address.",
                "format": "bech32",
                "pattern": "^bnb[0-9a-z]+$",
                "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
              },
              "amount": {
                "type": "string",
                "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
                "pattern": "^[1-9]\\d+$",
                "example": "10000000000"
              },
              "plan_id": {
                "type": "string",
                "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
              }
            }
          }
        }
      },
      "NewDeactivateIntentSolana": {
        "type": "object",
        "description": "Request object to create a new deactivation intent for Solana.",
        "required": [
          "amount"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "description": "The amount of funds you want to deactivate (in Lamports).",
            "pattern": "^[1-9]\\d+$",
            "example": "100"
          },
          "delegator_address": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "staking_authority": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "withdrawal_authority": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          }
        }
      },
      "NewDeactivateIntentCardano": {
        "type": "object",
        "description": "Request object to create a new deactivation intent for Cardano.",
        "required": [
          "base_address"
        ],
        "properties": {
          "base_address": {
            "type": "string",
            "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
            "format": "bech32",
            "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
          }
        }
      },
      "NewDeactivateIntentPolygon": {
        "type": "object",
        "description": "Request object to create a new deactivation intent for Polygon.",
        "required": [
          "amount",
          "wallet_address"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "description": "Denomination of the cryptocurrency Polygon.",
            "pattern": "^[1-9]\\d+$",
            "example": "100"
          },
          "wallet_address": {
            "type": "string",
            "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
            "format": "hex",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
          },
          "validator_share_address": {
            "type": "string",
            "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
            "format": "hex",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
          },
          "plan_id": {
            "type": "string",
            "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
            "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
          }
        }
      },
      "NewDeactivateStake": {
        "type": "object",
        "description": "Request object to create a new Deactivate Stake.",
        "required": [
          "protocol",
          "network",
          "customer_id"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          },
          "network": {
            "type": "string",
            "description": "Protocol-specific network.",
            "enum": [
              "mainnet",
              "localnet",
              "goerli",
              "prater",
              "holesky",
              "testnet",
              "devnet",
              "kusama",
              "westend",
              "preprod",
              "fuji",
              "local"
            ]
          },
          "solana": {
            "type": "object",
            "description": "Individual solana deactivate transaction",
            "required": [
              "stake_account_address",
              "stake_account_authority"
            ],
            "properties": {
              "stake_account_address": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              },
              "stake_account_authority": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              }
            }
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          }
        }
      },
      "NewDeactivateStakeSolana": {
        "type": "object",
        "description": "Individual solana deactivate transaction",
        "required": [
          "stake_account_address",
          "stake_account_authority"
        ],
        "properties": {
          "stake_account_address": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "stake_account_authority": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          }
        }
      },
      "NewNode": {
        "type": "object",
        "description": "Create a node for a specific customer.",
        "required": [
          "customer_id",
          "provider",
          "region"
        ],
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "The customer ID."
          },
          "provider": {
            "description": "Cloud provider which will host the node.",
            "x-go-type": "models.ProviderID",
            "x-go-type-import": {
              "path": "go.blockdaemon.com/nodeq-server/pkg/models",
              "name": "models"
            }
          },
          "region": {
            "description": "A zone code recognised by the cloud provider, indicating where the node will be located.",
            "type": "string"
          }
        }
      },
      "NewRewardsRestakeIntent": {
        "type": "object",
        "description": "Request object to create a new Rewards Restake Intent",
        "required": [
          "protocol",
          "network",
          "customer_id"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          },
          "network": {
            "type": "string",
            "description": "Protocol-specific network.",
            "enum": [
              "mainnet",
              "localnet",
              "goerli",
              "prater",
              "holesky",
              "testnet",
              "devnet",
              "kusama",
              "westend",
              "preprod",
              "fuji",
              "local"
            ]
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          },
          "polygon": {
            "type": "object",
            "description": "Request object to create a new Rewards Restake Intent for Polygon",
            "required": [
              "wallet_address"
            ],
            "properties": {
              "wallet_address": {
                "type": "string",
                "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                "format": "hex",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
              },
              "validator_share_address": {
                "type": "string",
                "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                "format": "hex",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
              },
              "plan_id": {
                "type": "string",
                "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
              }
            }
          }
        }
      },
      "NewRewardsRestakeIntentPolygon": {
        "type": "object",
        "description": "Request object to create a new Rewards Restake Intent for Polygon",
        "required": [
          "wallet_address"
        ],
        "properties": {
          "wallet_address": {
            "type": "string",
            "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
            "format": "hex",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
          },
          "validator_share_address": {
            "type": "string",
            "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
            "format": "hex",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
          },
          "plan_id": {
            "type": "string",
            "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
            "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
          }
        }
      },
      "NewRewardsWithdrawIntent": {
        "type": "object",
        "description": "Request object to create a new rewards withdrawal intent.",
        "required": [
          "protocol",
          "network",
          "customer_id"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          },
          "network": {
            "type": "string",
            "description": "Protocol-specific network.",
            "enum": [
              "mainnet",
              "localnet",
              "goerli",
              "prater",
              "holesky",
              "testnet",
              "devnet",
              "kusama",
              "westend",
              "preprod",
              "fuji",
              "local"
            ]
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          },
          "polygon": {
            "type": "object",
            "description": "Request object to create a new rewards withdrawal intent for Polygon.",
            "required": [
              "wallet_address"
            ],
            "properties": {
              "wallet_address": {
                "type": "string",
                "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                "format": "hex",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
              },
              "validator_share_address": {
                "type": "string",
                "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                "format": "hex",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
              },
              "plan_id": {
                "type": "string",
                "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
              }
            }
          },
          "cardano": {
            "type": "object",
            "description": "Request object to create a new rewards withdrawal intent for Cardano.",
            "required": [
              "base_address"
            ],
            "properties": {
              "base_address": {
                "type": "string",
                "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
                "format": "bech32",
                "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
              }
            }
          },
          "cosmos": {
            "type": "object",
            "description": "Request object to create a new rewards withdrawal intent for Cardano.",
            "required": [
              "delegator_address"
            ],
            "properties": {
              "delegator_address": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "bech32",
                "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
              },
              "plan_id": {
                "type": "string",
                "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
              }
            }
          }
        }
      },
      "NewRewardsWithdrawIntentPolygon": {
        "type": "object",
        "description": "Request object to create a new rewards withdrawal intent for Polygon.",
        "required": [
          "wallet_address"
        ],
        "properties": {
          "wallet_address": {
            "type": "string",
            "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
            "format": "hex",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
          },
          "validator_share_address": {
            "type": "string",
            "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
            "format": "hex",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
          },
          "plan_id": {
            "type": "string",
            "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
            "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
          }
        }
      },
      "NewRewardsWithdrawIntentCardano": {
        "type": "object",
        "description": "Request object to create a new rewards withdrawal intent for Cardano.",
        "required": [
          "base_address"
        ],
        "properties": {
          "base_address": {
            "type": "string",
            "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
            "format": "bech32",
            "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
          }
        }
      },
      "NewPlan": {
        "type": "object",
        "description": "the plan config for validator plan",
        "required": [
          "protocol",
          "network",
          "config",
          "staking_plan_type",
          "title"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
            "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          },
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          },
          "network": {
            "type": "string",
            "description": "Protocol-specific network.",
            "enum": [
              "mainnet",
              "localnet",
              "goerli",
              "prater",
              "holesky",
              "testnet",
              "devnet",
              "kusama",
              "westend",
              "preprod",
              "fuji",
              "local"
            ]
          },
          "providers": {
            "type": "array",
            "description": "list of node providers",
            "minItems": 1,
            "items": {
              "type": "object",
              "description": "node provider",
              "required": [
                "provider",
                "region",
                "priority"
              ],
              "properties": {
                "provider": {
                  "description": "Cloud provider which will host the node.",
                  "x-go-type": "models.ProviderID",
                  "x-go-type-import": {
                    "path": "go.blockdaemon.com/nodeq-server/pkg/models",
                    "name": "models"
                  }
                },
                "region": {
                  "description": "cloud provider's zone code",
                  "type": "string"
                },
                "priority": {
                  "description": "reflect priority weighting. provider with weighted 1 will be the first one to try.",
                  "type": "integer",
                  "format": "uint8"
                }
              }
            }
          },
          "minimum": {
            "description": "minimum number of validators to be available. required for white label plans",
            "type": "integer",
            "format": "int64"
          },
          "config": {
            "oneOf": [
              {
                "type": "object",
                "description": "Ethereum staking plan config",
                "required": [
                  "inventory_type"
                ],
                "properties": {
                  "suggested_fee_recipient": {
                    "type": "string",
                    "description": "the suggested fee recipient address",
                    "minimum": 1
                  },
                  "mev": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "ID of the MEV fee recipient. optional"
                      },
                      "enabled": {
                        "type": "boolean"
                      },
                      "relays": {
                        "type": "array",
                        "description": "List of Relay urls",
                        "items": {
                          "type": "string",
                          "format": "uri",
                          "description": "Relay url"
                        },
                        "minItems": 1
                      }
                    }
                  },
                  "inventory_type": {
                    "type": "string",
                    "description": "Indicates if the quantity of validators for the staking plan is static or dynamic. Static is a once off deployment of a specified quantity of validators. Dynamic is where an initial quantity of validators is deployed with a threshold of available validators also configured. If the number of available validators within the validator inventory drops below the threshold (by being reserved as part of a stake intents API call) then the dynamic plan will automatically deploy the required infrastructure to bring the number of available validators above the threshold.",
                    "enum": [
                      "static",
                      "dynamic"
                    ]
                  },
                  "execution_client": {
                    "type": "string",
                    "description": "The execution client to use on the node",
                    "enum": [
                      "geth",
                      "besu"
                    ]
                  }
                }
              },
              {
                "type": "object",
                "description": "Solana staking plan config",
                "required": [
                  "validator_address"
                ],
                "properties": {
                  "validator_address": {
                    "type": "object",
                    "required": [
                      "mainnet",
                      "testnet"
                    ],
                    "properties": {
                      "mainnet": {
                        "type": "string",
                        "description": "Public Key of an asymmetric key-pair.",
                        "format": "base58",
                        "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                        "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                      },
                      "testnet": {
                        "type": "string",
                        "description": "Public Key of an asymmetric key-pair.",
                        "format": "base58",
                        "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                        "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "description": "Polygon staking plan config",
                "required": [
                  "validator_share_address"
                ],
                "properties": {
                  "validator_share_address": {
                    "type": "object",
                    "required": [
                      "mainnet",
                      "testnet"
                    ],
                    "properties": {
                      "mainnet": {
                        "type": "string",
                        "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                        "format": "hex",
                        "pattern": "^0x[a-fA-F0-9]{40}$",
                        "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                      },
                      "testnet": {
                        "type": "string",
                        "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                        "format": "hex",
                        "pattern": "^0x[a-fA-F0-9]{40}$",
                        "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "description": "NEAR Protocol staking plan config",
                "required": [
                  "validator_address"
                ],
                "properties": {
                  "validator_address": {
                    "type": "object",
                    "required": [
                      "mainnet",
                      "testnet"
                    ],
                    "properties": {
                      "mainnet": {
                        "type": "string",
                        "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                        "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                        "example": "alice.near"
                      },
                      "testnet": {
                        "type": "string",
                        "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                        "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                        "example": "alice.near"
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "description": "Cardano staking plan config",
                "required": [
                  "stake_pool_id"
                ],
                "properties": {
                  "stake_pool_id": {
                    "type": "object",
                    "required": [
                      "mainnet",
                      "preprod"
                    ],
                    "properties": {
                      "mainnet": {
                        "type": "string",
                        "description": "bech32 encoded pool id.",
                        "format": "bech32",
                        "example": "pool1ev8fwfccn8gr0zcz3uyps0t0mcrefc6s95wjc6aed3ngc86y5rk"
                      },
                      "preprod": {
                        "type": "string",
                        "description": "bech32 encoded pool id.",
                        "format": "bech32",
                        "example": "pool1ev8fwfccn8gr0zcz3uyps0t0mcrefc6s95wjc6aed3ngc86y5rk"
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "description": "Avalanche staking plan config",
                "required": [
                  "validator_address"
                ],
                "properties": {
                  "validator_address": {
                    "type": "object",
                    "required": [
                      "mainnet",
                      "fuji"
                    ],
                    "properties": {
                      "mainnet": {
                        "type": "string",
                        "description": "Avalanche validator node address",
                        "pattern": "^NodeID-[A-Za-z0-9]{43}$",
                        "example": "NodeID-B19uSxUKerjjnA215czAJLHMqNJMbsAMWuSxUKerjjW"
                      },
                      "fuji": {
                        "type": "string",
                        "description": "Avalanche validator node address",
                        "pattern": "^NodeID-[A-Za-z0-9]{43}$",
                        "example": "NodeID-B19uSxUKerjjnA215czAJLHMqNJMbsAMWuSxUKerjjW"
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "description": "Cosmos staking plan config",
                "required": [
                  "validator_address"
                ],
                "properties": {
                  "validator_address": {
                    "type": "object",
                    "required": [
                      "mainnet",
                      "testnet"
                    ],
                    "properties": {
                      "mainnet": {
                        "type": "string",
                        "description": "Public Key of an asymmetric key-pair.",
                        "format": "bech32",
                        "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                        "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                      },
                      "testnet": {
                        "type": "string",
                        "description": "Public Key of an asymmetric key-pair.",
                        "format": "bech32",
                        "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                        "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                      }
                    }
                  }
                }
              }
            ]
          },
          "staking_plan_type": {
            "type": "string",
            "description": "Indicates if the staking plan requires a Blockdaemon validator launch or it is associated to a public validator.",
            "enum": [
              "white_label",
              "public"
            ]
          },
          "title": {
            "type": "string",
            "description": "Plan title for display purposes"
          },
          "shared": {
            "description": "flag for shared plans",
            "type": "boolean"
          },
          "validators_per_node": {
            "description": "number of validators per node, default is 500",
            "type": "integer",
            "format": "int32",
            "default": 500
          }
        }
      },
      "NewSplitStake": {
        "type": "object",
        "description": "Request object to create a new Split Stake.",
        "required": [
          "protocol",
          "network",
          "customer_id"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          },
          "network": {
            "type": "string",
            "description": "Protocol-specific network.",
            "enum": [
              "mainnet",
              "localnet",
              "goerli",
              "prater",
              "holesky",
              "testnet",
              "devnet",
              "kusama",
              "westend",
              "preprod",
              "fuji",
              "local"
            ]
          },
          "solana": {
            "type": "object",
            "description": "Request object to create a new Split Stake for solana.",
            "required": [
              "stake_account_address",
              "stake_account_authority",
              "amount"
            ],
            "properties": {
              "stake_account_address": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              },
              "stake_account_authority": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              },
              "amount": {
                "type": "string",
                "description": "Denomination of the cryptocurrency Solana.",
                "pattern": "^[1-9]\\d+$",
                "example": "100"
              }
            }
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          }
        }
      },
      "NewSplitStakeSolana": {
        "type": "object",
        "description": "Request object to create a new Split Stake for solana.",
        "required": [
          "stake_account_address",
          "stake_account_authority",
          "amount"
        ],
        "properties": {
          "stake_account_address": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "stake_account_authority": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "amount": {
            "type": "string",
            "description": "Denomination of the cryptocurrency Solana.",
            "pattern": "^[1-9]\\d+$",
            "example": "100"
          }
        }
      },
      "NewStakeIntent": {
        "type": "object",
        "description": "Request object to create a new Stake Intent.",
        "required": [
          "protocol",
          "network",
          "customer_id"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          },
          "network": {
            "type": "string",
            "description": "Protocol-specific network.",
            "enum": [
              "mainnet",
              "localnet",
              "goerli",
              "prater",
              "holesky",
              "testnet",
              "devnet",
              "kusama",
              "westend",
              "preprod",
              "fuji",
              "local"
            ]
          },
          "ethereum": {
            "type": "object",
            "description": "Stake intent for the Ethereum protocol.",
            "required": [
              "stakes"
            ],
            "properties": {
              "stakes": {
                "type": "array",
                "description": "Stakes for the Ethereum protocol.",
                "minItems": 1,
                "maxItems": 250,
                "additionalProperties": false,
                "items": {
                  "type": "object",
                  "description": "Details of a individual Ethereum Stake request.",
                  "required": [
                    "amount",
                    "withdrawal_address"
                  ],
                  "properties": {
                    "amount": {
                      "type": "string",
                      "description": "Amount of ETH (denominated in Gwei).",
                      "pattern": "^[1-9]\\d{10,}$",
                      "example": "32000000000"
                    },
                    "withdrawal_address": {
                      "type": "string",
                      "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                      "format": "hex",
                      "pattern": "^0x[a-fA-F0-9]{40}$",
                      "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                    },
                    "quantity": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Number of validators to create that will share the same withdrawal credentials.",
                      "minimum": 1
                    },
                    "fee_recipient": {
                      "type": "string",
                      "description": "An Ethereum address to receive transaction fees from published blocks. 20-bytes, hex encoded with 0x prefix, case insensitive.",
                      "example": "0x93247f2209abcacf57b75a51dafae777f9dd38bc",
                      "pattern": "^0x[a-fA-F0-9]{40}$"
                    }
                  }
                }
              },
              "plan_id": {
                "type": "string",
                "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
              }
            }
          },
          "polkadot": {
            "type": "object",
            "description": "Request object to create a new Stake Intent for Polkadot.",
            "properties": {
              "customer_address": {
                "description": "Address of the customer account whose DOT will be staked.",
                "type": "string",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              },
              "controller_address": {
                "description": "Address of the customer account whose DOT will be staked.\nSame as customer_address. Deprecated - will be removed in a later version.",
                "type": "string",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              }
            }
          },
          "solana": {
            "type": "object",
            "description": "Individual solana stake",
            "required": [
              "amount",
              "delegator_address"
            ],
            "properties": {
              "amount": {
                "type": "string",
                "description": "The amount of funds you want to stake (in Lamports)",
                "pattern": "^[1-9]\\d+$",
                "example": "100"
              },
              "validator_address": {
                "type": "string",
                "description": "The public address of the validator node that you intend to delegate your tokens to",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              },
              "delegator_address": {
                "type": "string",
                "description": "The address sending the funds to be staked",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              },
              "staking_authority": {
                "type": "string",
                "description": "The stake authority can be considered the manager of the stake account. It is used to sign transactions for the following operations but doesn’t have control over the funds:\n* Delegating stake\n* Deactivating the stake delegation\n* Splitting the stake account (creating a new stake account with a portion of the funds)\n* Merging two stake accounts into one\n* Setting a new stake authority\n* **Note:** When not specified, this will default to the delegator_address",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              },
              "withdrawal_authority": {
                "type": "string",
                "description": "The withdraw authority is used to sign transactions for the following operations:\n* Withdrawing an un-delegated stake into a wallet address\n* Setting a new withdrawal authority\n* Setting a new stake authority (thus, the withdrawal authority is the ultimate owner of the account)\n* **Note:** When not specified, this will default to the delegator_address",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              },
              "plan_id": {
                "type": "string",
                "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
              }
            }
          },
          "cosmos": {
            "type": "object",
            "description": "Individual cosmos stake",
            "required": [
              "amount",
              "delegator_address"
            ],
            "properties": {
              "amount": {
                "type": "string",
                "description": "Denomination of the cryptocurrency Cosmos.",
                "pattern": "^[1-9]\\d+$",
                "example": "100"
              },
              "delegator_address": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "bech32",
                "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
              },
              "public_key": {
                "type": "object",
                "description": "Cosmos public key description",
                "required": [
                  "value",
                  "type"
                ],
                "properties": {
                  "value": {
                    "type": "string",
                    "description": "Public Key of an asymmetric key-pair.",
                    "format": "base64",
                    "example": "MTIzMDl3c2hka2Fqc2RoYXNramQ4OTEyM25oamtzaGRrcWplZ"
                  },
                  "type": {
                    "type": "string",
                    "description": "Cosmos public key types",
                    "enum": [
                      "ed25519",
                      "secp256k1"
                    ]
                  }
                }
              },
              "plan_id": {
                "type": "string",
                "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
              }
            }
          },
          "binance": {
            "type": "object",
            "description": "Individual binance stake",
            "required": [
              "amount",
              "delegator_address"
            ],
            "properties": {
              "amount": {
                "type": "string",
                "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
                "pattern": "^[1-9]\\d+$",
                "example": "10000000000"
              },
              "delegator_address": {
                "type": "string",
                "description": "Binance beacon chain address.",
                "format": "bech32",
                "pattern": "^bnb[0-9a-z]+$",
                "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
              },
              "plan_id": {
                "type": "string",
                "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
              }
            }
          },
          "cardano": {
            "type": "object",
            "description": "Request object to create a new stake intent for Cardano protocol",
            "required": [
              "base_address"
            ],
            "properties": {
              "base_address": {
                "type": "string",
                "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
                "format": "bech32",
                "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
              },
              "plan_id": {
                "type": "string",
                "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
              }
            }
          },
          "polygon": {
            "type": "object",
            "description": "Request object to create a new Stake Intent for Polygon",
            "required": [
              "amount",
              "wallet_address"
            ],
            "properties": {
              "amount": {
                "type": "string",
                "description": "The amount of MATIC (in Wei) you want to stake.",
                "pattern": "^[1-9]\\d+$",
                "example": "100"
              },
              "wallet_address": {
                "type": "string",
                "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                "format": "hex",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
              },
              "validator_share_address": {
                "type": "string",
                "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                "format": "hex",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
              },
              "plan_id": {
                "type": "string",
                "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
              }
            }
          },
          "near": {
            "type": "object",
            "description": "Request object to create a new Stake Intent for NEAR Protocol",
            "required": [
              "amount",
              "wallet_address",
              "public_key"
            ],
            "properties": {
              "amount": {
                "type": "string",
                "description": "Amount of yoctoNEAR to stake. 1 NEAR = 1e24 yoctoNEAR.",
                "pattern": "^[1-9]\\d+$",
                "example": "100000000000000000000000000"
              },
              "wallet_address": {
                "type": "string",
                "description": "Account to stake from (can be either [named account or implicit account](https://docs.near.org/concepts/basics/accounts/account-id/))",
                "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                "example": "alice.near"
              },
              "public_key": {
                "type": "string",
                "description": "Must be the public key of the private key that will be used to sign the returned transaction. The public key must also be added as [FullAccess](https://docs.near.org/concepts/basics/accounts/access-keys#full-access-keys) key to the `wallet_address` account.",
                "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
                "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
              },
              "to": {
                "type": "string",
                "description": "Specifies validator to delegate to. Please note that specifying this parameter is only allowed for the `testnet` network.",
                "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                "example": "alice.near"
              },
              "plan_id": {
                "type": "string",
                "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
              }
            }
          },
          "avalanche": {
            "type": "object",
            "description": "Request object to create a new Stake Intent for Avalanche",
            "required": [
              "delegator_address",
              "amount"
            ],
            "properties": {
              "validator_address": {
                "type": "string",
                "description": "Avalanche validator address",
                "pattern": "^NodeID-[A-Za-z0-9]{43}$",
                "example": "NodeID-B19uSxUKerjjnA215czAJLHMqNJMbsAMWuSxUKerjjW"
              },
              "delegator_address": {
                "type": "string",
                "description": "Avalanche delegator address",
                "pattern": "^([P]|[a-km-zA-HJ-NP-Z1-9]{36,72})-[a-zA-Z]{1,83}1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{38}$",
                "example": "P-fuji1g2g0jxcfn5sp59ld7g0t0tp4jrqppvqcfqc7hy"
              },
              "start_time": {
                "description": "Avalanche staking start time",
                "type": "integer",
                "format": "int64",
                "example": 1689939023
              },
              "end_time": {
                "description": "Avalanche staking end time",
                "type": "integer",
                "format": "int64",
                "example": 1689939023
              },
              "amount": {
                "type": "string",
                "description": "Amount of nano-Avalanche to stake. 1 Avalanche = 1e9 nano-Avalanche.",
                "pattern": "^[1-9]\\d+$",
                "example": "10000000000"
              },
              "plan_id": {
                "type": "string",
                "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
              }
            }
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          }
        }
      },
      "NewStakeIntentCardano": {
        "type": "object",
        "description": "Request object to create a new stake intent for Cardano protocol",
        "required": [
          "base_address"
        ],
        "properties": {
          "base_address": {
            "type": "string",
            "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
            "format": "bech32",
            "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
          },
          "plan_id": {
            "type": "string",
            "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
            "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
          }
        }
      },
      "NewStakeIntentCosmos": {
        "type": "object",
        "description": "Individual cosmos stake",
        "required": [
          "amount",
          "delegator_address"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "description": "Denomination of the cryptocurrency Cosmos.",
            "pattern": "^[1-9]\\d+$",
            "example": "100"
          },
          "delegator_address": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "bech32",
            "pattern": "^cosmos[1-9a-zA-Z]{39}$",
            "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
          },
          "public_key": {
            "type": "object",
            "description": "Cosmos public key description",
            "required": [
              "value",
              "type"
            ],
            "properties": {
              "value": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "base64",
                "example": "MTIzMDl3c2hka2Fqc2RoYXNramQ4OTEyM25oamtzaGRrcWplZ"
              },
              "type": {
                "type": "string",
                "description": "Cosmos public key types",
                "enum": [
                  "ed25519",
                  "secp256k1"
                ]
              }
            }
          },
          "plan_id": {
            "type": "string",
            "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
            "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
          }
        }
      },
      "NewStakeIntentBinance": {
        "type": "object",
        "description": "Individual binance stake",
        "required": [
          "amount",
          "delegator_address"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
            "pattern": "^[1-9]\\d+$",
            "example": "10000000000"
          },
          "delegator_address": {
            "type": "string",
            "description": "Binance beacon chain address.",
            "format": "bech32",
            "pattern": "^bnb[0-9a-z]+$",
            "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
          },
          "plan_id": {
            "type": "string",
            "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
            "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
          }
        }
      },
      "NewStakeIntentEthereum": {
        "type": "object",
        "description": "Stake intent for the Ethereum protocol.",
        "required": [
          "stakes"
        ],
        "properties": {
          "stakes": {
            "type": "array",
            "description": "Stakes for the Ethereum protocol.",
            "minItems": 1,
            "maxItems": 250,
            "additionalProperties": false,
            "items": {
              "type": "object",
              "description": "Details of a individual Ethereum Stake request.",
              "required": [
                "amount",
                "withdrawal_address"
              ],
              "properties": {
                "amount": {
                  "type": "string",
                  "description": "Amount of ETH (denominated in Gwei).",
                  "pattern": "^[1-9]\\d{10,}$",
                  "example": "32000000000"
                },
                "withdrawal_address": {
                  "type": "string",
                  "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                  "format": "hex",
                  "pattern": "^0x[a-fA-F0-9]{40}$",
                  "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                },
                "quantity": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Number of validators to create that will share the same withdrawal credentials.",
                  "minimum": 1
                },
                "fee_recipient": {
                  "type": "string",
                  "description": "An Ethereum address to receive transaction fees from published blocks. 20-bytes, hex encoded with 0x prefix, case insensitive.",
                  "example": "0x93247f2209abcacf57b75a51dafae777f9dd38bc",
                  "pattern": "^0x[a-fA-F0-9]{40}$"
                }
              }
            }
          },
          "plan_id": {
            "type": "string",
            "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
            "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
          }
        }
      },
      "NewStakeIntentEthereumStake": {
        "type": "object",
        "description": "Details of a individual Ethereum Stake request.",
        "required": [
          "amount",
          "withdrawal_address"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "description": "Amount of ETH (denominated in Gwei).",
            "pattern": "^[1-9]\\d{10,}$",
            "example": "32000000000"
          },
          "withdrawal_address": {
            "type": "string",
            "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
            "format": "hex",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "description": "Number of validators to create that will share the same withdrawal credentials.",
            "minimum": 1
          },
          "fee_recipient": {
            "type": "string",
            "description": "An Ethereum address to receive transaction fees from published blocks. 20-bytes, hex encoded with 0x prefix, case insensitive.",
            "example": "0x93247f2209abcacf57b75a51dafae777f9dd38bc",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          }
        }
      },
      "NewStakeIntentPolkadot": {
        "type": "object",
        "description": "Request object to create a new Stake Intent for Polkadot.",
        "properties": {
          "customer_address": {
            "description": "Address of the customer account whose DOT will be staked.",
            "type": "string",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "controller_address": {
            "description": "Address of the customer account whose DOT will be staked.\nSame as customer_address. Deprecated - will be removed in a later version.",
            "type": "string",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          }
        }
      },
      "NewStakeIntentPolygon": {
        "type": "object",
        "description": "Request object to create a new Stake Intent for Polygon",
        "required": [
          "amount",
          "wallet_address"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "description": "The amount of MATIC (in Wei) you want to stake.",
            "pattern": "^[1-9]\\d+$",
            "example": "100"
          },
          "wallet_address": {
            "type": "string",
            "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
            "format": "hex",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
          },
          "validator_share_address": {
            "type": "string",
            "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
            "format": "hex",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
          },
          "plan_id": {
            "type": "string",
            "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
            "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
          }
        }
      },
      "NewStakeIntentSolana": {
        "type": "object",
        "description": "Individual solana stake",
        "required": [
          "amount",
          "delegator_address"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "description": "The amount of funds you want to stake (in Lamports)",
            "pattern": "^[1-9]\\d+$",
            "example": "100"
          },
          "validator_address": {
            "type": "string",
            "description": "The public address of the validator node that you intend to delegate your tokens to",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "delegator_address": {
            "type": "string",
            "description": "The address sending the funds to be staked",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "staking_authority": {
            "type": "string",
            "description": "The stake authority can be considered the manager of the stake account. It is used to sign transactions for the following operations but doesn’t have control over the funds:\n* Delegating stake\n* Deactivating the stake delegation\n* Splitting the stake account (creating a new stake account with a portion of the funds)\n* Merging two stake accounts into one\n* Setting a new stake authority\n* **Note:** When not specified, this will default to the delegator_address",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "withdrawal_authority": {
            "type": "string",
            "description": "The withdraw authority is used to sign transactions for the following operations:\n* Withdrawing an un-delegated stake into a wallet address\n* Setting a new withdrawal authority\n* Setting a new stake authority (thus, the withdrawal authority is the ultimate owner of the account)\n* **Note:** When not specified, this will default to the delegator_address",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "plan_id": {
            "type": "string",
            "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
            "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
          }
        }
      },
      "NewTransactionInitiation": {
        "type": "object",
        "description": "Details of transaction to be submitted.",
        "required": [
          "protocol",
          "signed_transaction"
        ],
        "properties": {
          "stake_intent_id": {
            "type": "string",
            "format": "base58",
            "description": "Unique idenifier for a group of stakes.",
            "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
          },
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          },
          "signed_transaction": {
            "type": "string",
            "description": "Signed transaction.",
            "format": "base64"
          }
        }
      },
      "NewWithdraw": {
        "type": "object",
        "description": "Request object to create a new Withdraw.",
        "required": [
          "protocol",
          "network",
          "customer_id"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          },
          "network": {
            "type": "string",
            "description": "Protocol-specific network.",
            "enum": [
              "mainnet",
              "localnet",
              "goerli",
              "prater",
              "holesky",
              "testnet",
              "devnet",
              "kusama",
              "westend",
              "preprod",
              "fuji",
              "local"
            ]
          },
          "solana": {
            "type": "object",
            "description": "Request object to create a new Withdraw for Solana",
            "required": [
              "stake_account_address",
              "withdrawal_authority",
              "withdrawal_address"
            ],
            "properties": {
              "amount": {
                "type": "string",
                "description": "Amount of funds to withdraw. If the value is 0 or unspecified it will be set to current balance.",
                "pattern": "^[1-9]\\d+$",
                "example": "100"
              },
              "stake_account_address": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              },
              "withdrawal_authority": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              },
              "withdrawal_address": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              }
            }
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          }
        }
      },
      "NewWithdrawIntent": {
        "type": "object",
        "description": "Request object to create a new withdrawal intent.",
        "required": [
          "protocol",
          "network",
          "customer_id"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          },
          "network": {
            "type": "string",
            "description": "Protocol-specific network.",
            "enum": [
              "mainnet",
              "localnet",
              "goerli",
              "prater",
              "holesky",
              "testnet",
              "devnet",
              "kusama",
              "westend",
              "preprod",
              "fuji",
              "local"
            ]
          },
          "solana": {
            "type": "object",
            "description": "Request object to create a new withdrawal intent for Solana.",
            "required": [
              "amount",
              "withdrawal_address"
            ],
            "properties": {
              "amount": {
                "type": "string",
                "description": "The amount of funds you want to withdraw (in Lamports). If the value is 0 or unspecified it will be set to current balance.",
                "pattern": "^[1-9]\\d+$",
                "example": "100"
              },
              "withdrawal_address": {
                "type": "string",
                "description": "The receiving address – i.e. where the withdrawn funds should go.",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              },
              "delegator_address": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              },
              "withdrawal_authority": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              }
            }
          },
          "polkadot": {
            "type": "object",
            "description": "Request object to create a new withdrawal intent for Polkadot.",
            "properties": {
              "customer_address": {
                "description": "Address of the customer account that will be affected by the withdrawal intent.",
                "type": "string",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              },
              "controller_address": {
                "description": "Address of the customer account that will be affected by the withdrawal intent.\nSame as customer_address. Deprecated - will be removed in a later version.",
                "type": "string",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              }
            }
          },
          "polygon": {
            "type": "object",
            "description": "Request object to create a new withdrawal intent for Polygon.",
            "required": [
              "wallet_address"
            ],
            "properties": {
              "unbond_nonces": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "description": "Number for one use only",
                  "example": 1
                }
              },
              "wallet_address": {
                "type": "string",
                "description": "An array of unbond nonces.",
                "format": "hex",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
              },
              "validator_share_address": {
                "type": "string",
                "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                "format": "hex",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
              },
              "plan_id": {
                "type": "string",
                "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
              }
            }
          },
          "near": {
            "type": "object",
            "description": "Request object to create a new withdrawal intent for NEAR.",
            "required": [
              "wallet_address",
              "public_key"
            ],
            "properties": {
              "wallet_address": {
                "type": "string",
                "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                "example": "alice.near"
              },
              "public_key": {
                "type": "string",
                "description": "Base58 encoded public key prefixed by ed25519, associated with the private key that will be used to sign the transaction.",
                "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
                "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
              },
              "to": {
                "type": "string",
                "description": "Specifies the validator the stake was delegated to. Please note that specifying this parameter is only allowed for the `testnet` network.",
                "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                "example": "alice.near"
              }
            }
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          }
        }
      },
      "NewWithdrawIntentPolkadot": {
        "type": "object",
        "description": "Request object to create a new withdrawal intent for Polkadot.",
        "properties": {
          "customer_address": {
            "description": "Address of the customer account that will be affected by the withdrawal intent.",
            "type": "string",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "controller_address": {
            "description": "Address of the customer account that will be affected by the withdrawal intent.\nSame as customer_address. Deprecated - will be removed in a later version.",
            "type": "string",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          }
        }
      },
      "NewWithdrawIntentPolygon": {
        "type": "object",
        "description": "Request object to create a new withdrawal intent for Polygon.",
        "required": [
          "wallet_address"
        ],
        "properties": {
          "unbond_nonces": {
            "type": "array",
            "items": {
              "type": "integer",
              "description": "Number for one use only",
              "example": 1
            }
          },
          "wallet_address": {
            "type": "string",
            "description": "An array of unbond nonces.",
            "format": "hex",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
          },
          "validator_share_address": {
            "type": "string",
            "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
            "format": "hex",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
          },
          "plan_id": {
            "type": "string",
            "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
            "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
          }
        }
      },
      "NewWithdrawIntentSolana": {
        "type": "object",
        "description": "Request object to create a new withdrawal intent for Solana.",
        "required": [
          "amount",
          "withdrawal_address"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "description": "The amount of funds you want to withdraw (in Lamports). If the value is 0 or unspecified it will be set to current balance.",
            "pattern": "^[1-9]\\d+$",
            "example": "100"
          },
          "withdrawal_address": {
            "type": "string",
            "description": "The receiving address – i.e. where the withdrawn funds should go.",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "delegator_address": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "withdrawal_authority": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          }
        }
      },
      "NewWithdrawSolana": {
        "type": "object",
        "description": "Request object to create a new Withdraw for Solana",
        "required": [
          "stake_account_address",
          "withdrawal_authority",
          "withdrawal_address"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "description": "Amount of funds to withdraw. If the value is 0 or unspecified it will be set to current balance.",
            "pattern": "^[1-9]\\d+$",
            "example": "100"
          },
          "stake_account_address": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "withdrawal_authority": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "withdrawal_address": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          }
        }
      },
      "NodeXID": {
        "type": "string",
        "description": "The node XID",
        "example": "c9slgu11eqli4rc7djlg"
      },
      "NodeXIDs": {
        "type": "object",
        "required": [
          "nodes"
        ],
        "properties": {
          "nodes": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The node XID",
              "example": "c9slgu11eqli4rc7djlg"
            }
          }
        }
      },
      "Nonce": {
        "type": "integer",
        "description": "Number for one use only",
        "example": 1
      },
      "OnchainValidatorStatus": {
        "type": "string",
        "description": "On-chain status of the validator.\nReference: https://docs.blockdaemon.com/docs/eth-validator-statuses\n",
        "enum": [
          "pending_initialized",
          "pending_queued",
          "active_ongoing",
          "active_exiting",
          "active_slashed",
          "exited_unslashed",
          "exited_slashed",
          "withdrawal_possible",
          "withdrawal_done",
          "unknown"
        ]
      },
      "Pagination": {
        "type": "object",
        "description": "encapsulates pagination properties",
        "required": [
          "page",
          "per_page",
          "total"
        ],
        "properties": {
          "page": {
            "description": "current page number",
            "type": "integer",
            "format": "int64"
          },
          "per_page": {
            "description": "number of results per page",
            "type": "integer",
            "format": "int64"
          },
          "total": {
            "description": "total number of results",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Plan": {
        "type": "object",
        "description": "staking plan for validators",
        "required": [
          "id",
          "protocol",
          "network",
          "config",
          "customer_id",
          "staking_plan_type",
          "title"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
            "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          },
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          },
          "network": {
            "type": "string",
            "description": "Protocol-specific network.",
            "enum": [
              "mainnet",
              "localnet",
              "goerli",
              "prater",
              "holesky",
              "testnet",
              "devnet",
              "kusama",
              "westend",
              "preprod",
              "fuji",
              "local"
            ]
          },
          "provider": {
            "description": "Cloud provider which will host the node.",
            "x-go-type": "models.ProviderID",
            "x-go-type-import": {
              "path": "go.blockdaemon.com/nodeq-server/pkg/models",
              "name": "models"
            }
          },
          "region": {
            "description": "cloud provider's zone code",
            "type": "string"
          },
          "minimum": {
            "description": "minimum number of validators to be available. required for white label plans",
            "type": "integer",
            "format": "int64"
          },
          "config": {
            "oneOf": [
              {
                "type": "object",
                "description": "Ethereum staking plan config",
                "required": [
                  "inventory_type"
                ],
                "properties": {
                  "suggested_fee_recipient": {
                    "type": "string",
                    "description": "the suggested fee recipient address",
                    "minimum": 1
                  },
                  "mev": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "ID of the MEV fee recipient. optional"
                      },
                      "enabled": {
                        "type": "boolean"
                      },
                      "relays": {
                        "type": "array",
                        "description": "List of Relay urls",
                        "items": {
                          "type": "string",
                          "format": "uri",
                          "description": "Relay url"
                        },
                        "minItems": 1
                      }
                    }
                  },
                  "inventory_type": {
                    "type": "string",
                    "description": "Indicates if the quantity of validators for the staking plan is static or dynamic. Static is a once off deployment of a specified quantity of validators. Dynamic is where an initial quantity of validators is deployed with a threshold of available validators also configured. If the number of available validators within the validator inventory drops below the threshold (by being reserved as part of a stake intents API call) then the dynamic plan will automatically deploy the required infrastructure to bring the number of available validators above the threshold.",
                    "enum": [
                      "static",
                      "dynamic"
                    ]
                  },
                  "execution_client": {
                    "type": "string",
                    "description": "The execution client to use on the node",
                    "enum": [
                      "geth",
                      "besu"
                    ]
                  }
                }
              },
              {
                "type": "object",
                "description": "Solana staking plan config",
                "required": [
                  "validator_address"
                ],
                "properties": {
                  "validator_address": {
                    "type": "object",
                    "required": [
                      "mainnet",
                      "testnet"
                    ],
                    "properties": {
                      "mainnet": {
                        "type": "string",
                        "description": "Public Key of an asymmetric key-pair.",
                        "format": "base58",
                        "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                        "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                      },
                      "testnet": {
                        "type": "string",
                        "description": "Public Key of an asymmetric key-pair.",
                        "format": "base58",
                        "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                        "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "description": "Polygon staking plan config",
                "required": [
                  "validator_share_address"
                ],
                "properties": {
                  "validator_share_address": {
                    "type": "object",
                    "required": [
                      "mainnet",
                      "testnet"
                    ],
                    "properties": {
                      "mainnet": {
                        "type": "string",
                        "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                        "format": "hex",
                        "pattern": "^0x[a-fA-F0-9]{40}$",
                        "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                      },
                      "testnet": {
                        "type": "string",
                        "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                        "format": "hex",
                        "pattern": "^0x[a-fA-F0-9]{40}$",
                        "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "description": "Cardano staking plan config",
                "required": [
                  "stake_pool_id"
                ],
                "properties": {
                  "stake_pool_id": {
                    "type": "object",
                    "required": [
                      "mainnet",
                      "preprod"
                    ],
                    "properties": {
                      "mainnet": {
                        "type": "string",
                        "description": "bech32 encoded pool id.",
                        "format": "bech32",
                        "example": "pool1ev8fwfccn8gr0zcz3uyps0t0mcrefc6s95wjc6aed3ngc86y5rk"
                      },
                      "preprod": {
                        "type": "string",
                        "description": "bech32 encoded pool id.",
                        "format": "bech32",
                        "example": "pool1ev8fwfccn8gr0zcz3uyps0t0mcrefc6s95wjc6aed3ngc86y5rk"
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "description": "Avalanche staking plan config",
                "required": [
                  "validator_address"
                ],
                "properties": {
                  "validator_address": {
                    "type": "object",
                    "required": [
                      "mainnet",
                      "fuji"
                    ],
                    "properties": {
                      "mainnet": {
                        "type": "string",
                        "description": "Avalanche validator node address",
                        "pattern": "^NodeID-[A-Za-z0-9]{43}$",
                        "example": "NodeID-B19uSxUKerjjnA215czAJLHMqNJMbsAMWuSxUKerjjW"
                      },
                      "fuji": {
                        "type": "string",
                        "description": "Avalanche validator node address",
                        "pattern": "^NodeID-[A-Za-z0-9]{43}$",
                        "example": "NodeID-B19uSxUKerjjnA215czAJLHMqNJMbsAMWuSxUKerjjW"
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "description": "Cosmos staking plan config",
                "required": [
                  "validator_address"
                ],
                "properties": {
                  "validator_address": {
                    "type": "object",
                    "required": [
                      "mainnet",
                      "testnet"
                    ],
                    "properties": {
                      "mainnet": {
                        "type": "string",
                        "description": "Public Key of an asymmetric key-pair.",
                        "format": "bech32",
                        "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                        "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                      },
                      "testnet": {
                        "type": "string",
                        "description": "Public Key of an asymmetric key-pair.",
                        "format": "bech32",
                        "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                        "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "description": "Binance staking plan config",
                "required": [
                  "validator_address"
                ],
                "properties": {
                  "validator_address": {
                    "type": "object",
                    "required": [
                      "mainnet",
                      "testnet"
                    ],
                    "properties": {
                      "mainnet": {
                        "type": "string",
                        "description": "Binance beacon chain validator address.",
                        "format": "bech32",
                        "pattern": "^bva[0-9a-zA-Z]*$",
                        "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                      },
                      "testnet": {
                        "type": "string",
                        "description": "Binance beacon chain validator address.",
                        "format": "bech32",
                        "pattern": "^bva[0-9a-zA-Z]*$",
                        "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                      }
                    }
                  }
                }
              }
            ]
          },
          "total_pending": {
            "description": "total number of pending validators in a staking plan",
            "type": "integer",
            "format": "int64"
          },
          "total_available": {
            "description": "total number of available validators in a staking plan",
            "type": "integer",
            "format": "int64"
          },
          "total_active": {
            "description": "total number of active validators in a staking plan",
            "type": "integer",
            "format": "int64"
          },
          "staking_plan_type": {
            "type": "string",
            "description": "Indicates if the staking plan requires a Blockdaemon validator launch or it is associated to a public validator.",
            "enum": [
              "white_label",
              "public"
            ]
          },
          "title": {
            "type": "string",
            "description": "Plan title for display purposes"
          },
          "total_reserved": {
            "description": "total number of reserved validators in a staking plan",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "PlanEthereum": {
        "type": "object",
        "description": "the Ethereum plan config for validator-plan",
        "required": [
          "id",
          "customer_id",
          "protocol",
          "network",
          "provider",
          "region",
          "minimum",
          "staking_plan_type",
          "title"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
            "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          },
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          },
          "network": {
            "type": "string",
            "description": "Protocol-specific network.",
            "enum": [
              "mainnet",
              "localnet",
              "goerli",
              "prater",
              "holesky",
              "testnet",
              "devnet",
              "kusama",
              "westend",
              "preprod",
              "fuji",
              "local"
            ]
          },
          "providers": {
            "type": "array",
            "description": "list of node providers",
            "minItems": 1,
            "items": {
              "type": "object",
              "description": "node provider",
              "required": [
                "provider",
                "region",
                "priority"
              ],
              "properties": {
                "provider": {
                  "description": "Cloud provider which will host the node.",
                  "x-go-type": "models.ProviderID",
                  "x-go-type-import": {
                    "path": "go.blockdaemon.com/nodeq-server/pkg/models",
                    "name": "models"
                  }
                },
                "region": {
                  "description": "cloud provider's zone code",
                  "type": "string"
                },
                "priority": {
                  "description": "reflect priority weighting. provider with weighted 1 will be the first one to try.",
                  "type": "integer",
                  "format": "uint8"
                }
              }
            }
          },
          "minimum": {
            "description": "minimum number of validators to be available. required for white label plans",
            "type": "integer",
            "format": "int64"
          },
          "config": {
            "type": "object",
            "description": "Ethereum staking plan config",
            "required": [
              "inventory_type"
            ],
            "properties": {
              "suggested_fee_recipient": {
                "type": "string",
                "description": "the suggested fee recipient address",
                "minimum": 1
              },
              "mev": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "ID of the MEV fee recipient. optional"
                  },
                  "enabled": {
                    "type": "boolean"
                  },
                  "relays": {
                    "type": "array",
                    "description": "List of Relay urls",
                    "items": {
                      "type": "string",
                      "format": "uri",
                      "description": "Relay url"
                    },
                    "minItems": 1
                  }
                }
              },
              "inventory_type": {
                "type": "string",
                "description": "Indicates if the quantity of validators for the staking plan is static or dynamic. Static is a once off deployment of a specified quantity of validators. Dynamic is where an initial quantity of validators is deployed with a threshold of available validators also configured. If the number of available validators within the validator inventory drops below the threshold (by being reserved as part of a stake intents API call) then the dynamic plan will automatically deploy the required infrastructure to bring the number of available validators above the threshold.",
                "enum": [
                  "static",
                  "dynamic"
                ]
              },
              "execution_client": {
                "type": "string",
                "description": "The execution client to use on the node",
                "enum": [
                  "geth",
                  "besu"
                ]
              }
            }
          },
          "validator_per_node": {
            "type": "integer",
            "format": "int32",
            "description": "number of validator per node"
          }
        }
      },
      "PlanEthereumConfig": {
        "type": "object",
        "description": "Ethereum staking plan config",
        "required": [
          "inventory_type"
        ],
        "properties": {
          "suggested_fee_recipient": {
            "type": "string",
            "description": "the suggested fee recipient address",
            "minimum": 1
          },
          "mev": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "ID of the MEV fee recipient. optional"
              },
              "enabled": {
                "type": "boolean"
              },
              "relays": {
                "type": "array",
                "description": "List of Relay urls",
                "items": {
                  "type": "string",
                  "format": "uri",
                  "description": "Relay url"
                },
                "minItems": 1
              }
            }
          },
          "inventory_type": {
            "type": "string",
            "description": "Indicates if the quantity of validators for the staking plan is static or dynamic. Static is a once off deployment of a specified quantity of validators. Dynamic is where an initial quantity of validators is deployed with a threshold of available validators also configured. If the number of available validators within the validator inventory drops below the threshold (by being reserved as part of a stake intents API call) then the dynamic plan will automatically deploy the required infrastructure to bring the number of available validators above the threshold.",
            "enum": [
              "static",
              "dynamic"
            ]
          },
          "execution_client": {
            "type": "string",
            "description": "The execution client to use on the node",
            "enum": [
              "geth",
              "besu"
            ]
          }
        }
      },
      "PlanCardanoConfig": {
        "type": "object",
        "description": "Cardano staking plan config",
        "required": [
          "stake_pool_id"
        ],
        "properties": {
          "stake_pool_id": {
            "type": "object",
            "required": [
              "mainnet",
              "preprod"
            ],
            "properties": {
              "mainnet": {
                "type": "string",
                "description": "bech32 encoded pool id.",
                "format": "bech32",
                "example": "pool1ev8fwfccn8gr0zcz3uyps0t0mcrefc6s95wjc6aed3ngc86y5rk"
              },
              "preprod": {
                "type": "string",
                "description": "bech32 encoded pool id.",
                "format": "bech32",
                "example": "pool1ev8fwfccn8gr0zcz3uyps0t0mcrefc6s95wjc6aed3ngc86y5rk"
              }
            }
          }
        }
      },
      "PlanId": {
        "type": "string",
        "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
        "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
      },
      "PlanInventoryType": {
        "type": "string",
        "description": "Indicates if the quantity of validators for the staking plan is static or dynamic. Static is a once off deployment of a specified quantity of validators. Dynamic is where an initial quantity of validators is deployed with a threshold of available validators also configured. If the number of available validators within the validator inventory drops below the threshold (by being reserved as part of a stake intents API call) then the dynamic plan will automatically deploy the required infrastructure to bring the number of available validators above the threshold.",
        "enum": [
          "static",
          "dynamic"
        ]
      },
      "PlanPolygonConfig": {
        "type": "object",
        "description": "Polygon staking plan config",
        "required": [
          "validator_share_address"
        ],
        "properties": {
          "validator_share_address": {
            "type": "object",
            "required": [
              "mainnet",
              "testnet"
            ],
            "properties": {
              "mainnet": {
                "type": "string",
                "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                "format": "hex",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
              },
              "testnet": {
                "type": "string",
                "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                "format": "hex",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
              }
            }
          }
        }
      },
      "PlanSolanaConfig": {
        "type": "object",
        "description": "Solana staking plan config",
        "required": [
          "validator_address"
        ],
        "properties": {
          "validator_address": {
            "type": "object",
            "required": [
              "mainnet",
              "testnet"
            ],
            "properties": {
              "mainnet": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              },
              "testnet": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              }
            }
          }
        }
      },
      "PlanStatus": {
        "type": "string",
        "description": "Staking API validator status",
        "x-go-type": "models.ValidatorStatus",
        "x-go-type-import": {
          "path": "go.blockdaemon.com/nodeq-server/pkg/models",
          "name": "models"
        }
      },
      "PlanTitle": {
        "type": "string",
        "description": "Plan title for display purposes"
      },
      "PolkadotAddress": {
        "type": "string",
        "description": "Polkadot account address in [SS58 format](https://wiki.polkadot.network/docs/learn-account-advanced#address-format).",
        "format": "base58",
        "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
        "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
      },
      "PolkadotNetwork": {
        "type": "string",
        "description": "Coin network",
        "enum": [
          "mainnet",
          "kusama",
          "westend"
        ]
      },
      "PolkadotDeactivationIntentResponse": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "deactivate_intent_id",
              "customer_id"
            ],
            "properties": {
              "deactivate_intent_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique idenifier for deactivate intent.",
                "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
              },
              "customer_id": {
                "type": "string",
                "description": "Unique identifier for a customer",
                "example": "SatoshiNakamoto-xUYJbPw9hw",
                "minimum": 1
              }
            }
          },
          {
            "type": "object",
            "description": "Response to a new deactivation intent request.",
            "required": [
              "protocol",
              "network",
              "polkadot"
            ],
            "properties": {
              "protocol": {
                "type": "string",
                "description": "Polkadot protocol",
                "enum": [
                  "polkadot"
                ]
              },
              "network": {
                "type": "string",
                "description": "Coin network",
                "enum": [
                  "mainnet",
                  "kusama",
                  "westend"
                ]
              },
              "polkadot": {
                "type": "object",
                "description": "Polkadot Deactivate Intent Response",
                "required": [
                  "unsigned_transaction",
                  "proxy_address",
                  "amount",
                  "deactivationType"
                ],
                "properties": {
                  "unsigned_transaction": {
                    "description": "Unsigned remove proxy transaction.\nOnce this transaction is signed, broadcasted to the network and included in the canonical history of the chain, the specified amount will be removed from the staked amount. If the amount is the entire stake, the proxy account of Blockdaemon will be unbound from the customer account.",
                    "type": "string",
                    "format": "base64",
                    "example": "0xd00410020c0606060202286bee1602008c16e19e94328985d65cb7e3245213892730dd0e841f6511478cb12f23a178330100000000"
                  },
                  "customer_address": {
                    "description": "Address of the customer account from which the proxy will be removed.",
                    "type": "string",
                    "format": "base58",
                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                  },
                  "controller_address": {
                    "description": "Address of the customer account from which the proxy will be removed.\nSame as customer_address. Deprecated - will be removed in a later version.",
                    "type": "string",
                    "format": "base58",
                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                  },
                  "proxy_address": {
                    "description": "Address of the proxy account that will be removed from the customer account.",
                    "type": "string",
                    "format": "base58",
                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                  },
                  "amount": {
                    "description": "Amount of DOT that will be unbond.",
                    "type": "string",
                    "pattern": "^[1-9]\\d+$",
                    "example": "100"
                  },
                  "deactivationType": {
                    "description": "Type of deactivation.\nThis can be either \"full\" or \"partial\". If \"full\" is specified, the entire stake will be removed from the proxy account. If \"partial\" is specified, the amount specified in the amount field will be removed from the proxy account.",
                    "type": "string",
                    "enum": [
                      "full",
                      "partial"
                    ]
                  }
                }
              }
            }
          }
        ]
      },
      "PolygonDeactivationIntentResponse": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "deactivate_intent_id",
              "customer_id"
            ],
            "properties": {
              "deactivate_intent_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique idenifier for deactivate intent.",
                "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
              },
              "customer_id": {
                "type": "string",
                "description": "Unique identifier for a customer",
                "example": "SatoshiNakamoto-xUYJbPw9hw",
                "minimum": 1
              }
            }
          },
          {
            "type": "object",
            "description": "Response to a new deactivation intent request.",
            "required": [
              "protocol",
              "network",
              "polygon"
            ],
            "properties": {
              "protocol": {
                "type": "string",
                "description": "Polygon protocol",
                "enum": [
                  "polygon"
                ]
              },
              "network": {
                "type": "string",
                "description": "Polygon network",
                "enum": [
                  "mainnet",
                  "goerli",
                  "prater"
                ]
              },
              "polygon": {
                "type": "object",
                "description": "Polygon Deactivate Intent",
                "required": [
                  "to",
                  "unsigned_transaction",
                  "amount",
                  "wallet_address"
                ],
                "properties": {
                  "to": {
                    "type": "string",
                    "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                    "format": "hex",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                  },
                  "unsigned_transaction": {
                    "type": "string",
                    "format": "base64",
                    "description": "Generated unsigned transaction smart contract call data.",
                    "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                  },
                  "amount": {
                    "type": "string",
                    "description": "Denomination of the cryptocurrency Polygon.",
                    "pattern": "^[1-9]\\d+$",
                    "example": "100"
                  },
                  "wallet_address": {
                    "type": "string",
                    "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                    "format": "hex",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                  }
                }
              }
            }
          }
        ]
      },
      "PolygonRewardsWithdrawIntent": {
        "type": "object",
        "required": [
          "to",
          "unsigned_transaction",
          "wallet_address"
        ],
        "properties": {
          "to": {
            "type": "string",
            "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
            "format": "hex",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
          },
          "unsigned_transaction": {
            "type": "string",
            "format": "base64",
            "description": "Generated unsigned transaction smart contract call data.",
            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
          },
          "wallet_address": {
            "type": "string",
            "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
            "format": "hex",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
          }
        }
      },
      "PolygonNetwork": {
        "type": "string",
        "description": "Polygon network",
        "enum": [
          "mainnet",
          "goerli",
          "prater"
        ]
      },
      "Protocol": {
        "type": "string",
        "description": "Blockchain protocol.",
        "enum": [
          "ethereum",
          "polkadot",
          "solana",
          "cosmos",
          "polygon",
          "near",
          "cardano",
          "avalanche",
          "binance"
        ]
      },
      "Provider": {
        "description": "Cloud provider which will host the node.",
        "x-go-type": "models.ProviderID",
        "x-go-type-import": {
          "path": "go.blockdaemon.com/nodeq-server/pkg/models",
          "name": "models"
        }
      },
      "PublicKey": {
        "type": "string",
        "description": "A BLS public Key.",
        "format": "base64",
        "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
      },
      "Quantity": {
        "type": "integer",
        "format": "int32",
        "description": "Number of validators to create that will share the same withdrawal credentials.",
        "minimum": 1
      },
      "Region": {
        "description": "cloud provider's zone code",
        "type": "string"
      },
      "RewardsRestakeIntent": {
        "type": "object",
        "required": [
          "protocol",
          "network",
          "customer_id"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          },
          "network": {
            "type": "string",
            "description": "Protocol-specific network.",
            "enum": [
              "mainnet",
              "localnet",
              "goerli",
              "prater",
              "holesky",
              "testnet",
              "devnet",
              "kusama",
              "westend",
              "preprod",
              "fuji",
              "local"
            ]
          },
          "polygon": {
            "type": "object",
            "required": [
              "to",
              "unsigned_transaction",
              "wallet_address"
            ],
            "properties": {
              "to": {
                "type": "string",
                "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                "format": "hex",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
              },
              "unsigned_transaction": {
                "type": "string",
                "format": "base64",
                "description": "Generated unsigned transaction smart contract call data.",
                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
              },
              "wallet_address": {
                "type": "string",
                "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                "format": "hex",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
              }
            }
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          }
        }
      },
      "RewardsRestakeIntentPolygon": {
        "type": "object",
        "required": [
          "to",
          "unsigned_transaction",
          "wallet_address"
        ],
        "properties": {
          "to": {
            "type": "string",
            "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
            "format": "hex",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
          },
          "unsigned_transaction": {
            "type": "string",
            "format": "base64",
            "description": "Generated unsigned transaction smart contract call data.",
            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
          },
          "wallet_address": {
            "type": "string",
            "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
            "format": "hex",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
          }
        }
      },
      "RewardsWithdrawIntentPolygon": {
        "type": "object",
        "required": [
          "protocol",
          "network",
          "polygon",
          "customer_id"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Polygon protocol",
            "enum": [
              "polygon"
            ]
          },
          "network": {
            "type": "string",
            "description": "Polygon network",
            "enum": [
              "mainnet",
              "goerli",
              "prater"
            ]
          },
          "polygon": {
            "type": "object",
            "required": [
              "to",
              "unsigned_transaction",
              "wallet_address"
            ],
            "properties": {
              "to": {
                "type": "string",
                "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                "format": "hex",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
              },
              "unsigned_transaction": {
                "type": "string",
                "format": "base64",
                "description": "Generated unsigned transaction smart contract call data.",
                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
              },
              "wallet_address": {
                "type": "string",
                "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                "format": "hex",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
              }
            }
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          }
        }
      },
      "RewardsWithdrawIntentCardano": {
        "type": "object",
        "required": [
          "protocol",
          "network",
          "cardano",
          "customer_id"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Cardano protocol",
            "enum": [
              "cardano"
            ]
          },
          "network": {
            "type": "string",
            "description": "Cardano network",
            "enum": [
              "mainnet",
              "preprod",
              "localnet"
            ]
          },
          "cardano": {
            "type": "object",
            "required": [
              "base_address",
              "rewards_amount",
              "unsigned_transaction"
            ],
            "properties": {
              "base_address": {
                "type": "string",
                "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
                "format": "bech32",
                "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
              },
              "rewards_amount": {
                "type": "string",
                "description": "Denomination of the cryptocurrency Cardano.",
                "pattern": "^[1-9]\\d+$",
                "example": "100"
              },
              "unsigned_transaction": {
                "type": "string",
                "format": "base64",
                "description": "Generated unsigned transaction smart contract call data.",
                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
              }
            }
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          }
        }
      },
      "SolanaDeactivationIntentResponse": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "deactivate_intent_id",
              "customer_id"
            ],
            "properties": {
              "deactivate_intent_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique idenifier for deactivate intent.",
                "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
              },
              "customer_id": {
                "type": "string",
                "description": "Unique identifier for a customer",
                "example": "SatoshiNakamoto-xUYJbPw9hw",
                "minimum": 1
              }
            }
          },
          {
            "type": "object",
            "description": "Response to a new deactivation intent request.",
            "required": [
              "network",
              "protocol",
              "solana"
            ],
            "properties": {
              "protocol": {
                "type": "string",
                "description": "Solana protocol",
                "enum": [
                  "solana"
                ]
              },
              "network": {
                "type": "string",
                "description": "Solana network",
                "enum": [
                  "mainnet",
                  "testnet"
                ]
              },
              "solana": {
                "type": "object",
                "description": "Result of the new Deactivate Intent request.",
                "required": [
                  "total_deactivated_amount",
                  "deactivates",
                  "splits"
                ],
                "properties": {
                  "deactivates": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "Result of the deactivation transaction request",
                      "required": [
                        "unsigned_transaction",
                        "stake_account_authority",
                        "stake_account_address",
                        "withdrawal_authority",
                        "stake_id",
                        "amount",
                        "expiration_time"
                      ],
                      "properties": {
                        "unsigned_transaction": {
                          "type": "string",
                          "format": "base64",
                          "description": "Generated unsigned transaction smart contract call data.",
                          "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                        },
                        "stake_account_authority": {
                          "type": "string",
                          "description": "Public Key of an asymmetric key-pair.",
                          "format": "base58",
                          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                        },
                        "stake_account_address": {
                          "type": "string",
                          "description": "Public Key of an asymmetric key-pair.",
                          "format": "base58",
                          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                        },
                        "withdrawal_authority": {
                          "type": "string",
                          "description": "Public Key of an asymmetric key-pair.",
                          "format": "base58",
                          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                        },
                        "stake_id": {
                          "description": "Unique stake identifier.",
                          "type": "string",
                          "format": "base58",
                          "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                        },
                        "amount": {
                          "type": "string",
                          "description": "Denomination of the cryptocurrency Solana.",
                          "pattern": "^[1-9]\\d+$",
                          "example": "100"
                        },
                        "expiration_time": {
                          "type": "integer",
                          "description": "Transaction expiration time",
                          "format": "int64",
                          "example": 1689939023
                        }
                      }
                    }
                  },
                  "splits": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "Result of the split transaction request",
                      "required": [
                        "unsigned_transaction",
                        "stake_account_authority",
                        "new_stake_account_address",
                        "new_stake_id",
                        "splitted_stake_account_address",
                        "splitted_stake_id",
                        "amount"
                      ],
                      "properties": {
                        "unsigned_transaction": {
                          "type": "string",
                          "format": "base64",
                          "description": "Generated unsigned transaction smart contract call data.",
                          "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                        },
                        "stake_account_authority": {
                          "type": "string",
                          "description": "Public Key of an asymmetric key-pair.",
                          "format": "base58",
                          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                        },
                        "new_stake_account_address": {
                          "type": "string",
                          "description": "Public Key of an asymmetric key-pair.",
                          "format": "base58",
                          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                        },
                        "new_stake_id": {
                          "description": "Unique stake identifier.",
                          "type": "string",
                          "format": "base58",
                          "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                        },
                        "splitted_stake_account_address": {
                          "type": "string",
                          "description": "Public Key of an asymmetric key-pair.",
                          "format": "base58",
                          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                        },
                        "splitted_stake_id": {
                          "description": "Unique stake identifier.",
                          "type": "string",
                          "format": "base58",
                          "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                        },
                        "amount": {
                          "type": "string",
                          "description": "Denomination of the cryptocurrency Solana.",
                          "pattern": "^[1-9]\\d+$",
                          "example": "100"
                        }
                      }
                    }
                  },
                  "total_deactivated_amount": {
                    "type": "string",
                    "description": "Denomination of the cryptocurrency Solana.",
                    "pattern": "^[1-9]\\d+$",
                    "example": "100"
                  }
                }
              }
            }
          }
        ]
      },
      "SolanaNetwork": {
        "type": "string",
        "description": "Solana network",
        "enum": [
          "mainnet",
          "testnet"
        ]
      },
      "SolanaPublicKey": {
        "type": "string",
        "description": "Public Key of an asymmetric key-pair.",
        "format": "base58",
        "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
        "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
      },
      "SplitStakeSolana": {
        "type": "object",
        "description": "Result of the split transaction request",
        "required": [
          "unsigned_transaction",
          "stake_account_authority",
          "new_stake_account_address",
          "new_stake_id",
          "splitted_stake_account_address",
          "splitted_stake_id",
          "amount"
        ],
        "properties": {
          "unsigned_transaction": {
            "type": "string",
            "format": "base64",
            "description": "Generated unsigned transaction smart contract call data.",
            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
          },
          "stake_account_authority": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "new_stake_account_address": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "new_stake_id": {
            "description": "Unique stake identifier.",
            "type": "string",
            "format": "base58",
            "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
          },
          "splitted_stake_account_address": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "splitted_stake_id": {
            "description": "Unique stake identifier.",
            "type": "string",
            "format": "base58",
            "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
          },
          "amount": {
            "type": "string",
            "description": "Denomination of the cryptocurrency Solana.",
            "pattern": "^[1-9]\\d+$",
            "example": "100"
          }
        }
      },
      "Stake": {
        "type": "object",
        "description": "Details of a stake.",
        "required": [
          "id",
          "stake_intent_id",
          "protocol",
          "network",
          "status"
        ],
        "properties": {
          "id": {
            "description": "Unique stake identifier.",
            "type": "string",
            "format": "base58",
            "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
          },
          "stake_intent_id": {
            "type": "string",
            "format": "base58",
            "description": "Unique idenifier for a group of stakes.",
            "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
          },
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          },
          "network": {
            "type": "string",
            "description": "Protocol-specific network.",
            "enum": [
              "mainnet",
              "localnet",
              "goerli",
              "prater",
              "holesky",
              "testnet",
              "devnet",
              "kusama",
              "westend",
              "preprod",
              "fuji",
              "local"
            ]
          },
          "ethereum": {
            "type": "object",
            "description": "Ethereum Stake",
            "required": [
              "amount",
              "validator_public_key",
              "withdrawal_credentials"
            ],
            "properties": {
              "amount": {
                "type": "string",
                "description": "Amount of ETH (denominated in Gwei).",
                "pattern": "^[1-9]\\d{10,}$",
                "example": "32000000000"
              },
              "validator_public_key": {
                "type": "string",
                "description": "A BLS public Key.",
                "format": "base64",
                "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
              },
              "withdrawal_credentials": {
                "type": "string",
                "format": "hex",
                "pattern": "^0x0(0|1)[a-fA-F0-9]{62}$",
                "example": "0x0092c20062cee70389f1cb4fa566a2be5e2319ff43965db26dbaa3ce90b9df99",
                "description": "Hexadecimal encoded [withdrawal credentials](https://github.com/ethereum/consensus-specs/blob/master/specs/phase0/validator.md#withdrawal-credentials) which can be either a BLS public key or an Ethereum account address.\n\nThis parameter currently accepts ETH1 and BLS withdrawal credentials, but it is considered deprecated after the Capella/Shanghai fork. All users are now advised to use an ETH1 withdrawal address, specified through the `withdrawal_address` parameter as this is required to enable the ongoing accrual of rewards.\n\nFor more information regarding creating withdrawal credentials, please see the official [Ethereum Launchpad FAQ](https://launchpad.ethereum.org/en/faq#withdrawal-credentials)."
              }
            }
          },
          "solana": {
            "type": "object",
            "description": "Solana Stake",
            "required": [
              "amount",
              "validator_public_key",
              "withdrawal_authority",
              "staking_authority"
            ],
            "properties": {
              "amount": {
                "type": "string",
                "description": "Denomination of the cryptocurrency Solana.",
                "pattern": "^[1-9]\\d+$",
                "example": "100"
              },
              "validator_public_key": {
                "type": "string",
                "description": "A BLS public Key.",
                "format": "base64",
                "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
              },
              "withdrawal_authority": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              },
              "staking_authority": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              }
            }
          },
          "polkadot": {
            "type": "object",
            "description": "Polkadot Stake",
            "required": [
              "amount",
              "validator_public_key"
            ],
            "properties": {
              "amount": {
                "type": "string",
                "description": "Denomination of the cryptocurrency Polkadot.",
                "pattern": "^[1-9]\\d+$",
                "example": "100"
              },
              "validator_public_key": {
                "type": "string",
                "description": "A BLS public Key.",
                "format": "base64",
                "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
              }
            }
          },
          "polygon": {
            "type": "object",
            "description": "Polygon Stake",
            "required": [
              "to",
              "unsigned_transaction",
              "amount",
              "wallet_address"
            ],
            "properties": {
              "to": {
                "type": "string",
                "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                "format": "hex",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
              },
              "unsigned_transaction": {
                "type": "string",
                "format": "base64",
                "description": "Generated unsigned transaction smart contract call data.",
                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
              },
              "amount": {
                "type": "string",
                "description": "Denomination of the cryptocurrency Polygon.",
                "pattern": "^[1-9]\\d+$",
                "example": "100"
              },
              "wallet_address": {
                "type": "string",
                "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                "format": "hex",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
              }
            }
          }
        }
      },
      "StakeEthereum": {
        "type": "object",
        "description": "Ethereum Stake",
        "required": [
          "amount",
          "validator_public_key",
          "withdrawal_credentials"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "description": "Amount of ETH (denominated in Gwei).",
            "pattern": "^[1-9]\\d{10,}$",
            "example": "32000000000"
          },
          "validator_public_key": {
            "type": "string",
            "description": "A BLS public Key.",
            "format": "base64",
            "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
          },
          "withdrawal_credentials": {
            "type": "string",
            "format": "hex",
            "pattern": "^0x0(0|1)[a-fA-F0-9]{62}$",
            "example": "0x0092c20062cee70389f1cb4fa566a2be5e2319ff43965db26dbaa3ce90b9df99",
            "description": "Hexadecimal encoded [withdrawal credentials](https://github.com/ethereum/consensus-specs/blob/master/specs/phase0/validator.md#withdrawal-credentials) which can be either a BLS public key or an Ethereum account address.\n\nThis parameter currently accepts ETH1 and BLS withdrawal credentials, but it is considered deprecated after the Capella/Shanghai fork. All users are now advised to use an ETH1 withdrawal address, specified through the `withdrawal_address` parameter as this is required to enable the ongoing accrual of rewards.\n\nFor more information regarding creating withdrawal credentials, please see the official [Ethereum Launchpad FAQ](https://launchpad.ethereum.org/en/faq#withdrawal-credentials)."
          }
        }
      },
      "StakeId": {
        "description": "Unique stake identifier.",
        "type": "string",
        "format": "base58",
        "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
      },
      "StakeIntent": {
        "type": "object",
        "required": [
          "stake_intent_id",
          "protocol",
          "network",
          "customer_id"
        ],
        "properties": {
          "stake_intent_id": {
            "type": "string",
            "format": "base58",
            "description": "Unique idenifier for a group of stakes.",
            "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
          },
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          },
          "network": {
            "type": "string",
            "description": "Protocol-specific network.",
            "enum": [
              "mainnet",
              "localnet",
              "goerli",
              "prater",
              "holesky",
              "testnet",
              "devnet",
              "kusama",
              "westend",
              "preprod",
              "fuji",
              "local"
            ]
          },
          "ethereum": {
            "type": "object",
            "description": "Ethereum Stake Intent response",
            "required": [
              "stakes",
              "contract_address",
              "unsigned_transaction",
              "estimated_gas",
              "expiration_time"
            ],
            "properties": {
              "stakes": {
                "description": "Stakes being made.",
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "Individual Ethereum Stake Response",
                  "required": [
                    "stake_id",
                    "amount",
                    "validator_public_key",
                    "withdrawal_credentials",
                    "fee_recipient"
                  ],
                  "properties": {
                    "stake_id": {
                      "description": "Unique stake identifier.",
                      "type": "string",
                      "format": "base58",
                      "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                    },
                    "amount": {
                      "type": "string",
                      "description": "Amount of ETH (denominated in Gwei).",
                      "pattern": "^[1-9]\\d{10,}$",
                      "example": "32000000000"
                    },
                    "validator_public_key": {
                      "type": "string",
                      "description": "A BLS public Key.",
                      "format": "base64",
                      "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                    },
                    "withdrawal_credentials": {
                      "type": "string",
                      "format": "hex",
                      "pattern": "^0x0(0|1)[a-fA-F0-9]{62}$",
                      "example": "0x0092c20062cee70389f1cb4fa566a2be5e2319ff43965db26dbaa3ce90b9df99",
                      "description": "Hexadecimal encoded [withdrawal credentials](https://github.com/ethereum/consensus-specs/blob/master/specs/phase0/validator.md#withdrawal-credentials) which can be either a BLS public key or an Ethereum account address.\n\nThis parameter currently accepts ETH1 and BLS withdrawal credentials, but it is considered deprecated after the Capella/Shanghai fork. All users are now advised to use an ETH1 withdrawal address, specified through the `withdrawal_address` parameter as this is required to enable the ongoing accrual of rewards.\n\nFor more information regarding creating withdrawal credentials, please see the official [Ethereum Launchpad FAQ](https://launchpad.ethereum.org/en/faq#withdrawal-credentials)."
                    },
                    "fee_recipient": {
                      "type": "string",
                      "description": "An Ethereum address to receive transaction fees from published blocks. 20-bytes, hex encoded with 0x prefix, case insensitive.",
                      "example": "0x93247f2209abcacf57b75a51dafae777f9dd38bc",
                      "pattern": "^0x[a-fA-F0-9]{40}$"
                    }
                  }
                }
              },
              "contract_address": {
                "type": "string",
                "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                "format": "hex",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
              },
              "unsigned_transaction": {
                "type": "string",
                "format": "base64",
                "description": "Generated unsigned transaction smart contract call data.",
                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
              },
              "estimated_gas": {
                "type": "integer",
                "description": "Gas estimation of the transaction",
                "format": "uint64",
                "example": 1001
              },
              "expiration_time": {
                "type": "integer",
                "description": "Transaction expiration time",
                "format": "int64",
                "example": 1689939023
              }
            }
          },
          "polkadot": {
            "type": "object",
            "description": "Polkadot Stake Intent Response",
            "required": [
              "stake_id",
              "unsigned_transaction",
              "proxy_address"
            ],
            "properties": {
              "unsigned_transaction": {
                "description": "Unsigned transaction that bonds a Blockdaemon's proxy account to the given customer account.\nOnce this transaction is signed, broadcasted to the network and included in the canonical history of the chain, the proxy account will be associated with the customer account.",
                "type": "string",
                "format": "base64",
                "example": "0xa4041601008c16e19e94328985d65cb7e3245213892730dd0e841f6511478cb12f23a178330100000000"
              },
              "customer_address": {
                "description": "Address of the customer account to associate with the proxy account.",
                "type": "string",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              },
              "controller_address": {
                "description": "Address of the customer account to associate with the proxy account.\nSame as customer_address. Deprecated - will be removed in a later version.",
                "type": "string",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              },
              "proxy_address": {
                "description": "Address of the proxy account to associate with the customer account.",
                "type": "string",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              }
            }
          },
          "solana": {
            "type": "object",
            "description": "Solana Stake Intent response",
            "required": [
              "stake_id",
              "amount",
              "validator_public_key",
              "withdrawal_authority",
              "staking_authority",
              "stake_account_public_key",
              "unsigned_transaction",
              "expiration_time"
            ],
            "properties": {
              "stake_id": {
                "description": "Unique stake identifier.",
                "type": "string",
                "format": "base58",
                "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
              },
              "amount": {
                "type": "string",
                "description": "Denomination of the cryptocurrency Solana.",
                "pattern": "^[1-9]\\d+$",
                "example": "100"
              },
              "validator_public_key": {
                "type": "string",
                "description": "A BLS public Key.",
                "format": "base64",
                "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
              },
              "staking_authority": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              },
              "withdrawal_authority": {
                "type": "string",
                "description": "A BLS public Key.",
                "format": "base64",
                "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
              },
              "stake_account_public_key": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              },
              "unsigned_transaction": {
                "type": "string",
                "format": "base64",
                "description": "Generated unsigned transaction smart contract call data.",
                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
              },
              "expiration_time": {
                "type": "integer",
                "description": "Transaction expiration time",
                "format": "int64",
                "example": 1689939023
              }
            }
          },
          "cosmos": {
            "type": "object",
            "description": "Cosmos Stake Intent response",
            "required": [
              "unsigned_transaction",
              "amount",
              "delegator_address",
              "validator_address"
            ],
            "properties": {
              "unsigned_transaction": {
                "type": "string",
                "format": "base64",
                "description": "Generated unsigned transaction smart contract call data.",
                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
              },
              "delegator_address": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "bech32",
                "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
              },
              "validator_address": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "bech32",
                "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
              },
              "amount": {
                "type": "string",
                "description": "Denomination of the cryptocurrency Cosmos.",
                "pattern": "^[1-9]\\d+$",
                "example": "100"
              }
            }
          },
          "binance": {
            "type": "object",
            "description": "Binance Stake Intent response",
            "required": [
              "unsigned_transaction",
              "amount",
              "delegator_address",
              "validator_address"
            ],
            "properties": {
              "unsigned_transaction": {
                "type": "string",
                "format": "base64",
                "description": "Generated unsigned transaction smart contract call data.",
                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
              },
              "delegator_address": {
                "type": "string",
                "description": "Binance beacon chain address.",
                "format": "bech32",
                "pattern": "^bnb[0-9a-z]+$",
                "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
              },
              "validator_address": {
                "type": "string",
                "description": "Binance beacon chain validator address.",
                "format": "bech32",
                "pattern": "^bva[0-9a-zA-Z]*$",
                "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
              },
              "amount": {
                "type": "string",
                "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
                "pattern": "^[1-9]\\d+$",
                "example": "10000000000"
              }
            }
          },
          "polygon": {
            "type": "object",
            "description": "Polygon Stake Intent",
            "required": [
              "to",
              "unsigned_transaction",
              "amount",
              "wallet_address"
            ],
            "properties": {
              "to": {
                "type": "string",
                "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                "format": "hex",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
              },
              "unsigned_transaction": {
                "type": "string",
                "format": "base64",
                "description": "Generated unsigned transaction smart contract call data.",
                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
              },
              "amount": {
                "type": "string",
                "description": "Denomination of the cryptocurrency Polygon.",
                "pattern": "^[1-9]\\d+$",
                "example": "100"
              },
              "wallet_address": {
                "type": "string",
                "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                "format": "hex",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
              }
            }
          },
          "near": {
            "type": "object",
            "description": "NEAR Protocol Stake Intent",
            "required": [
              "to",
              "unsigned_transaction",
              "amount",
              "wallet_address",
              "public_key",
              "expiration_time"
            ],
            "properties": {
              "to": {
                "type": "string",
                "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                "example": "alice.near"
              },
              "unsigned_transaction": {
                "type": "string",
                "format": "base64",
                "description": "Generated unsigned transaction smart contract call data.",
                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
              },
              "amount": {
                "type": "string",
                "description": "Denomination of NEAR Protocol.",
                "pattern": "^[1-9]\\d+$",
                "example": "100000000000000000000000000"
              },
              "wallet_address": {
                "type": "string",
                "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                "example": "alice.near"
              },
              "public_key": {
                "type": "string",
                "description": "Base58 encoded public key prefixed by ed25519, associated with the private key that will be used to sign the transaction.",
                "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
                "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
              },
              "expiration_time": {
                "type": "integer",
                "description": "Transaction expiration time",
                "format": "int64",
                "example": 1689939023
              }
            }
          },
          "cardano": {
            "type": "object",
            "description": "Cardano Protocol Stake Intent",
            "required": [
              "pool_id",
              "unsigned_transaction",
              "base_address"
            ],
            "properties": {
              "pool_id": {
                "type": "string",
                "description": "bech32 encoded pool id.",
                "format": "bech32",
                "example": "pool1ev8fwfccn8gr0zcz3uyps0t0mcrefc6s95wjc6aed3ngc86y5rk"
              },
              "unsigned_transaction": {
                "type": "string",
                "format": "base64",
                "description": "Generated unsigned transaction smart contract call data.",
                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
              },
              "base_address": {
                "type": "string",
                "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
                "format": "bech32",
                "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
              }
            }
          },
          "avalanche": {
            "type": "object",
            "description": "Avalanche Stake Intent",
            "required": [
              "validator_address",
              "unsigned_transaction",
              "amount",
              "delegator_address",
              "start_time",
              "end_time"
            ],
            "properties": {
              "validator_address": {
                "type": "string",
                "description": "Avalanche validator node address",
                "pattern": "^NodeID-[A-Za-z0-9]{43}$",
                "example": "NodeID-B19uSxUKerjjnA215czAJLHMqNJMbsAMWuSxUKerjjW"
              },
              "unsigned_transaction": {
                "type": "string",
                "format": "base64",
                "description": "Generated unsigned transaction smart contract call data.",
                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
              },
              "amount": {
                "type": "string",
                "description": "Denomination of Avalanche.",
                "pattern": "^[1-9]\\d+$",
                "example": "10000000000"
              },
              "delegator_address": {
                "type": "string",
                "description": "Avalanche platform chain address",
                "pattern": "^([P]|[a-km-zA-HJ-NP-Z1-9]{36,72})-[a-zA-Z]{1,83}1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{38}$",
                "example": "P-fuji1g2g0jxcfn5sp59ld7g0t0tp4jrqppvqcfqc7hy"
              },
              "start_time": {
                "description": "Avalanche staking start time",
                "type": "integer",
                "format": "int64",
                "example": 1689939023
              },
              "end_time": {
                "description": "Avalanche staking end time",
                "type": "integer",
                "format": "int64",
                "example": 1689939023
              }
            }
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          },
          "plan_id": {
            "type": "string",
            "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
            "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
          },
          "created_at": {
            "description": "Timestamp",
            "type": "string",
            "example": "2023-01-11 06:22:46.182"
          },
          "updated_at": {
            "description": "Timestamp",
            "type": "string",
            "example": "2023-01-11 06:22:46.182"
          }
        }
      },
      "StakeIntentCardano": {
        "type": "object",
        "description": "Cardano Protocol Stake Intent",
        "required": [
          "pool_id",
          "unsigned_transaction",
          "base_address"
        ],
        "properties": {
          "pool_id": {
            "type": "string",
            "description": "bech32 encoded pool id.",
            "format": "bech32",
            "example": "pool1ev8fwfccn8gr0zcz3uyps0t0mcrefc6s95wjc6aed3ngc86y5rk"
          },
          "unsigned_transaction": {
            "type": "string",
            "format": "base64",
            "description": "Generated unsigned transaction smart contract call data.",
            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
          },
          "base_address": {
            "type": "string",
            "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
            "format": "bech32",
            "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
          }
        }
      },
      "StakeIntentCosmos": {
        "type": "object",
        "description": "Cosmos Stake Intent response",
        "required": [
          "unsigned_transaction",
          "amount",
          "delegator_address",
          "validator_address"
        ],
        "properties": {
          "unsigned_transaction": {
            "type": "string",
            "format": "base64",
            "description": "Generated unsigned transaction smart contract call data.",
            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
          },
          "delegator_address": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "bech32",
            "pattern": "^cosmos[1-9a-zA-Z]{39}$",
            "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
          },
          "validator_address": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "bech32",
            "pattern": "^cosmos[1-9a-zA-Z]{39}$",
            "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
          },
          "amount": {
            "type": "string",
            "description": "Denomination of the cryptocurrency Cosmos.",
            "pattern": "^[1-9]\\d+$",
            "example": "100"
          }
        }
      },
      "StakeIntentBinance": {
        "type": "object",
        "description": "Binance Stake Intent response",
        "required": [
          "unsigned_transaction",
          "amount",
          "delegator_address",
          "validator_address"
        ],
        "properties": {
          "unsigned_transaction": {
            "type": "string",
            "format": "base64",
            "description": "Generated unsigned transaction smart contract call data.",
            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
          },
          "delegator_address": {
            "type": "string",
            "description": "Binance beacon chain address.",
            "format": "bech32",
            "pattern": "^bnb[0-9a-z]+$",
            "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
          },
          "validator_address": {
            "type": "string",
            "description": "Binance beacon chain validator address.",
            "format": "bech32",
            "pattern": "^bva[0-9a-zA-Z]*$",
            "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
          },
          "amount": {
            "type": "string",
            "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
            "pattern": "^[1-9]\\d+$",
            "example": "10000000000"
          }
        }
      },
      "StakeIntentEthereum": {
        "type": "object",
        "description": "Ethereum Stake Intent response",
        "required": [
          "stakes",
          "contract_address",
          "unsigned_transaction",
          "estimated_gas",
          "expiration_time"
        ],
        "properties": {
          "stakes": {
            "description": "Stakes being made.",
            "type": "array",
            "items": {
              "type": "object",
              "description": "Individual Ethereum Stake Response",
              "required": [
                "stake_id",
                "amount",
                "validator_public_key",
                "withdrawal_credentials",
                "fee_recipient"
              ],
              "properties": {
                "stake_id": {
                  "description": "Unique stake identifier.",
                  "type": "string",
                  "format": "base58",
                  "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                },
                "amount": {
                  "type": "string",
                  "description": "Amount of ETH (denominated in Gwei).",
                  "pattern": "^[1-9]\\d{10,}$",
                  "example": "32000000000"
                },
                "validator_public_key": {
                  "type": "string",
                  "description": "A BLS public Key.",
                  "format": "base64",
                  "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                },
                "withdrawal_credentials": {
                  "type": "string",
                  "format": "hex",
                  "pattern": "^0x0(0|1)[a-fA-F0-9]{62}$",
                  "example": "0x0092c20062cee70389f1cb4fa566a2be5e2319ff43965db26dbaa3ce90b9df99",
                  "description": "Hexadecimal encoded [withdrawal credentials](https://github.com/ethereum/consensus-specs/blob/master/specs/phase0/validator.md#withdrawal-credentials) which can be either a BLS public key or an Ethereum account address.\n\nThis parameter currently accepts ETH1 and BLS withdrawal credentials, but it is considered deprecated after the Capella/Shanghai fork. All users are now advised to use an ETH1 withdrawal address, specified through the `withdrawal_address` parameter as this is required to enable the ongoing accrual of rewards.\n\nFor more information regarding creating withdrawal credentials, please see the official [Ethereum Launchpad FAQ](https://launchpad.ethereum.org/en/faq#withdrawal-credentials)."
                },
                "fee_recipient": {
                  "type": "string",
                  "description": "An Ethereum address to receive transaction fees from published blocks. 20-bytes, hex encoded with 0x prefix, case insensitive.",
                  "example": "0x93247f2209abcacf57b75a51dafae777f9dd38bc",
                  "pattern": "^0x[a-fA-F0-9]{40}$"
                }
              }
            }
          },
          "contract_address": {
            "type": "string",
            "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
            "format": "hex",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
          },
          "unsigned_transaction": {
            "type": "string",
            "format": "base64",
            "description": "Generated unsigned transaction smart contract call data.",
            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
          },
          "estimated_gas": {
            "type": "integer",
            "description": "Gas estimation of the transaction",
            "format": "uint64",
            "example": 1001
          },
          "expiration_time": {
            "type": "integer",
            "description": "Transaction expiration time",
            "format": "int64",
            "example": 1689939023
          }
        }
      },
      "StakeIntentEthereumStake": {
        "type": "object",
        "description": "Individual Ethereum Stake Response",
        "required": [
          "stake_id",
          "amount",
          "validator_public_key",
          "withdrawal_credentials",
          "fee_recipient"
        ],
        "properties": {
          "stake_id": {
            "description": "Unique stake identifier.",
            "type": "string",
            "format": "base58",
            "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
          },
          "amount": {
            "type": "string",
            "description": "Amount of ETH (denominated in Gwei).",
            "pattern": "^[1-9]\\d{10,}$",
            "example": "32000000000"
          },
          "validator_public_key": {
            "type": "string",
            "description": "A BLS public Key.",
            "format": "base64",
            "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
          },
          "withdrawal_credentials": {
            "type": "string",
            "format": "hex",
            "pattern": "^0x0(0|1)[a-fA-F0-9]{62}$",
            "example": "0x0092c20062cee70389f1cb4fa566a2be5e2319ff43965db26dbaa3ce90b9df99",
            "description": "Hexadecimal encoded [withdrawal credentials](https://github.com/ethereum/consensus-specs/blob/master/specs/phase0/validator.md#withdrawal-credentials) which can be either a BLS public key or an Ethereum account address.\n\nThis parameter currently accepts ETH1 and BLS withdrawal credentials, but it is considered deprecated after the Capella/Shanghai fork. All users are now advised to use an ETH1 withdrawal address, specified through the `withdrawal_address` parameter as this is required to enable the ongoing accrual of rewards.\n\nFor more information regarding creating withdrawal credentials, please see the official [Ethereum Launchpad FAQ](https://launchpad.ethereum.org/en/faq#withdrawal-credentials)."
          },
          "fee_recipient": {
            "type": "string",
            "description": "An Ethereum address to receive transaction fees from published blocks. 20-bytes, hex encoded with 0x prefix, case insensitive.",
            "example": "0x93247f2209abcacf57b75a51dafae777f9dd38bc",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          }
        }
      },
      "StakeIntentId": {
        "type": "string",
        "format": "base58",
        "description": "Unique idenifier for a group of stakes.",
        "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
      },
      "StakeIntentList": {
        "type": "object",
        "required": [
          "stake_intents",
          "pagination"
        ],
        "properties": {
          "stake_intents": {
            "type": "array",
            "description": "List of stake intents",
            "items": {
              "type": "object",
              "required": [
                "stake_intent_id",
                "protocol",
                "network",
                "customer_id"
              ],
              "properties": {
                "stake_intent_id": {
                  "type": "string",
                  "format": "base58",
                  "description": "Unique idenifier for a group of stakes.",
                  "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
                },
                "protocol": {
                  "type": "string",
                  "description": "Blockchain protocol.",
                  "enum": [
                    "ethereum",
                    "polkadot",
                    "solana",
                    "cosmos",
                    "polygon",
                    "near",
                    "cardano",
                    "avalanche",
                    "binance"
                  ]
                },
                "network": {
                  "type": "string",
                  "description": "Protocol-specific network.",
                  "enum": [
                    "mainnet",
                    "localnet",
                    "goerli",
                    "prater",
                    "holesky",
                    "testnet",
                    "devnet",
                    "kusama",
                    "westend",
                    "preprod",
                    "fuji",
                    "local"
                  ]
                },
                "ethereum": {
                  "type": "object",
                  "description": "Ethereum Stake Intent response",
                  "required": [
                    "stakes",
                    "contract_address",
                    "unsigned_transaction",
                    "estimated_gas",
                    "expiration_time"
                  ],
                  "properties": {
                    "stakes": {
                      "description": "Stakes being made.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Individual Ethereum Stake Response",
                        "required": [
                          "stake_id",
                          "amount",
                          "validator_public_key",
                          "withdrawal_credentials",
                          "fee_recipient"
                        ],
                        "properties": {
                          "stake_id": {
                            "description": "Unique stake identifier.",
                            "type": "string",
                            "format": "base58",
                            "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                          },
                          "amount": {
                            "type": "string",
                            "description": "Amount of ETH (denominated in Gwei).",
                            "pattern": "^[1-9]\\d{10,}$",
                            "example": "32000000000"
                          },
                          "validator_public_key": {
                            "type": "string",
                            "description": "A BLS public Key.",
                            "format": "base64",
                            "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                          },
                          "withdrawal_credentials": {
                            "type": "string",
                            "format": "hex",
                            "pattern": "^0x0(0|1)[a-fA-F0-9]{62}$",
                            "example": "0x0092c20062cee70389f1cb4fa566a2be5e2319ff43965db26dbaa3ce90b9df99",
                            "description": "Hexadecimal encoded [withdrawal credentials](https://github.com/ethereum/consensus-specs/blob/master/specs/phase0/validator.md#withdrawal-credentials) which can be either a BLS public key or an Ethereum account address.\n\nThis parameter currently accepts ETH1 and BLS withdrawal credentials, but it is considered deprecated after the Capella/Shanghai fork. All users are now advised to use an ETH1 withdrawal address, specified through the `withdrawal_address` parameter as this is required to enable the ongoing accrual of rewards.\n\nFor more information regarding creating withdrawal credentials, please see the official [Ethereum Launchpad FAQ](https://launchpad.ethereum.org/en/faq#withdrawal-credentials)."
                          },
                          "fee_recipient": {
                            "type": "string",
                            "description": "An Ethereum address to receive transaction fees from published blocks. 20-bytes, hex encoded with 0x prefix, case insensitive.",
                            "example": "0x93247f2209abcacf57b75a51dafae777f9dd38bc",
                            "pattern": "^0x[a-fA-F0-9]{40}$"
                          }
                        }
                      }
                    },
                    "contract_address": {
                      "type": "string",
                      "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                      "format": "hex",
                      "pattern": "^0x[a-fA-F0-9]{40}$",
                      "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                    },
                    "unsigned_transaction": {
                      "type": "string",
                      "format": "base64",
                      "description": "Generated unsigned transaction smart contract call data.",
                      "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                    },
                    "estimated_gas": {
                      "type": "integer",
                      "description": "Gas estimation of the transaction",
                      "format": "uint64",
                      "example": 1001
                    },
                    "expiration_time": {
                      "type": "integer",
                      "description": "Transaction expiration time",
                      "format": "int64",
                      "example": 1689939023
                    }
                  }
                },
                "polkadot": {
                  "type": "object",
                  "description": "Polkadot Stake Intent Response",
                  "required": [
                    "stake_id",
                    "unsigned_transaction",
                    "proxy_address"
                  ],
                  "properties": {
                    "unsigned_transaction": {
                      "description": "Unsigned transaction that bonds a Blockdaemon's proxy account to the given customer account.\nOnce this transaction is signed, broadcasted to the network and included in the canonical history of the chain, the proxy account will be associated with the customer account.",
                      "type": "string",
                      "format": "base64",
                      "example": "0xa4041601008c16e19e94328985d65cb7e3245213892730dd0e841f6511478cb12f23a178330100000000"
                    },
                    "customer_address": {
                      "description": "Address of the customer account to associate with the proxy account.",
                      "type": "string",
                      "format": "base58",
                      "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                      "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                    },
                    "controller_address": {
                      "description": "Address of the customer account to associate with the proxy account.\nSame as customer_address. Deprecated - will be removed in a later version.",
                      "type": "string",
                      "format": "base58",
                      "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                      "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                    },
                    "proxy_address": {
                      "description": "Address of the proxy account to associate with the customer account.",
                      "type": "string",
                      "format": "base58",
                      "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                      "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                    }
                  }
                },
                "solana": {
                  "type": "object",
                  "description": "Solana Stake Intent response",
                  "required": [
                    "stake_id",
                    "amount",
                    "validator_public_key",
                    "withdrawal_authority",
                    "staking_authority",
                    "stake_account_public_key",
                    "unsigned_transaction",
                    "expiration_time"
                  ],
                  "properties": {
                    "stake_id": {
                      "description": "Unique stake identifier.",
                      "type": "string",
                      "format": "base58",
                      "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                    },
                    "amount": {
                      "type": "string",
                      "description": "Denomination of the cryptocurrency Solana.",
                      "pattern": "^[1-9]\\d+$",
                      "example": "100"
                    },
                    "validator_public_key": {
                      "type": "string",
                      "description": "A BLS public Key.",
                      "format": "base64",
                      "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                    },
                    "staking_authority": {
                      "type": "string",
                      "description": "Public Key of an asymmetric key-pair.",
                      "format": "base58",
                      "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                      "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                    },
                    "withdrawal_authority": {
                      "type": "string",
                      "description": "A BLS public Key.",
                      "format": "base64",
                      "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                    },
                    "stake_account_public_key": {
                      "type": "string",
                      "description": "Public Key of an asymmetric key-pair.",
                      "format": "base58",
                      "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                      "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                    },
                    "unsigned_transaction": {
                      "type": "string",
                      "format": "base64",
                      "description": "Generated unsigned transaction smart contract call data.",
                      "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                    },
                    "expiration_time": {
                      "type": "integer",
                      "description": "Transaction expiration time",
                      "format": "int64",
                      "example": 1689939023
                    }
                  }
                },
                "cosmos": {
                  "type": "object",
                  "description": "Cosmos Stake Intent response",
                  "required": [
                    "unsigned_transaction",
                    "amount",
                    "delegator_address",
                    "validator_address"
                  ],
                  "properties": {
                    "unsigned_transaction": {
                      "type": "string",
                      "format": "base64",
                      "description": "Generated unsigned transaction smart contract call data.",
                      "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                    },
                    "delegator_address": {
                      "type": "string",
                      "description": "Public Key of an asymmetric key-pair.",
                      "format": "bech32",
                      "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                      "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                    },
                    "validator_address": {
                      "type": "string",
                      "description": "Public Key of an asymmetric key-pair.",
                      "format": "bech32",
                      "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                      "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                    },
                    "amount": {
                      "type": "string",
                      "description": "Denomination of the cryptocurrency Cosmos.",
                      "pattern": "^[1-9]\\d+$",
                      "example": "100"
                    }
                  }
                },
                "binance": {
                  "type": "object",
                  "description": "Binance Stake Intent response",
                  "required": [
                    "unsigned_transaction",
                    "amount",
                    "delegator_address",
                    "validator_address"
                  ],
                  "properties": {
                    "unsigned_transaction": {
                      "type": "string",
                      "format": "base64",
                      "description": "Generated unsigned transaction smart contract call data.",
                      "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                    },
                    "delegator_address": {
                      "type": "string",
                      "description": "Binance beacon chain address.",
                      "format": "bech32",
                      "pattern": "^bnb[0-9a-z]+$",
                      "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
                    },
                    "validator_address": {
                      "type": "string",
                      "description": "Binance beacon chain validator address.",
                      "format": "bech32",
                      "pattern": "^bva[0-9a-zA-Z]*$",
                      "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                    },
                    "amount": {
                      "type": "string",
                      "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
                      "pattern": "^[1-9]\\d+$",
                      "example": "10000000000"
                    }
                  }
                },
                "polygon": {
                  "type": "object",
                  "description": "Polygon Stake Intent",
                  "required": [
                    "to",
                    "unsigned_transaction",
                    "amount",
                    "wallet_address"
                  ],
                  "properties": {
                    "to": {
                      "type": "string",
                      "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                      "format": "hex",
                      "pattern": "^0x[a-fA-F0-9]{40}$",
                      "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                    },
                    "unsigned_transaction": {
                      "type": "string",
                      "format": "base64",
                      "description": "Generated unsigned transaction smart contract call data.",
                      "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                    },
                    "amount": {
                      "type": "string",
                      "description": "Denomination of the cryptocurrency Polygon.",
                      "pattern": "^[1-9]\\d+$",
                      "example": "100"
                    },
                    "wallet_address": {
                      "type": "string",
                      "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                      "format": "hex",
                      "pattern": "^0x[a-fA-F0-9]{40}$",
                      "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                    }
                  }
                },
                "near": {
                  "type": "object",
                  "description": "NEAR Protocol Stake Intent",
                  "required": [
                    "to",
                    "unsigned_transaction",
                    "amount",
                    "wallet_address",
                    "public_key",
                    "expiration_time"
                  ],
                  "properties": {
                    "to": {
                      "type": "string",
                      "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                      "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                      "example": "alice.near"
                    },
                    "unsigned_transaction": {
                      "type": "string",
                      "format": "base64",
                      "description": "Generated unsigned transaction smart contract call data.",
                      "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                    },
                    "amount": {
                      "type": "string",
                      "description": "Denomination of NEAR Protocol.",
                      "pattern": "^[1-9]\\d+$",
                      "example": "100000000000000000000000000"
                    },
                    "wallet_address": {
                      "type": "string",
                      "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                      "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                      "example": "alice.near"
                    },
                    "public_key": {
                      "type": "string",
                      "description": "Base58 encoded public key prefixed by ed25519, associated with the private key that will be used to sign the transaction.",
                      "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
                      "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
                    },
                    "expiration_time": {
                      "type": "integer",
                      "description": "Transaction expiration time",
                      "format": "int64",
                      "example": 1689939023
                    }
                  }
                },
                "cardano": {
                  "type": "object",
                  "description": "Cardano Protocol Stake Intent",
                  "required": [
                    "pool_id",
                    "unsigned_transaction",
                    "base_address"
                  ],
                  "properties": {
                    "pool_id": {
                      "type": "string",
                      "description": "bech32 encoded pool id.",
                      "format": "bech32",
                      "example": "pool1ev8fwfccn8gr0zcz3uyps0t0mcrefc6s95wjc6aed3ngc86y5rk"
                    },
                    "unsigned_transaction": {
                      "type": "string",
                      "format": "base64",
                      "description": "Generated unsigned transaction smart contract call data.",
                      "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                    },
                    "base_address": {
                      "type": "string",
                      "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
                      "format": "bech32",
                      "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
                    }
                  }
                },
                "avalanche": {
                  "type": "object",
                  "description": "Avalanche Stake Intent",
                  "required": [
                    "validator_address",
                    "unsigned_transaction",
                    "amount",
                    "delegator_address",
                    "start_time",
                    "end_time"
                  ],
                  "properties": {
                    "validator_address": {
                      "type": "string",
                      "description": "Avalanche validator node address",
                      "pattern": "^NodeID-[A-Za-z0-9]{43}$",
                      "example": "NodeID-B19uSxUKerjjnA215czAJLHMqNJMbsAMWuSxUKerjjW"
                    },
                    "unsigned_transaction": {
                      "type": "string",
                      "format": "base64",
                      "description": "Generated unsigned transaction smart contract call data.",
                      "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                    },
                    "amount": {
                      "type": "string",
                      "description": "Denomination of Avalanche.",
                      "pattern": "^[1-9]\\d+$",
                      "example": "10000000000"
                    },
                    "delegator_address": {
                      "type": "string",
                      "description": "Avalanche platform chain address",
                      "pattern": "^([P]|[a-km-zA-HJ-NP-Z1-9]{36,72})-[a-zA-Z]{1,83}1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{38}$",
                      "example": "P-fuji1g2g0jxcfn5sp59ld7g0t0tp4jrqppvqcfqc7hy"
                    },
                    "start_time": {
                      "description": "Avalanche staking start time",
                      "type": "integer",
                      "format": "int64",
                      "example": 1689939023
                    },
                    "end_time": {
                      "description": "Avalanche staking end time",
                      "type": "integer",
                      "format": "int64",
                      "example": 1689939023
                    }
                  }
                },
                "customer_id": {
                  "type": "string",
                  "description": "Unique identifier for a customer",
                  "example": "SatoshiNakamoto-xUYJbPw9hw",
                  "minimum": 1
                },
                "plan_id": {
                  "type": "string",
                  "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                  "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                },
                "created_at": {
                  "description": "Timestamp",
                  "type": "string",
                  "example": "2023-01-11 06:22:46.182"
                },
                "updated_at": {
                  "description": "Timestamp",
                  "type": "string",
                  "example": "2023-01-11 06:22:46.182"
                }
              }
            }
          },
          "pagination": {
            "type": "object",
            "description": "encapsulates pagination properties",
            "required": [
              "page",
              "per_page",
              "total"
            ],
            "properties": {
              "page": {
                "description": "current page number",
                "type": "integer",
                "format": "int64"
              },
              "per_page": {
                "description": "number of results per page",
                "type": "integer",
                "format": "int64"
              },
              "total": {
                "description": "total number of results",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        }
      },
      "StakeIntentListPublic": {
        "type": "array",
        "description": "List of stake intents.",
        "items": {
          "type": "object",
          "description": "Protocol-specific stake intent response",
          "oneOf": [
            {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "stake_intent_id",
                    "customer_id"
                  ],
                  "properties": {
                    "stake_intent_id": {
                      "type": "string",
                      "format": "base58",
                      "description": "Unique idenifier for a group of stakes.",
                      "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "Unique identifier for a customer",
                      "example": "SatoshiNakamoto-xUYJbPw9hw",
                      "minimum": 1
                    },
                    "plan_id": {
                      "type": "string",
                      "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                      "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "protocol",
                    "network"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Ethereum protocol",
                      "enum": [
                        "ethereum"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "Ethereum network",
                      "enum": [
                        "mainnet",
                        "holesky"
                      ]
                    },
                    "ethereum": {
                      "type": "object",
                      "description": "Ethereum Stake Intent response",
                      "required": [
                        "stakes",
                        "contract_address",
                        "unsigned_transaction",
                        "estimated_gas",
                        "expiration_time"
                      ],
                      "properties": {
                        "stakes": {
                          "description": "Stakes being made.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "description": "Individual Ethereum Stake Response",
                            "required": [
                              "stake_id",
                              "amount",
                              "validator_public_key",
                              "withdrawal_credentials",
                              "fee_recipient"
                            ],
                            "properties": {
                              "stake_id": {
                                "description": "Unique stake identifier.",
                                "type": "string",
                                "format": "base58",
                                "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                              },
                              "amount": {
                                "type": "string",
                                "description": "Amount of ETH (denominated in Gwei).",
                                "pattern": "^[1-9]\\d{10,}$",
                                "example": "32000000000"
                              },
                              "validator_public_key": {
                                "type": "string",
                                "description": "A BLS public Key.",
                                "format": "base64",
                                "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                              },
                              "withdrawal_credentials": {
                                "type": "string",
                                "format": "hex",
                                "pattern": "^0x0(0|1)[a-fA-F0-9]{62}$",
                                "example": "0x0092c20062cee70389f1cb4fa566a2be5e2319ff43965db26dbaa3ce90b9df99",
                                "description": "Hexadecimal encoded [withdrawal credentials](https://github.com/ethereum/consensus-specs/blob/master/specs/phase0/validator.md#withdrawal-credentials) which can be either a BLS public key or an Ethereum account address.\n\nThis parameter currently accepts ETH1 and BLS withdrawal credentials, but it is considered deprecated after the Capella/Shanghai fork. All users are now advised to use an ETH1 withdrawal address, specified through the `withdrawal_address` parameter as this is required to enable the ongoing accrual of rewards.\n\nFor more information regarding creating withdrawal credentials, please see the official [Ethereum Launchpad FAQ](https://launchpad.ethereum.org/en/faq#withdrawal-credentials)."
                              },
                              "fee_recipient": {
                                "type": "string",
                                "description": "An Ethereum address to receive transaction fees from published blocks. 20-bytes, hex encoded with 0x prefix, case insensitive.",
                                "example": "0x93247f2209abcacf57b75a51dafae777f9dd38bc",
                                "pattern": "^0x[a-fA-F0-9]{40}$"
                              }
                            }
                          }
                        },
                        "contract_address": {
                          "type": "string",
                          "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                          "format": "hex",
                          "pattern": "^0x[a-fA-F0-9]{40}$",
                          "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                        },
                        "unsigned_transaction": {
                          "type": "string",
                          "format": "base64",
                          "description": "Generated unsigned transaction smart contract call data.",
                          "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                        },
                        "estimated_gas": {
                          "type": "integer",
                          "description": "Gas estimation of the transaction",
                          "format": "uint64",
                          "example": 1001
                        },
                        "expiration_time": {
                          "type": "integer",
                          "description": "Transaction expiration time",
                          "format": "int64",
                          "example": 1689939023
                        }
                      }
                    }
                  }
                }
              ]
            },
            {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "stake_intent_id",
                    "customer_id"
                  ],
                  "properties": {
                    "stake_intent_id": {
                      "type": "string",
                      "format": "base58",
                      "description": "Unique idenifier for a group of stakes.",
                      "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "Unique identifier for a customer",
                      "example": "SatoshiNakamoto-xUYJbPw9hw",
                      "minimum": 1
                    },
                    "plan_id": {
                      "type": "string",
                      "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                      "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "protocol",
                    "network"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Solana protocol",
                      "enum": [
                        "solana"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "Solana network",
                      "enum": [
                        "mainnet",
                        "testnet"
                      ]
                    },
                    "solana": {
                      "type": "object",
                      "description": "Solana Stake Intent response",
                      "required": [
                        "stake_id",
                        "amount",
                        "validator_public_key",
                        "withdrawal_authority",
                        "staking_authority",
                        "stake_account_public_key",
                        "unsigned_transaction",
                        "expiration_time"
                      ],
                      "properties": {
                        "stake_id": {
                          "description": "Unique stake identifier.",
                          "type": "string",
                          "format": "base58",
                          "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                        },
                        "amount": {
                          "type": "string",
                          "description": "Denomination of the cryptocurrency Solana.",
                          "pattern": "^[1-9]\\d+$",
                          "example": "100"
                        },
                        "validator_public_key": {
                          "type": "string",
                          "description": "A BLS public Key.",
                          "format": "base64",
                          "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                        },
                        "staking_authority": {
                          "type": "string",
                          "description": "Public Key of an asymmetric key-pair.",
                          "format": "base58",
                          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                        },
                        "withdrawal_authority": {
                          "type": "string",
                          "description": "A BLS public Key.",
                          "format": "base64",
                          "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                        },
                        "stake_account_public_key": {
                          "type": "string",
                          "description": "Public Key of an asymmetric key-pair.",
                          "format": "base58",
                          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                        },
                        "unsigned_transaction": {
                          "type": "string",
                          "format": "base64",
                          "description": "Generated unsigned transaction smart contract call data.",
                          "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                        },
                        "expiration_time": {
                          "type": "integer",
                          "description": "Transaction expiration time",
                          "format": "int64",
                          "example": 1689939023
                        }
                      }
                    }
                  }
                }
              ]
            },
            {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "stake_intent_id",
                    "customer_id"
                  ],
                  "properties": {
                    "stake_intent_id": {
                      "type": "string",
                      "format": "base58",
                      "description": "Unique idenifier for a group of stakes.",
                      "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "Unique identifier for a customer",
                      "example": "SatoshiNakamoto-xUYJbPw9hw",
                      "minimum": 1
                    },
                    "plan_id": {
                      "type": "string",
                      "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                      "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "protocol",
                    "network"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Polygon protocol",
                      "enum": [
                        "polygon"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "Polygon network",
                      "enum": [
                        "mainnet",
                        "goerli",
                        "prater"
                      ]
                    },
                    "polygon": {
                      "type": "object",
                      "description": "Polygon Stake Intent",
                      "required": [
                        "to",
                        "unsigned_transaction",
                        "amount",
                        "wallet_address"
                      ],
                      "properties": {
                        "to": {
                          "type": "string",
                          "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                          "format": "hex",
                          "pattern": "^0x[a-fA-F0-9]{40}$",
                          "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                        },
                        "unsigned_transaction": {
                          "type": "string",
                          "format": "base64",
                          "description": "Generated unsigned transaction smart contract call data.",
                          "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                        },
                        "amount": {
                          "type": "string",
                          "description": "Denomination of the cryptocurrency Polygon.",
                          "pattern": "^[1-9]\\d+$",
                          "example": "100"
                        },
                        "wallet_address": {
                          "type": "string",
                          "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                          "format": "hex",
                          "pattern": "^0x[a-fA-F0-9]{40}$",
                          "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                        }
                      }
                    }
                  }
                }
              ]
            },
            {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "stake_intent_id",
                    "customer_id"
                  ],
                  "properties": {
                    "stake_intent_id": {
                      "type": "string",
                      "format": "base58",
                      "description": "Unique idenifier for a group of stakes.",
                      "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "Unique identifier for a customer",
                      "example": "SatoshiNakamoto-xUYJbPw9hw",
                      "minimum": 1
                    },
                    "plan_id": {
                      "type": "string",
                      "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                      "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "protocol",
                    "network"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Polkadot protocol",
                      "enum": [
                        "polkadot"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "Coin network",
                      "enum": [
                        "mainnet",
                        "kusama",
                        "westend"
                      ]
                    },
                    "polkadot": {
                      "type": "object",
                      "description": "Polkadot Stake Intent Response",
                      "required": [
                        "stake_id",
                        "unsigned_transaction",
                        "proxy_address"
                      ],
                      "properties": {
                        "unsigned_transaction": {
                          "description": "Unsigned transaction that bonds a Blockdaemon's proxy account to the given customer account.\nOnce this transaction is signed, broadcasted to the network and included in the canonical history of the chain, the proxy account will be associated with the customer account.",
                          "type": "string",
                          "format": "base64",
                          "example": "0xa4041601008c16e19e94328985d65cb7e3245213892730dd0e841f6511478cb12f23a178330100000000"
                        },
                        "customer_address": {
                          "description": "Address of the customer account to associate with the proxy account.",
                          "type": "string",
                          "format": "base58",
                          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                        },
                        "controller_address": {
                          "description": "Address of the customer account to associate with the proxy account.\nSame as customer_address. Deprecated - will be removed in a later version.",
                          "type": "string",
                          "format": "base58",
                          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                        },
                        "proxy_address": {
                          "description": "Address of the proxy account to associate with the customer account.",
                          "type": "string",
                          "format": "base58",
                          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                        }
                      }
                    }
                  }
                }
              ]
            },
            {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "stake_intent_id",
                    "customer_id"
                  ],
                  "properties": {
                    "stake_intent_id": {
                      "type": "string",
                      "format": "base58",
                      "description": "Unique idenifier for a group of stakes.",
                      "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "Unique identifier for a customer",
                      "example": "SatoshiNakamoto-xUYJbPw9hw",
                      "minimum": 1
                    },
                    "plan_id": {
                      "type": "string",
                      "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                      "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "protocol",
                    "network"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Near protocol",
                      "enum": [
                        "near"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "NEAR network",
                      "enum": [
                        "mainnet",
                        "testnet",
                        "localnet"
                      ]
                    },
                    "near": {
                      "type": "object",
                      "description": "NEAR Protocol Stake Intent",
                      "required": [
                        "to",
                        "unsigned_transaction",
                        "amount",
                        "wallet_address",
                        "public_key",
                        "expiration_time"
                      ],
                      "properties": {
                        "to": {
                          "type": "string",
                          "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                          "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                          "example": "alice.near"
                        },
                        "unsigned_transaction": {
                          "type": "string",
                          "format": "base64",
                          "description": "Generated unsigned transaction smart contract call data.",
                          "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                        },
                        "amount": {
                          "type": "string",
                          "description": "Denomination of NEAR Protocol.",
                          "pattern": "^[1-9]\\d+$",
                          "example": "100000000000000000000000000"
                        },
                        "wallet_address": {
                          "type": "string",
                          "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                          "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                          "example": "alice.near"
                        },
                        "public_key": {
                          "type": "string",
                          "description": "Base58 encoded public key prefixed by ed25519, associated with the private key that will be used to sign the transaction.",
                          "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
                          "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
                        },
                        "expiration_time": {
                          "type": "integer",
                          "description": "Transaction expiration time",
                          "format": "int64",
                          "example": 1689939023
                        }
                      }
                    }
                  }
                }
              ]
            },
            {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "stake_intent_id",
                    "customer_id"
                  ],
                  "properties": {
                    "stake_intent_id": {
                      "type": "string",
                      "format": "base58",
                      "description": "Unique idenifier for a group of stakes.",
                      "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "Unique identifier for a customer",
                      "example": "SatoshiNakamoto-xUYJbPw9hw",
                      "minimum": 1
                    },
                    "plan_id": {
                      "type": "string",
                      "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                      "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "protocol",
                    "network"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Avalanche protocol",
                      "enum": [
                        "avalanche"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "Avalanche network",
                      "enum": [
                        "mainnet",
                        "fuji",
                        "local"
                      ]
                    },
                    "avalanche": {
                      "type": "object",
                      "description": "Avalanche Stake Intent",
                      "required": [
                        "validator_address",
                        "unsigned_transaction",
                        "amount",
                        "delegator_address",
                        "start_time",
                        "end_time"
                      ],
                      "properties": {
                        "validator_address": {
                          "type": "string",
                          "description": "Avalanche validator node address",
                          "pattern": "^NodeID-[A-Za-z0-9]{43}$",
                          "example": "NodeID-B19uSxUKerjjnA215czAJLHMqNJMbsAMWuSxUKerjjW"
                        },
                        "unsigned_transaction": {
                          "type": "string",
                          "format": "base64",
                          "description": "Generated unsigned transaction smart contract call data.",
                          "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                        },
                        "amount": {
                          "type": "string",
                          "description": "Denomination of Avalanche.",
                          "pattern": "^[1-9]\\d+$",
                          "example": "10000000000"
                        },
                        "delegator_address": {
                          "type": "string",
                          "description": "Avalanche platform chain address",
                          "pattern": "^([P]|[a-km-zA-HJ-NP-Z1-9]{36,72})-[a-zA-Z]{1,83}1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{38}$",
                          "example": "P-fuji1g2g0jxcfn5sp59ld7g0t0tp4jrqppvqcfqc7hy"
                        },
                        "start_time": {
                          "description": "Avalanche staking start time",
                          "type": "integer",
                          "format": "int64",
                          "example": 1689939023
                        },
                        "end_time": {
                          "description": "Avalanche staking end time",
                          "type": "integer",
                          "format": "int64",
                          "example": 1689939023
                        }
                      }
                    }
                  }
                }
              ]
            },
            {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "stake_intent_id",
                    "customer_id"
                  ],
                  "properties": {
                    "stake_intent_id": {
                      "type": "string",
                      "format": "base58",
                      "description": "Unique idenifier for a group of stakes.",
                      "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "Unique identifier for a customer",
                      "example": "SatoshiNakamoto-xUYJbPw9hw",
                      "minimum": 1
                    },
                    "plan_id": {
                      "type": "string",
                      "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                      "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "protocol",
                    "network"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Cosmos protocol",
                      "enum": [
                        "cosmos"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "Cosmos network",
                      "enum": [
                        "mainnet",
                        "testnet"
                      ]
                    },
                    "cosmos": {
                      "type": "object",
                      "description": "Cosmos Stake Intent response",
                      "required": [
                        "unsigned_transaction",
                        "amount",
                        "delegator_address",
                        "validator_address"
                      ],
                      "properties": {
                        "unsigned_transaction": {
                          "type": "string",
                          "format": "base64",
                          "description": "Generated unsigned transaction smart contract call data.",
                          "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                        },
                        "delegator_address": {
                          "type": "string",
                          "description": "Public Key of an asymmetric key-pair.",
                          "format": "bech32",
                          "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                          "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                        },
                        "validator_address": {
                          "type": "string",
                          "description": "Public Key of an asymmetric key-pair.",
                          "format": "bech32",
                          "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                          "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                        },
                        "amount": {
                          "type": "string",
                          "description": "Denomination of the cryptocurrency Cosmos.",
                          "pattern": "^[1-9]\\d+$",
                          "example": "100"
                        }
                      }
                    }
                  }
                }
              ]
            },
            {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "stake_intent_id",
                    "customer_id"
                  ],
                  "properties": {
                    "stake_intent_id": {
                      "type": "string",
                      "format": "base58",
                      "description": "Unique idenifier for a group of stakes.",
                      "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "Unique identifier for a customer",
                      "example": "SatoshiNakamoto-xUYJbPw9hw",
                      "minimum": 1
                    },
                    "plan_id": {
                      "type": "string",
                      "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                      "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "protocol",
                    "network"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Cardano protocol",
                      "enum": [
                        "cardano"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "Cardano network",
                      "enum": [
                        "mainnet",
                        "preprod",
                        "localnet"
                      ]
                    },
                    "cardano": {
                      "type": "object",
                      "description": "Cardano Protocol Stake Intent",
                      "required": [
                        "pool_id",
                        "unsigned_transaction",
                        "base_address"
                      ],
                      "properties": {
                        "pool_id": {
                          "type": "string",
                          "description": "bech32 encoded pool id.",
                          "format": "bech32",
                          "example": "pool1ev8fwfccn8gr0zcz3uyps0t0mcrefc6s95wjc6aed3ngc86y5rk"
                        },
                        "unsigned_transaction": {
                          "type": "string",
                          "format": "base64",
                          "description": "Generated unsigned transaction smart contract call data.",
                          "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                        },
                        "base_address": {
                          "type": "string",
                          "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
                          "format": "bech32",
                          "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
                        }
                      }
                    }
                  }
                }
              ]
            },
            {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "stake_intent_id",
                    "customer_id"
                  ],
                  "properties": {
                    "stake_intent_id": {
                      "type": "string",
                      "format": "base58",
                      "description": "Unique idenifier for a group of stakes.",
                      "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "Unique identifier for a customer",
                      "example": "SatoshiNakamoto-xUYJbPw9hw",
                      "minimum": 1
                    },
                    "plan_id": {
                      "type": "string",
                      "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                      "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "protocol",
                    "network",
                    "binance"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Binance beacon chain protocol",
                      "enum": [
                        "binance"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "Binance beacon chain network",
                      "enum": [
                        "mainnet",
                        "testnet"
                      ]
                    },
                    "binance": {
                      "type": "object",
                      "description": "Binance Stake Intent response",
                      "required": [
                        "unsigned_transaction",
                        "amount",
                        "delegator_address",
                        "validator_address"
                      ],
                      "properties": {
                        "unsigned_transaction": {
                          "type": "string",
                          "format": "base64",
                          "description": "Generated unsigned transaction smart contract call data.",
                          "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                        },
                        "delegator_address": {
                          "type": "string",
                          "description": "Binance beacon chain address.",
                          "format": "bech32",
                          "pattern": "^bnb[0-9a-z]+$",
                          "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
                        },
                        "validator_address": {
                          "type": "string",
                          "description": "Binance beacon chain validator address.",
                          "format": "bech32",
                          "pattern": "^bva[0-9a-zA-Z]*$",
                          "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                        },
                        "amount": {
                          "type": "string",
                          "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
                          "pattern": "^[1-9]\\d+$",
                          "example": "10000000000"
                        }
                      }
                    }
                  }
                }
              ]
            }
          ]
        }
      },
      "StakeIntentPolkadot": {
        "type": "object",
        "description": "Polkadot Stake Intent Response",
        "required": [
          "stake_id",
          "unsigned_transaction",
          "proxy_address"
        ],
        "properties": {
          "unsigned_transaction": {
            "description": "Unsigned transaction that bonds a Blockdaemon's proxy account to the given customer account.\nOnce this transaction is signed, broadcasted to the network and included in the canonical history of the chain, the proxy account will be associated with the customer account.",
            "type": "string",
            "format": "base64",
            "example": "0xa4041601008c16e19e94328985d65cb7e3245213892730dd0e841f6511478cb12f23a178330100000000"
          },
          "customer_address": {
            "description": "Address of the customer account to associate with the proxy account.",
            "type": "string",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "controller_address": {
            "description": "Address of the customer account to associate with the proxy account.\nSame as customer_address. Deprecated - will be removed in a later version.",
            "type": "string",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "proxy_address": {
            "description": "Address of the proxy account to associate with the customer account.",
            "type": "string",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          }
        }
      },
      "StakeIntentPolygon": {
        "type": "object",
        "description": "Polygon Stake Intent",
        "required": [
          "to",
          "unsigned_transaction",
          "amount",
          "wallet_address"
        ],
        "properties": {
          "to": {
            "type": "string",
            "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
            "format": "hex",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
          },
          "unsigned_transaction": {
            "type": "string",
            "format": "base64",
            "description": "Generated unsigned transaction smart contract call data.",
            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
          },
          "amount": {
            "type": "string",
            "description": "Denomination of the cryptocurrency Polygon.",
            "pattern": "^[1-9]\\d+$",
            "example": "100"
          },
          "wallet_address": {
            "type": "string",
            "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
            "format": "hex",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
          }
        }
      },
      "StakeIntentSolana": {
        "type": "object",
        "description": "Solana Stake Intent response",
        "required": [
          "stake_id",
          "amount",
          "validator_public_key",
          "withdrawal_authority",
          "staking_authority",
          "stake_account_public_key",
          "unsigned_transaction",
          "expiration_time"
        ],
        "properties": {
          "stake_id": {
            "description": "Unique stake identifier.",
            "type": "string",
            "format": "base58",
            "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
          },
          "amount": {
            "type": "string",
            "description": "Denomination of the cryptocurrency Solana.",
            "pattern": "^[1-9]\\d+$",
            "example": "100"
          },
          "validator_public_key": {
            "type": "string",
            "description": "A BLS public Key.",
            "format": "base64",
            "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
          },
          "staking_authority": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "withdrawal_authority": {
            "type": "string",
            "description": "A BLS public Key.",
            "format": "base64",
            "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
          },
          "stake_account_public_key": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "unsigned_transaction": {
            "type": "string",
            "format": "base64",
            "description": "Generated unsigned transaction smart contract call data.",
            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
          },
          "expiration_time": {
            "type": "integer",
            "description": "Transaction expiration time",
            "format": "int64",
            "example": 1689939023
          }
        }
      },
      "StakeList": {
        "type": "object",
        "description": "List of Stakes",
        "required": [
          "stakes"
        ],
        "properties": {
          "stakes": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Details of a stake.",
              "required": [
                "id",
                "stake_intent_id",
                "protocol",
                "network",
                "status"
              ],
              "properties": {
                "id": {
                  "description": "Unique stake identifier.",
                  "type": "string",
                  "format": "base58",
                  "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                },
                "stake_intent_id": {
                  "type": "string",
                  "format": "base58",
                  "description": "Unique idenifier for a group of stakes.",
                  "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
                },
                "protocol": {
                  "type": "string",
                  "description": "Blockchain protocol.",
                  "enum": [
                    "ethereum",
                    "polkadot",
                    "solana",
                    "cosmos",
                    "polygon",
                    "near",
                    "cardano",
                    "avalanche",
                    "binance"
                  ]
                },
                "network": {
                  "type": "string",
                  "description": "Protocol-specific network.",
                  "enum": [
                    "mainnet",
                    "localnet",
                    "goerli",
                    "prater",
                    "holesky",
                    "testnet",
                    "devnet",
                    "kusama",
                    "westend",
                    "preprod",
                    "fuji",
                    "local"
                  ]
                },
                "ethereum": {
                  "type": "object",
                  "description": "Ethereum Stake",
                  "required": [
                    "amount",
                    "validator_public_key",
                    "withdrawal_credentials"
                  ],
                  "properties": {
                    "amount": {
                      "type": "string",
                      "description": "Amount of ETH (denominated in Gwei).",
                      "pattern": "^[1-9]\\d{10,}$",
                      "example": "32000000000"
                    },
                    "validator_public_key": {
                      "type": "string",
                      "description": "A BLS public Key.",
                      "format": "base64",
                      "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                    },
                    "withdrawal_credentials": {
                      "type": "string",
                      "format": "hex",
                      "pattern": "^0x0(0|1)[a-fA-F0-9]{62}$",
                      "example": "0x0092c20062cee70389f1cb4fa566a2be5e2319ff43965db26dbaa3ce90b9df99",
                      "description": "Hexadecimal encoded [withdrawal credentials](https://github.com/ethereum/consensus-specs/blob/master/specs/phase0/validator.md#withdrawal-credentials) which can be either a BLS public key or an Ethereum account address.\n\nThis parameter currently accepts ETH1 and BLS withdrawal credentials, but it is considered deprecated after the Capella/Shanghai fork. All users are now advised to use an ETH1 withdrawal address, specified through the `withdrawal_address` parameter as this is required to enable the ongoing accrual of rewards.\n\nFor more information regarding creating withdrawal credentials, please see the official [Ethereum Launchpad FAQ](https://launchpad.ethereum.org/en/faq#withdrawal-credentials)."
                    }
                  }
                },
                "solana": {
                  "type": "object",
                  "description": "Solana Stake",
                  "required": [
                    "amount",
                    "validator_public_key",
                    "withdrawal_authority",
                    "staking_authority"
                  ],
                  "properties": {
                    "amount": {
                      "type": "string",
                      "description": "Denomination of the cryptocurrency Solana.",
                      "pattern": "^[1-9]\\d+$",
                      "example": "100"
                    },
                    "validator_public_key": {
                      "type": "string",
                      "description": "A BLS public Key.",
                      "format": "base64",
                      "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                    },
                    "withdrawal_authority": {
                      "type": "string",
                      "description": "Public Key of an asymmetric key-pair.",
                      "format": "base58",
                      "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                      "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                    },
                    "staking_authority": {
                      "type": "string",
                      "description": "Public Key of an asymmetric key-pair.",
                      "format": "base58",
                      "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                      "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                    }
                  }
                },
                "polkadot": {
                  "type": "object",
                  "description": "Polkadot Stake",
                  "required": [
                    "amount",
                    "validator_public_key"
                  ],
                  "properties": {
                    "amount": {
                      "type": "string",
                      "description": "Denomination of the cryptocurrency Polkadot.",
                      "pattern": "^[1-9]\\d+$",
                      "example": "100"
                    },
                    "validator_public_key": {
                      "type": "string",
                      "description": "A BLS public Key.",
                      "format": "base64",
                      "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                    }
                  }
                },
                "polygon": {
                  "type": "object",
                  "description": "Polygon Stake",
                  "required": [
                    "to",
                    "unsigned_transaction",
                    "amount",
                    "wallet_address"
                  ],
                  "properties": {
                    "to": {
                      "type": "string",
                      "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                      "format": "hex",
                      "pattern": "^0x[a-fA-F0-9]{40}$",
                      "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                    },
                    "unsigned_transaction": {
                      "type": "string",
                      "format": "base64",
                      "description": "Generated unsigned transaction smart contract call data.",
                      "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                    },
                    "amount": {
                      "type": "string",
                      "description": "Denomination of the cryptocurrency Polygon.",
                      "pattern": "^[1-9]\\d+$",
                      "example": "100"
                    },
                    "wallet_address": {
                      "type": "string",
                      "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                      "format": "hex",
                      "pattern": "^0x[a-fA-F0-9]{40}$",
                      "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "StakePolkadot": {
        "type": "object",
        "description": "Polkadot Stake",
        "required": [
          "amount",
          "validator_public_key"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "description": "Denomination of the cryptocurrency Polkadot.",
            "pattern": "^[1-9]\\d+$",
            "example": "100"
          },
          "validator_public_key": {
            "type": "string",
            "description": "A BLS public Key.",
            "format": "base64",
            "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
          }
        }
      },
      "StakePolygon": {
        "type": "object",
        "description": "Polygon Stake",
        "required": [
          "to",
          "unsigned_transaction",
          "amount",
          "wallet_address"
        ],
        "properties": {
          "to": {
            "type": "string",
            "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
            "format": "hex",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
          },
          "unsigned_transaction": {
            "type": "string",
            "format": "base64",
            "description": "Generated unsigned transaction smart contract call data.",
            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
          },
          "amount": {
            "type": "string",
            "description": "Denomination of the cryptocurrency Polygon.",
            "pattern": "^[1-9]\\d+$",
            "example": "100"
          },
          "wallet_address": {
            "type": "string",
            "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
            "format": "hex",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
          }
        }
      },
      "StakeReference": {
        "description": "stake reference",
        "type": "object",
        "required": [
          "id",
          "url"
        ],
        "properties": {
          "id": {
            "description": "Unique stake identifier.",
            "type": "string",
            "format": "base58",
            "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
          },
          "url": {
            "description": "URL reference to stake resource",
            "type": "string"
          }
        }
      },
      "StakeSolana": {
        "type": "object",
        "description": "Solana Stake",
        "required": [
          "amount",
          "validator_public_key",
          "withdrawal_authority",
          "staking_authority"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "description": "Denomination of the cryptocurrency Solana.",
            "pattern": "^[1-9]\\d+$",
            "example": "100"
          },
          "validator_public_key": {
            "type": "string",
            "description": "A BLS public Key.",
            "format": "base64",
            "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
          },
          "withdrawal_authority": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "staking_authority": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          }
        }
      },
      "StakingPlans": {
        "type": "object",
        "description": "Staking plans",
        "required": [
          "plans"
        ],
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          },
          "plans": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "the plan config for validator plan",
              "required": [
                "protocol",
                "network",
                "config",
                "staking_plan_type",
                "title"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                  "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                },
                "customer_id": {
                  "type": "string",
                  "description": "Unique identifier for a customer",
                  "example": "SatoshiNakamoto-xUYJbPw9hw",
                  "minimum": 1
                },
                "protocol": {
                  "type": "string",
                  "description": "Blockchain protocol.",
                  "enum": [
                    "ethereum",
                    "polkadot",
                    "solana",
                    "cosmos",
                    "polygon",
                    "near",
                    "cardano",
                    "avalanche",
                    "binance"
                  ]
                },
                "network": {
                  "type": "string",
                  "description": "Protocol-specific network.",
                  "enum": [
                    "mainnet",
                    "localnet",
                    "goerli",
                    "prater",
                    "holesky",
                    "testnet",
                    "devnet",
                    "kusama",
                    "westend",
                    "preprod",
                    "fuji",
                    "local"
                  ]
                },
                "providers": {
                  "type": "array",
                  "description": "list of node providers",
                  "minItems": 1,
                  "items": {
                    "type": "object",
                    "description": "node provider",
                    "required": [
                      "provider",
                      "region",
                      "priority"
                    ],
                    "properties": {
                      "provider": {
                        "description": "Cloud provider which will host the node.",
                        "x-go-type": "models.ProviderID",
                        "x-go-type-import": {
                          "path": "go.blockdaemon.com/nodeq-server/pkg/models",
                          "name": "models"
                        }
                      },
                      "region": {
                        "description": "cloud provider's zone code",
                        "type": "string"
                      },
                      "priority": {
                        "description": "reflect priority weighting. provider with weighted 1 will be the first one to try.",
                        "type": "integer",
                        "format": "uint8"
                      }
                    }
                  }
                },
                "minimum": {
                  "description": "minimum number of validators to be available. required for white label plans",
                  "type": "integer",
                  "format": "int64"
                },
                "config": {
                  "oneOf": [
                    {
                      "type": "object",
                      "description": "Ethereum staking plan config",
                      "required": [
                        "inventory_type"
                      ],
                      "properties": {
                        "suggested_fee_recipient": {
                          "type": "string",
                          "description": "the suggested fee recipient address",
                          "minimum": 1
                        },
                        "mev": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "ID of the MEV fee recipient. optional"
                            },
                            "enabled": {
                              "type": "boolean"
                            },
                            "relays": {
                              "type": "array",
                              "description": "List of Relay urls",
                              "items": {
                                "type": "string",
                                "format": "uri",
                                "description": "Relay url"
                              },
                              "minItems": 1
                            }
                          }
                        },
                        "inventory_type": {
                          "type": "string",
                          "description": "Indicates if the quantity of validators for the staking plan is static or dynamic. Static is a once off deployment of a specified quantity of validators. Dynamic is where an initial quantity of validators is deployed with a threshold of available validators also configured. If the number of available validators within the validator inventory drops below the threshold (by being reserved as part of a stake intents API call) then the dynamic plan will automatically deploy the required infrastructure to bring the number of available validators above the threshold.",
                          "enum": [
                            "static",
                            "dynamic"
                          ]
                        },
                        "execution_client": {
                          "type": "string",
                          "description": "The execution client to use on the node",
                          "enum": [
                            "geth",
                            "besu"
                          ]
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Solana staking plan config",
                      "required": [
                        "validator_address"
                      ],
                      "properties": {
                        "validator_address": {
                          "type": "object",
                          "required": [
                            "mainnet",
                            "testnet"
                          ],
                          "properties": {
                            "mainnet": {
                              "type": "string",
                              "description": "Public Key of an asymmetric key-pair.",
                              "format": "base58",
                              "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                              "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                            },
                            "testnet": {
                              "type": "string",
                              "description": "Public Key of an asymmetric key-pair.",
                              "format": "base58",
                              "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                              "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Polygon staking plan config",
                      "required": [
                        "validator_share_address"
                      ],
                      "properties": {
                        "validator_share_address": {
                          "type": "object",
                          "required": [
                            "mainnet",
                            "testnet"
                          ],
                          "properties": {
                            "mainnet": {
                              "type": "string",
                              "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                              "format": "hex",
                              "pattern": "^0x[a-fA-F0-9]{40}$",
                              "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                            },
                            "testnet": {
                              "type": "string",
                              "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                              "format": "hex",
                              "pattern": "^0x[a-fA-F0-9]{40}$",
                              "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "NEAR Protocol staking plan config",
                      "required": [
                        "validator_address"
                      ],
                      "properties": {
                        "validator_address": {
                          "type": "object",
                          "required": [
                            "mainnet",
                            "testnet"
                          ],
                          "properties": {
                            "mainnet": {
                              "type": "string",
                              "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                              "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                              "example": "alice.near"
                            },
                            "testnet": {
                              "type": "string",
                              "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                              "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                              "example": "alice.near"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Cardano staking plan config",
                      "required": [
                        "stake_pool_id"
                      ],
                      "properties": {
                        "stake_pool_id": {
                          "type": "object",
                          "required": [
                            "mainnet",
                            "preprod"
                          ],
                          "properties": {
                            "mainnet": {
                              "type": "string",
                              "description": "bech32 encoded pool id.",
                              "format": "bech32",
                              "example": "pool1ev8fwfccn8gr0zcz3uyps0t0mcrefc6s95wjc6aed3ngc86y5rk"
                            },
                            "preprod": {
                              "type": "string",
                              "description": "bech32 encoded pool id.",
                              "format": "bech32",
                              "example": "pool1ev8fwfccn8gr0zcz3uyps0t0mcrefc6s95wjc6aed3ngc86y5rk"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Avalanche staking plan config",
                      "required": [
                        "validator_address"
                      ],
                      "properties": {
                        "validator_address": {
                          "type": "object",
                          "required": [
                            "mainnet",
                            "fuji"
                          ],
                          "properties": {
                            "mainnet": {
                              "type": "string",
                              "description": "Avalanche validator node address",
                              "pattern": "^NodeID-[A-Za-z0-9]{43}$",
                              "example": "NodeID-B19uSxUKerjjnA215czAJLHMqNJMbsAMWuSxUKerjjW"
                            },
                            "fuji": {
                              "type": "string",
                              "description": "Avalanche validator node address",
                              "pattern": "^NodeID-[A-Za-z0-9]{43}$",
                              "example": "NodeID-B19uSxUKerjjnA215czAJLHMqNJMbsAMWuSxUKerjjW"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Cosmos staking plan config",
                      "required": [
                        "validator_address"
                      ],
                      "properties": {
                        "validator_address": {
                          "type": "object",
                          "required": [
                            "mainnet",
                            "testnet"
                          ],
                          "properties": {
                            "mainnet": {
                              "type": "string",
                              "description": "Public Key of an asymmetric key-pair.",
                              "format": "bech32",
                              "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                              "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                            },
                            "testnet": {
                              "type": "string",
                              "description": "Public Key of an asymmetric key-pair.",
                              "format": "bech32",
                              "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                              "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "staking_plan_type": {
                  "type": "string",
                  "description": "Indicates if the staking plan requires a Blockdaemon validator launch or it is associated to a public validator.",
                  "enum": [
                    "white_label",
                    "public"
                  ]
                },
                "title": {
                  "type": "string",
                  "description": "Plan title for display purposes"
                },
                "shared": {
                  "description": "flag for shared plans",
                  "type": "boolean"
                },
                "validators_per_node": {
                  "description": "number of validators per node, default is 500",
                  "type": "integer",
                  "format": "int32",
                  "default": 500
                }
              }
            }
          }
        }
      },
      "StakingPlanType": {
        "type": "string",
        "description": "Indicates if the staking plan requires a Blockdaemon validator launch or it is associated to a public validator.",
        "enum": [
          "white_label",
          "public"
        ]
      },
      "Timestamp": {
        "description": "Timestamp",
        "type": "string",
        "example": "2023-01-11 06:22:46.182"
      },
      "TransactionId": {
        "type": "string",
        "description": "Unique identifier for a transaction",
        "format": "base58",
        "example": "transaction_Wgx98Rbi8nQuL9ddn3mTk1"
      },
      "TransactionInitiation": {
        "type": "object",
        "description": "Response details for a submitted transaction",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for a transaction",
            "format": "base58",
            "example": "transaction_Wgx98Rbi8nQuL9ddn3mTk1"
          }
        }
      },
      "CosmosUatom": {
        "type": "string",
        "description": "Denomination of the cryptocurrency Cosmos.",
        "pattern": "^[1-9]\\d+$",
        "example": "100"
      },
      "BinanceJager": {
        "type": "string",
        "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
        "pattern": "^[1-9]\\d+$",
        "example": "10000000000"
      },
      "UnauthorizedError": {
        "type": "object",
        "description": "Error response envelope",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "description": "Error code",
            "example": 401
          },
          "message": {
            "type": "string",
            "description": "Error Message",
            "example": "A human-readable diagnostic message detailing any authorization failure"
          }
        }
      },
      "Unbond": {
        "type": "object",
        "description": "Unbond information",
        "required": [
          "nonce",
          "amount",
          "withdraw_epoch"
        ],
        "properties": {
          "nonce": {
            "type": "integer",
            "description": "Number for one use only",
            "example": 1
          },
          "amount": {
            "type": "string",
            "description": "Denomination of the cryptocurrency Polygon.",
            "pattern": "^[1-9]\\d+$",
            "example": "100"
          },
          "withdraw_epoch": {
            "type": "integer"
          }
        }
      },
      "UnbondNonces": {
        "type": "array",
        "items": {
          "type": "integer",
          "description": "Number for one use only",
          "example": 1
        }
      },
      "UnsignedTransaction": {
        "type": "string",
        "format": "base64",
        "description": "Generated unsigned transaction smart contract call data.",
        "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
      },
      "UnsignedTransactionPolkadotDeactivationIntent": {
        "type": "string",
        "format": "base64",
        "description": "Generated Polkadot unsigned transaction for the provided deactivation intent details.",
        "example": "0xd00410020c0606060202286bee1602008c16e19e94328985d65cb7e3245213892730dd0e841f6511478cb12f23a178330100000000"
      },
      "UnsignedTransactionPolkadotStakeIntent": {
        "type": "string",
        "format": "base64",
        "description": "Generated Polkadot unsigned transaction for the provided stake intent details.",
        "example": "0xa4041601008c16e19e94328985d65cb7e3245213892730dd0e841f6511478cb12f23a178330100000000"
      },
      "UnsignedTransactionPolkadotWithdrawalIntent": {
        "type": "string",
        "format": "base64",
        "description": "Generated Polkadot unsigned transaction for the provided withdrawal intent details.",
        "example": "0x1c04060301000000"
      },
      "UpdateStakingPlan": {
        "type": "object",
        "description": "Staking plan fields to update",
        "properties": {
          "minimum": {
            "description": "minimum number of validators to be available. required for white label plans",
            "type": "integer",
            "format": "int64"
          },
          "title": {
            "type": "string",
            "description": "Plan title for display purposes"
          }
        }
      },
      "Validator": {
        "type": "object",
        "description": "Representation of a Validator resource",
        "required": [
          "id",
          "node_xid",
          "node_validator_id",
          "protocol",
          "network",
          "status"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier for a validator",
            "type": "string",
            "example": "a111b9fa-0dd8-11ed-861d-0242ac120002"
          },
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          },
          "network": {
            "type": "string",
            "description": "Protocol-specific network.",
            "enum": [
              "mainnet",
              "localnet",
              "goerli",
              "prater",
              "holesky",
              "testnet",
              "devnet",
              "kusama",
              "westend",
              "preprod",
              "fuji",
              "local"
            ]
          },
          "node_xid": {
            "type": "string",
            "description": "NodeQ identifier of the Node",
            "example": "blr6lovnplt09b862ej0"
          },
          "node_validator_id": {
            "type": "string",
            "description": "Validator public key",
            "example": "88a1f6b58e05aea38e3e3c776c6e11e6ac959567799dbb849530961e6ddf4078a7985b3cc23f6e11e124fa8ee0298a7a"
          },
          "status": {
            "type": "string",
            "description": "Status of the validator",
            "enum": [
              "active",
              "available",
              "reserved",
              "deleted",
              "pending"
            ]
          }
        }
      },
      "ValidatorEthereum": {
        "description": "Ethereum validator",
        "required": [
          "public_key",
          "protocol",
          "network",
          "plan_status",
          "node_xid"
        ],
        "type": "object",
        "properties": {
          "public_key": {
            "type": "string",
            "description": "A BLS public Key.",
            "format": "base64",
            "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
          },
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          },
          "network": {
            "type": "string",
            "description": "Protocol-specific network.",
            "enum": [
              "mainnet",
              "localnet",
              "goerli",
              "prater",
              "holesky",
              "testnet",
              "devnet",
              "kusama",
              "westend",
              "preprod",
              "fuji",
              "local"
            ]
          },
          "provider": {
            "description": "Cloud provider which will host the node.",
            "x-go-type": "models.ProviderID",
            "x-go-type-import": {
              "path": "go.blockdaemon.com/nodeq-server/pkg/models",
              "name": "models"
            }
          },
          "region": {
            "description": "cloud provider's zone code",
            "type": "string"
          },
          "config": {
            "type": "object",
            "description": "the Ethereum config for a validator",
            "required": [
              "fee_recipient",
              "mev"
            ],
            "properties": {
              "fee_recipient": {
                "type": "string",
                "description": "fee recipient address"
              },
              "mev": {
                "type": "object",
                "required": [
                  "enabled"
                ],
                "properties": {
                  "enabled": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "plan_status": {
            "type": "string",
            "description": "Staking API validator status",
            "x-go-type": "models.ValidatorStatus",
            "x-go-type-import": {
              "path": "go.blockdaemon.com/nodeq-server/pkg/models",
              "name": "models"
            }
          },
          "onchain_status": {
            "type": "string",
            "description": "On-chain status of the validator.\nReference: https://docs.blockdaemon.com/docs/eth-validator-statuses\n",
            "enum": [
              "pending_initialized",
              "pending_queued",
              "active_ongoing",
              "active_exiting",
              "active_slashed",
              "exited_unslashed",
              "exited_slashed",
              "withdrawal_possible",
              "withdrawal_done",
              "unknown"
            ]
          },
          "exit_submitted": {
            "type": "boolean"
          },
          "node_xid": {
            "type": "string",
            "description": "The node XID",
            "example": "c9slgu11eqli4rc7djlg"
          },
          "queue_progress": {
            "description": "the number of epochs remaining in the current queue",
            "type": "integer",
            "format": "int64",
            "example": 280312
          },
          "withdrawalDate": {
            "type": "string",
            "example": "2024-01-25T15:44:00Z",
            "description": "Date when the validator was withdrawn."
          },
          "activationDate": {
            "type": "string",
            "example": "2024-01-25T15:44:00Z",
            "description": "Date when the validator was activated."
          }
        }
      },
      "ValidatorEthereumConfig": {
        "type": "object",
        "description": "the Ethereum config for a validator",
        "required": [
          "fee_recipient",
          "mev"
        ],
        "properties": {
          "fee_recipient": {
            "type": "string",
            "description": "fee recipient address"
          },
          "mev": {
            "type": "object",
            "required": [
              "enabled"
            ],
            "properties": {
              "enabled": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "ValidatorEthereumMevConfig": {
        "type": "object",
        "required": [
          "enabled"
        ],
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "ValidatorAddressStatus": {
        "type": "object",
        "description": "Validator status",
        "required": [
          "address",
          "status"
        ],
        "properties": {
          "address": {
            "type": "string",
            "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
            "format": "hex",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
          },
          "status": {
            "type": "string",
            "description": "On-chain status of the validator.\nReference: https://docs.blockdaemon.com/docs/eth-validator-statuses\n",
            "enum": [
              "pending_initialized",
              "pending_queued",
              "active_ongoing",
              "active_exiting",
              "active_slashed",
              "exited_unslashed",
              "exited_slashed",
              "withdrawal_possible",
              "withdrawal_done",
              "unknown"
            ]
          },
          "withdrawal_date": {
            "type": "string",
            "example": "2024-01-25T15:44:00Z",
            "description": "Date when the validator was withdrawn."
          },
          "activation_date": {
            "type": "string",
            "example": "2024-01-25T15:44:00Z",
            "description": "Date when the validator was activated."
          }
        }
      },
      "ValidatorStatuses": {
        "type": "object",
        "description": "Validator statuses on-chain",
        "required": [
          "protocol",
          "network",
          "validator_statuses",
          "customer_id"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          },
          "network": {
            "type": "string",
            "description": "Protocol-specific network.",
            "enum": [
              "mainnet",
              "localnet",
              "goerli",
              "prater",
              "holesky",
              "testnet",
              "devnet",
              "kusama",
              "westend",
              "preprod",
              "fuji",
              "local"
            ]
          },
          "validator_statuses": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Validator status",
              "required": [
                "address",
                "status"
              ],
              "properties": {
                "address": {
                  "type": "string",
                  "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                  "format": "hex",
                  "pattern": "^0x[a-fA-F0-9]{40}$",
                  "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                },
                "status": {
                  "type": "string",
                  "description": "On-chain status of the validator.\nReference: https://docs.blockdaemon.com/docs/eth-validator-statuses\n",
                  "enum": [
                    "pending_initialized",
                    "pending_queued",
                    "active_ongoing",
                    "active_exiting",
                    "active_slashed",
                    "exited_unslashed",
                    "exited_slashed",
                    "withdrawal_possible",
                    "withdrawal_done",
                    "unknown"
                  ]
                },
                "withdrawal_date": {
                  "type": "string",
                  "example": "2024-01-25T15:44:00Z",
                  "description": "Date when the validator was withdrawn."
                },
                "activation_date": {
                  "type": "string",
                  "example": "2024-01-25T15:44:00Z",
                  "description": "Date when the validator was activated."
                }
              }
            }
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          }
        }
      },
      "ValidatorQuantity": {
        "type": "integer",
        "description": "number of validators to create",
        "format": "uint64"
      },
      "WithdrawalDate": {
        "type": "string",
        "example": "2024-01-25T15:44:00Z",
        "description": "Date when the validator was withdrawn."
      },
      "Wei": {
        "type": "string",
        "description": "Denomination of the cryptocurrency Polygon.",
        "pattern": "^[1-9]\\d+$",
        "example": "100"
      },
      "Withdraw": {
        "type": "object",
        "description": "Result of the new withdraw transaction request.",
        "required": [
          "protocol",
          "network"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          },
          "network": {
            "type": "string",
            "description": "Protocol-specific network.",
            "enum": [
              "mainnet",
              "localnet",
              "goerli",
              "prater",
              "holesky",
              "testnet",
              "devnet",
              "kusama",
              "westend",
              "preprod",
              "fuji",
              "local"
            ]
          },
          "polkadot": {
            "type": "object",
            "description": "Result of the withdraw transaction request",
            "required": [
              "unsigned_transaction"
            ],
            "properties": {
              "unsigned_transaction": {
                "type": "string",
                "format": "base64",
                "description": "Generated Polkadot unsigned transaction for the provided withdrawal intent details.",
                "example": "0x1c04060301000000"
              },
              "customer_address": {
                "description": "Address of the customer account from which the DOT should be withdrawn.",
                "type": "string",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              },
              "controller_address": {
                "description": "Address of the customer account from which the DOT should be withdrawn.\nSame as customer_address. Deprecated - will be removed in a later version.",
                "type": "string",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              }
            }
          },
          "solana": {
            "type": "object",
            "description": "Result of the withdraw transaction request",
            "required": [
              "unsigned_transaction",
              "withdrawal_authority_public_key",
              "stake_account_address",
              "amount",
              "stake_id",
              "expiration_time"
            ],
            "properties": {
              "unsigned_transaction": {
                "type": "string",
                "format": "base64",
                "description": "Generated unsigned transaction smart contract call data.",
                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
              },
              "withdrawal_authority_public_key": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              },
              "stake_account_address": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              },
              "stake_id": {
                "description": "Unique stake identifier.",
                "type": "string",
                "format": "base58",
                "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
              },
              "amount": {
                "type": "string",
                "description": "Denomination of the cryptocurrency Solana.",
                "pattern": "^[1-9]\\d+$",
                "example": "100"
              },
              "expiration_time": {
                "type": "integer",
                "description": "Transaction expiration time",
                "format": "int64",
                "example": 1689939023
              }
            }
          }
        }
      },
      "WithdrawIntent": {
        "type": "object",
        "description": "Result of a new withdrawal intent request.",
        "required": [
          "withdraw_intent_id",
          "protocol",
          "network",
          "customer_id"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          },
          "network": {
            "type": "string",
            "description": "Protocol-specific network.",
            "enum": [
              "mainnet",
              "localnet",
              "goerli",
              "prater",
              "holesky",
              "testnet",
              "devnet",
              "kusama",
              "westend",
              "preprod",
              "fuji",
              "local"
            ]
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          },
          "withdraw_intent_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique idenifier for a withdrawal intent.",
            "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
          },
          "polkadot": {
            "type": "object",
            "description": "Polkadot withdrawal intent response",
            "required": [
              "unsigned_transaction"
            ],
            "properties": {
              "unsigned_transaction": {
                "type": "string",
                "format": "base64",
                "description": "Unsigned withdraw intent transaction.\nOnce this transaction is signed, broadcasted to the network and included in the canonical history of the chain, the unbonded stake controlled by this customer account will be withdrawn from its stake pool.",
                "example": "0x1c04060301000000"
              },
              "customer_address": {
                "description": "Address of the customer account whose unbonded stake will be withdrawn.",
                "type": "string",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              },
              "controller_address": {
                "description": "Address of the customer account whose unbonded stake will be withdrawn.\nSame as customer_address. Deprecated - will be removed in a later version.",
                "type": "string",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              }
            }
          },
          "solana": {
            "type": "object",
            "required": [
              "withdraws",
              "total_withdraw_amount"
            ],
            "properties": {
              "withdraws": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "Result of the withdraw transaction request",
                  "required": [
                    "unsigned_transaction",
                    "withdrawal_authority_public_key",
                    "stake_account_address",
                    "amount",
                    "stake_id",
                    "expiration_time"
                  ],
                  "properties": {
                    "unsigned_transaction": {
                      "type": "string",
                      "format": "base64",
                      "description": "Generated unsigned transaction smart contract call data.",
                      "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                    },
                    "withdrawal_authority_public_key": {
                      "type": "string",
                      "description": "Public Key of an asymmetric key-pair.",
                      "format": "base58",
                      "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                      "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                    },
                    "stake_account_address": {
                      "type": "string",
                      "description": "Public Key of an asymmetric key-pair.",
                      "format": "base58",
                      "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                      "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                    },
                    "stake_id": {
                      "description": "Unique stake identifier.",
                      "type": "string",
                      "format": "base58",
                      "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                    },
                    "amount": {
                      "type": "string",
                      "description": "Denomination of the cryptocurrency Solana.",
                      "pattern": "^[1-9]\\d+$",
                      "example": "100"
                    },
                    "expiration_time": {
                      "type": "integer",
                      "description": "Transaction expiration time",
                      "format": "int64",
                      "example": 1689939023
                    }
                  }
                }
              },
              "total_withdraw_amount": {
                "type": "string",
                "description": "Denomination of the cryptocurrency Solana.",
                "pattern": "^[1-9]\\d+$",
                "example": "100"
              }
            }
          },
          "polygon": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "to",
                "unsigned_transaction",
                "unbond_nonce",
                "wallet_address"
              ],
              "properties": {
                "to": {
                  "type": "string",
                  "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                  "format": "hex",
                  "pattern": "^0x[a-fA-F0-9]{40}$",
                  "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                },
                "unsigned_transaction": {
                  "type": "string",
                  "format": "base64",
                  "description": "Generated unsigned transaction smart contract call data.",
                  "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                },
                "unbond_nonce": {
                  "type": "integer",
                  "description": "Number for one use only",
                  "example": 1
                },
                "wallet_address": {
                  "type": "string",
                  "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                  "format": "hex",
                  "pattern": "^0x[a-fA-F0-9]{40}$",
                  "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                }
              }
            }
          },
          "near": {
            "type": "object",
            "description": "NEAR Protocol Withdrawal Intent",
            "required": [
              "to",
              "unsigned_transaction",
              "wallet_address",
              "public_key",
              "withdrawal_intent_id",
              "expiration_time"
            ],
            "properties": {
              "withdrawal_intent_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique idenifier for deactivate intent.",
                "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
              },
              "to": {
                "type": "string",
                "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                "example": "alice.near"
              },
              "unsigned_transaction": {
                "type": "string",
                "format": "base64",
                "description": "Generated unsigned transaction smart contract call data.",
                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
              },
              "amount": {
                "type": "string",
                "description": "Denomination of NEAR Protocol.",
                "pattern": "^[1-9]\\d+$",
                "example": "100000000000000000000000000"
              },
              "wallet_address": {
                "type": "string",
                "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                "example": "alice.near"
              },
              "public_key": {
                "type": "string",
                "description": "Base58 encoded public key prefixed by ed25519, associated with the private key that will be used to sign the transaction.",
                "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
                "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
              },
              "expiration_time": {
                "type": "integer",
                "description": "Transaction expiration time",
                "format": "int64",
                "example": 1689939023
              }
            }
          }
        }
      },
      "WithdrawalIntents": {
        "type": "object",
        "description": "Withdrawal intents",
        "required": [
          "protocol",
          "network",
          "customer_id"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          },
          "network": {
            "type": "string",
            "description": "Protocol-specific network.",
            "enum": [
              "mainnet",
              "localnet",
              "goerli",
              "prater",
              "holesky",
              "testnet",
              "devnet",
              "kusama",
              "westend",
              "preprod",
              "fuji",
              "local"
            ]
          },
          "solana": {
            "type": "array",
            "description": "List of withdrawal intents",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "withdraw_intent_id",
                    "customer_id"
                  ],
                  "properties": {
                    "withdraw_intent_id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Unique idenifier for a withdrawal intent.",
                      "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "Unique identifier for a customer",
                      "example": "SatoshiNakamoto-xUYJbPw9hw",
                      "minimum": 1
                    }
                  }
                },
                {
                  "type": "object",
                  "description": "Result of a new withdrawal intent request.",
                  "required": [
                    "protocol",
                    "network",
                    "solana"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Solana protocol",
                      "enum": [
                        "solana"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "Solana network",
                      "enum": [
                        "mainnet",
                        "testnet"
                      ]
                    },
                    "solana": {
                      "type": "object",
                      "required": [
                        "withdraws",
                        "total_withdraw_amount"
                      ],
                      "properties": {
                        "withdraws": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "description": "Result of the withdraw transaction request",
                            "required": [
                              "unsigned_transaction",
                              "withdrawal_authority_public_key",
                              "stake_account_address",
                              "amount",
                              "stake_id",
                              "expiration_time"
                            ],
                            "properties": {
                              "unsigned_transaction": {
                                "type": "string",
                                "format": "base64",
                                "description": "Generated unsigned transaction smart contract call data.",
                                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                              },
                              "withdrawal_authority_public_key": {
                                "type": "string",
                                "description": "Public Key of an asymmetric key-pair.",
                                "format": "base58",
                                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                              },
                              "stake_account_address": {
                                "type": "string",
                                "description": "Public Key of an asymmetric key-pair.",
                                "format": "base58",
                                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                              },
                              "stake_id": {
                                "description": "Unique stake identifier.",
                                "type": "string",
                                "format": "base58",
                                "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                              },
                              "amount": {
                                "type": "string",
                                "description": "Denomination of the cryptocurrency Solana.",
                                "pattern": "^[1-9]\\d+$",
                                "example": "100"
                              },
                              "expiration_time": {
                                "type": "integer",
                                "description": "Transaction expiration time",
                                "format": "int64",
                                "example": 1689939023
                              }
                            }
                          }
                        },
                        "total_withdraw_amount": {
                          "type": "string",
                          "description": "Denomination of the cryptocurrency Solana.",
                          "pattern": "^[1-9]\\d+$",
                          "example": "100"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "near": {
            "type": "array",
            "description": "List of withdrawal intents",
            "items": {
              "type": "object",
              "description": "NEAR Protocol Withdrawal Intent",
              "required": [
                "to",
                "unsigned_transaction",
                "wallet_address",
                "public_key",
                "withdrawal_intent_id",
                "expiration_time"
              ],
              "properties": {
                "withdrawal_intent_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique idenifier for deactivate intent.",
                  "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                },
                "to": {
                  "type": "string",
                  "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                  "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                  "example": "alice.near"
                },
                "unsigned_transaction": {
                  "type": "string",
                  "format": "base64",
                  "description": "Generated unsigned transaction smart contract call data.",
                  "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                },
                "amount": {
                  "type": "string",
                  "description": "Denomination of NEAR Protocol.",
                  "pattern": "^[1-9]\\d+$",
                  "example": "100000000000000000000000000"
                },
                "wallet_address": {
                  "type": "string",
                  "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                  "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                  "example": "alice.near"
                },
                "public_key": {
                  "type": "string",
                  "description": "Base58 encoded public key prefixed by ed25519, associated with the private key that will be used to sign the transaction.",
                  "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
                  "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
                },
                "expiration_time": {
                  "type": "integer",
                  "description": "Transaction expiration time",
                  "format": "int64",
                  "example": 1689939023
                }
              }
            }
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          }
        }
      },
      "WithdrawalIntentSolana": {
        "type": "object",
        "required": [
          "withdraws",
          "total_withdraw_amount"
        ],
        "properties": {
          "withdraws": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Result of the withdraw transaction request",
              "required": [
                "unsigned_transaction",
                "withdrawal_authority_public_key",
                "stake_account_address",
                "amount",
                "stake_id",
                "expiration_time"
              ],
              "properties": {
                "unsigned_transaction": {
                  "type": "string",
                  "format": "base64",
                  "description": "Generated unsigned transaction smart contract call data.",
                  "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                },
                "withdrawal_authority_public_key": {
                  "type": "string",
                  "description": "Public Key of an asymmetric key-pair.",
                  "format": "base58",
                  "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                  "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                },
                "stake_account_address": {
                  "type": "string",
                  "description": "Public Key of an asymmetric key-pair.",
                  "format": "base58",
                  "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                  "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                },
                "stake_id": {
                  "description": "Unique stake identifier.",
                  "type": "string",
                  "format": "base58",
                  "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                },
                "amount": {
                  "type": "string",
                  "description": "Denomination of the cryptocurrency Solana.",
                  "pattern": "^[1-9]\\d+$",
                  "example": "100"
                },
                "expiration_time": {
                  "type": "integer",
                  "description": "Transaction expiration time",
                  "format": "int64",
                  "example": 1689939023
                }
              }
            }
          },
          "total_withdraw_amount": {
            "type": "string",
            "description": "Denomination of the cryptocurrency Solana.",
            "pattern": "^[1-9]\\d+$",
            "example": "100"
          }
        }
      },
      "WithdrawalIntentsSolana": {
        "type": "array",
        "description": "List of withdrawal intents",
        "items": {
          "allOf": [
            {
              "type": "object",
              "required": [
                "withdraw_intent_id",
                "customer_id"
              ],
              "properties": {
                "withdraw_intent_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique idenifier for a withdrawal intent.",
                  "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                },
                "customer_id": {
                  "type": "string",
                  "description": "Unique identifier for a customer",
                  "example": "SatoshiNakamoto-xUYJbPw9hw",
                  "minimum": 1
                }
              }
            },
            {
              "type": "object",
              "description": "Result of a new withdrawal intent request.",
              "required": [
                "protocol",
                "network",
                "solana"
              ],
              "properties": {
                "protocol": {
                  "type": "string",
                  "description": "Solana protocol",
                  "enum": [
                    "solana"
                  ]
                },
                "network": {
                  "type": "string",
                  "description": "Solana network",
                  "enum": [
                    "mainnet",
                    "testnet"
                  ]
                },
                "solana": {
                  "type": "object",
                  "required": [
                    "withdraws",
                    "total_withdraw_amount"
                  ],
                  "properties": {
                    "withdraws": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Result of the withdraw transaction request",
                        "required": [
                          "unsigned_transaction",
                          "withdrawal_authority_public_key",
                          "stake_account_address",
                          "amount",
                          "stake_id",
                          "expiration_time"
                        ],
                        "properties": {
                          "unsigned_transaction": {
                            "type": "string",
                            "format": "base64",
                            "description": "Generated unsigned transaction smart contract call data.",
                            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                          },
                          "withdrawal_authority_public_key": {
                            "type": "string",
                            "description": "Public Key of an asymmetric key-pair.",
                            "format": "base58",
                            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                          },
                          "stake_account_address": {
                            "type": "string",
                            "description": "Public Key of an asymmetric key-pair.",
                            "format": "base58",
                            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                          },
                          "stake_id": {
                            "description": "Unique stake identifier.",
                            "type": "string",
                            "format": "base58",
                            "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                          },
                          "amount": {
                            "type": "string",
                            "description": "Denomination of the cryptocurrency Solana.",
                            "pattern": "^[1-9]\\d+$",
                            "example": "100"
                          },
                          "expiration_time": {
                            "type": "integer",
                            "description": "Transaction expiration time",
                            "format": "int64",
                            "example": 1689939023
                          }
                        }
                      }
                    },
                    "total_withdraw_amount": {
                      "type": "string",
                      "description": "Denomination of the cryptocurrency Solana.",
                      "pattern": "^[1-9]\\d+$",
                      "example": "100"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "WithdrawIntentPolygon": {
        "type": "object",
        "required": [
          "to",
          "unsigned_transaction",
          "unbond_nonce",
          "wallet_address"
        ],
        "properties": {
          "to": {
            "type": "string",
            "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
            "format": "hex",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
          },
          "unsigned_transaction": {
            "type": "string",
            "format": "base64",
            "description": "Generated unsigned transaction smart contract call data.",
            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
          },
          "unbond_nonce": {
            "type": "integer",
            "description": "Number for one use only",
            "example": 1
          },
          "wallet_address": {
            "type": "string",
            "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
            "format": "hex",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
          }
        }
      },
      "WithdrawIntentPolkadot": {
        "type": "object",
        "description": "Polkadot withdrawal intent response",
        "required": [
          "unsigned_transaction"
        ],
        "properties": {
          "unsigned_transaction": {
            "type": "string",
            "format": "base64",
            "description": "Unsigned withdraw intent transaction.\nOnce this transaction is signed, broadcasted to the network and included in the canonical history of the chain, the unbonded stake controlled by this customer address will be withdrawn from its stake pool.",
            "example": "0x1c04060301000000"
          },
          "customer_address": {
            "description": "Address of the customer account whose unbonded stake will be withdrawn.",
            "type": "string",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "controller_address": {
            "description": "Address of the customer account whose unbonded stake will be withdrawn.\nSame as customer_address. Deprecated - will be removed in a later version.",
            "type": "string",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          }
        }
      },
      "WithdrawalIntentPolkadot": {
        "type": "object",
        "description": "Polkadot withdrawal intent response",
        "required": [
          "unsigned_transaction"
        ],
        "properties": {
          "unsigned_transaction": {
            "type": "string",
            "format": "base64",
            "description": "Unsigned withdraw intent transaction.\nOnce this transaction is signed, broadcasted to the network and included in the canonical history of the chain, the unbonded stake controlled by this customer account will be withdrawn from its stake pool.",
            "example": "0x1c04060301000000"
          },
          "customer_address": {
            "description": "Address of the customer account whose unbonded stake will be withdrawn.",
            "type": "string",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "controller_address": {
            "description": "Address of the customer account whose unbonded stake will be withdrawn.\nSame as customer_address. Deprecated - will be removed in a later version.",
            "type": "string",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          }
        }
      },
      "WithdrawSolana": {
        "type": "object",
        "description": "Result of the withdraw transaction request",
        "required": [
          "unsigned_transaction",
          "withdrawal_authority_public_key",
          "stake_account_address",
          "amount",
          "stake_id",
          "expiration_time"
        ],
        "properties": {
          "unsigned_transaction": {
            "type": "string",
            "format": "base64",
            "description": "Generated unsigned transaction smart contract call data.",
            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
          },
          "withdrawal_authority_public_key": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "stake_account_address": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          },
          "stake_id": {
            "description": "Unique stake identifier.",
            "type": "string",
            "format": "base58",
            "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
          },
          "amount": {
            "type": "string",
            "description": "Denomination of the cryptocurrency Solana.",
            "pattern": "^[1-9]\\d+$",
            "example": "100"
          },
          "expiration_time": {
            "type": "integer",
            "description": "Transaction expiration time",
            "format": "int64",
            "example": 1689939023
          }
        }
      },
      "TotalPending": {
        "description": "total number of pending validators in a staking plan",
        "type": "integer",
        "format": "int64"
      },
      "TotalAvailable": {
        "description": "total number of available validators in a staking plan",
        "type": "integer",
        "format": "int64"
      },
      "TotalActive": {
        "description": "total number of active validators in a staking plan",
        "type": "integer",
        "format": "int64"
      },
      "FeeRecipient": {
        "type": "string",
        "description": "An Ethereum address to receive transaction fees from published blocks. 20-bytes, hex encoded with 0x prefix, case insensitive.",
        "example": "0x93247f2209abcacf57b75a51dafae777f9dd38bc",
        "pattern": "^0x[a-fA-F0-9]{40}$"
      },
      "NewCancelIntent": {
        "type": "object",
        "description": "Request object to create a new Deactivate Intent.",
        "required": [
          "protocol",
          "network",
          "customer_id",
          "intent_id"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          },
          "network": {
            "type": "string",
            "description": "Protocol-specific network.",
            "enum": [
              "mainnet",
              "localnet",
              "goerli",
              "prater",
              "holesky",
              "testnet",
              "devnet",
              "kusama",
              "westend",
              "preprod",
              "fuji",
              "local"
            ]
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          },
          "intent_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique idenifier for intent.",
            "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
          }
        }
      },
      "CancelIntent": {
        "type": "object",
        "description": "Intent id.",
        "required": [
          "intent_id"
        ],
        "properties": {
          "intent_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique idenifier for deactivate intent.",
            "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
          }
        }
      },
      "Currency": {
        "type": "string",
        "description": "Coin denomination name",
        "enum": [
          "lamports"
        ]
      },
      "DeactivateIntentId": {
        "type": "string",
        "format": "uuid",
        "description": "Unique idenifier for deactivate intent.",
        "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
      },
      "WithdrawIntentId": {
        "type": "string",
        "format": "uuid",
        "description": "Unique idenifier for a withdrawal intent.",
        "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
      },
      "EthereumEpoch": {
        "type": "string",
        "description": "The numeric index of an [Ethereum epoch](https://ethereum.org/en/glossary/#epoch).",
        "example": "1001"
      },
      "EthereumValidatorIndex": {
        "type": "string",
        "description": "Validator index",
        "example": "25"
      },
      "EthereumValidatorPublicKey": {
        "type": "string",
        "description": "Public Key of an asymmetric key-pair.",
        "format": "hex",
        "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
      },
      "ExitEthereumValidator": {
        "type": "object",
        "description": "Data about validator to exit.",
        "required": [
          "validator_identifier"
        ],
        "properties": {
          "validator_identifier": {
            "type": "object",
            "description": "Information to identify validator. Only either validator index or validator public key is required.",
            "properties": {
              "validator_public_key": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "hex",
                "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
              },
              "validator_index": {
                "type": "string",
                "description": "Validator index",
                "example": "25"
              }
            },
            "additionalProperties": false,
            "minProperties": 1
          }
        }
      },
      "TotalReserved": {
        "description": "total number of reserved validators in a staking plan",
        "type": "integer",
        "format": "int64"
      },
      "ValidatorPerformanceDetails": {
        "type": "object",
        "required": [
          "protocol",
          "network",
          "custodian",
          "details"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          },
          "network": {
            "type": "string",
            "description": "Protocol-specific network.",
            "enum": [
              "mainnet",
              "localnet",
              "goerli",
              "prater",
              "holesky",
              "testnet",
              "devnet",
              "kusama",
              "westend",
              "preprod",
              "fuji",
              "local"
            ]
          },
          "custodian": {
            "type": "string",
            "description": "Custodian handle",
            "enum": [
              "metamask"
            ]
          },
          "details": {
            "type": "object",
            "properties": {
              "fees": {
                "type": "number",
                "minimum": 0,
                "maximum": 100,
                "format": "float",
                "description": "Rate (%) charged based on a percentage of staking rewards",
                "example": 3.5
              },
              "tvl": {
                "type": "number",
                "minimum": 0,
                "format": "double",
                "description": "Sum of validators' balances.  Includes initial deposit (32ETH) + rewards.",
                "example": 7060624149.296207
              },
              "feeTiers": {
                "type": "array",
                "items": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 100
                },
                "minItems": 5,
                "maxItems": 5,
                "description": "The tiers of operator fee rate (%), charged based on a percentage of staking rewards. The rewards of each validator a MMI user has with you get taxed depending on their **total staking position with you**: <ul>\n  <li>Tier `1`: Less than `5000 ETH`</li>\n  <li>Tier `2`: Greater than or equal to `5000 ETH` and less than `15000 ETH`</li>\n  <li>Tier `3`: Greater than or equal to `15000 ETH` and less than `30000 ETH`</li>\n  <li>Tier `4`: Greater than or equal to `30000 ETH` and less than `60000 ETH`</li>\n  <li>Tier `5`: Greater than `60000 ETH`</li>\n</ul> Each validator \"locks in\" the five tiers that the Connector was returning at the time of staking, for the whole validator lifetime.",
                "example": [
                  7,
                  5,
                  4,
                  3,
                  2
                ]
              }
            }
          }
        }
      },
      "NearAddress": {
        "type": "string",
        "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
        "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
        "example": "alice.near"
      },
      "NearNetwork": {
        "type": "string",
        "description": "NEAR network",
        "enum": [
          "mainnet",
          "testnet",
          "localnet"
        ]
      },
      "NearYocto": {
        "type": "string",
        "description": "Denomination of NEAR Protocol.",
        "pattern": "^[1-9]\\d+$",
        "example": "100000000000000000000000000"
      },
      "NewStakeIntentNear": {
        "type": "object",
        "description": "Request object to create a new Stake Intent for NEAR Protocol",
        "required": [
          "amount",
          "wallet_address",
          "public_key"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "description": "Amount of yoctoNEAR to stake. 1 NEAR = 1e24 yoctoNEAR.",
            "pattern": "^[1-9]\\d+$",
            "example": "100000000000000000000000000"
          },
          "wallet_address": {
            "type": "string",
            "description": "Account to stake from (can be either [named account or implicit account](https://docs.near.org/concepts/basics/accounts/account-id/))",
            "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
            "example": "alice.near"
          },
          "public_key": {
            "type": "string",
            "description": "Must be the public key of the private key that will be used to sign the returned transaction. The public key must also be added as [FullAccess](https://docs.near.org/concepts/basics/accounts/access-keys#full-access-keys) key to the `wallet_address` account.",
            "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
            "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
          },
          "to": {
            "type": "string",
            "description": "Specifies validator to delegate to. Please note that specifying this parameter is only allowed for the `testnet` network.",
            "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
            "example": "alice.near"
          },
          "plan_id": {
            "type": "string",
            "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
            "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
          }
        }
      },
      "SolanaWithdrawalIntentResponse": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "withdraw_intent_id",
              "customer_id"
            ],
            "properties": {
              "withdraw_intent_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique idenifier for a withdrawal intent.",
                "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
              },
              "customer_id": {
                "type": "string",
                "description": "Unique identifier for a customer",
                "example": "SatoshiNakamoto-xUYJbPw9hw",
                "minimum": 1
              }
            }
          },
          {
            "type": "object",
            "description": "Result of a new withdrawal intent request.",
            "required": [
              "protocol",
              "network",
              "solana"
            ],
            "properties": {
              "protocol": {
                "type": "string",
                "description": "Solana protocol",
                "enum": [
                  "solana"
                ]
              },
              "network": {
                "type": "string",
                "description": "Solana network",
                "enum": [
                  "mainnet",
                  "testnet"
                ]
              },
              "solana": {
                "type": "object",
                "required": [
                  "withdraws",
                  "total_withdraw_amount"
                ],
                "properties": {
                  "withdraws": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "Result of the withdraw transaction request",
                      "required": [
                        "unsigned_transaction",
                        "withdrawal_authority_public_key",
                        "stake_account_address",
                        "amount",
                        "stake_id",
                        "expiration_time"
                      ],
                      "properties": {
                        "unsigned_transaction": {
                          "type": "string",
                          "format": "base64",
                          "description": "Generated unsigned transaction smart contract call data.",
                          "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                        },
                        "withdrawal_authority_public_key": {
                          "type": "string",
                          "description": "Public Key of an asymmetric key-pair.",
                          "format": "base58",
                          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                        },
                        "stake_account_address": {
                          "type": "string",
                          "description": "Public Key of an asymmetric key-pair.",
                          "format": "base58",
                          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                        },
                        "stake_id": {
                          "description": "Unique stake identifier.",
                          "type": "string",
                          "format": "base58",
                          "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                        },
                        "amount": {
                          "type": "string",
                          "description": "Denomination of the cryptocurrency Solana.",
                          "pattern": "^[1-9]\\d+$",
                          "example": "100"
                        },
                        "expiration_time": {
                          "type": "integer",
                          "description": "Transaction expiration time",
                          "format": "int64",
                          "example": 1689939023
                        }
                      }
                    }
                  },
                  "total_withdraw_amount": {
                    "type": "string",
                    "description": "Denomination of the cryptocurrency Solana.",
                    "pattern": "^[1-9]\\d+$",
                    "example": "100"
                  }
                }
              }
            }
          }
        ]
      },
      "StakeIntentNear": {
        "type": "object",
        "description": "NEAR Protocol Stake Intent",
        "required": [
          "to",
          "unsigned_transaction",
          "amount",
          "wallet_address",
          "public_key",
          "expiration_time"
        ],
        "properties": {
          "to": {
            "type": "string",
            "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
            "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
            "example": "alice.near"
          },
          "unsigned_transaction": {
            "type": "string",
            "format": "base64",
            "description": "Generated unsigned transaction smart contract call data.",
            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
          },
          "amount": {
            "type": "string",
            "description": "Denomination of NEAR Protocol.",
            "pattern": "^[1-9]\\d+$",
            "example": "100000000000000000000000000"
          },
          "wallet_address": {
            "type": "string",
            "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
            "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
            "example": "alice.near"
          },
          "public_key": {
            "type": "string",
            "description": "Base58 encoded public key prefixed by ed25519, associated with the private key that will be used to sign the transaction.",
            "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
            "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
          },
          "expiration_time": {
            "type": "integer",
            "description": "Transaction expiration time",
            "format": "int64",
            "example": 1689939023
          }
        }
      },
      "NewDeactivateIntentNear": {
        "type": "object",
        "description": "Request object to create a new deactivation intent for NEAR Protocol.",
        "required": [
          "amount",
          "wallet_address",
          "public_key"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "description": "Amount of yoctoNEAR to deactivate. 1 NEAR = 1e24 yoctoNEAR",
            "pattern": "^[1-9]\\d+$",
            "example": "100000000000000000000000000"
          },
          "wallet_address": {
            "type": "string",
            "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
            "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
            "example": "alice.near"
          },
          "public_key": {
            "type": "string",
            "description": "Base58 encoded public key prefixed by ed25519, associated with the private key that will be used to sign the transaction.",
            "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
            "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
          },
          "to": {
            "type": "string",
            "description": "Specifies the validator the stake was delegated to. Please note that specifying this parameter is only allowed for the `testnet` network.",
            "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
            "example": "alice.near"
          }
        }
      },
      "DeactivateIntentNear": {
        "type": "object",
        "description": "NEAR Protocol Deactivate Intent",
        "required": [
          "to",
          "unsigned_transaction",
          "amount",
          "wallet_address",
          "public_key",
          "expiration_time"
        ],
        "properties": {
          "to": {
            "type": "string",
            "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
            "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
            "example": "alice.near"
          },
          "unsigned_transaction": {
            "type": "string",
            "format": "base64",
            "description": "Generated unsigned transaction smart contract call data.",
            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
          },
          "amount": {
            "type": "string",
            "description": "Denomination of NEAR Protocol.",
            "pattern": "^[1-9]\\d+$",
            "example": "100000000000000000000000000"
          },
          "wallet_address": {
            "type": "string",
            "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
            "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
            "example": "alice.near"
          },
          "public_key": {
            "type": "string",
            "description": "Base58 encoded public key prefixed by ed25519, associated with the private key that will be used to sign the transaction.",
            "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
            "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
          },
          "expiration_time": {
            "type": "integer",
            "description": "Transaction expiration time",
            "format": "int64",
            "example": 1689939023
          }
        }
      },
      "NewWithdrawIntentNear": {
        "type": "object",
        "description": "Request object to create a new withdrawal intent for NEAR.",
        "required": [
          "wallet_address",
          "public_key"
        ],
        "properties": {
          "wallet_address": {
            "type": "string",
            "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
            "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
            "example": "alice.near"
          },
          "public_key": {
            "type": "string",
            "description": "Base58 encoded public key prefixed by ed25519, associated with the private key that will be used to sign the transaction.",
            "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
            "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
          },
          "to": {
            "type": "string",
            "description": "Specifies the validator the stake was delegated to. Please note that specifying this parameter is only allowed for the `testnet` network.",
            "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
            "example": "alice.near"
          }
        }
      },
      "WithdrawalIntentNear": {
        "type": "object",
        "description": "NEAR Protocol Withdrawal Intent",
        "required": [
          "to",
          "unsigned_transaction",
          "wallet_address",
          "public_key",
          "withdrawal_intent_id",
          "expiration_time"
        ],
        "properties": {
          "withdrawal_intent_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique idenifier for deactivate intent.",
            "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
          },
          "to": {
            "type": "string",
            "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
            "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
            "example": "alice.near"
          },
          "unsigned_transaction": {
            "type": "string",
            "format": "base64",
            "description": "Generated unsigned transaction smart contract call data.",
            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
          },
          "amount": {
            "type": "string",
            "description": "Denomination of NEAR Protocol.",
            "pattern": "^[1-9]\\d+$",
            "example": "100000000000000000000000000"
          },
          "wallet_address": {
            "type": "string",
            "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
            "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
            "example": "alice.near"
          },
          "public_key": {
            "type": "string",
            "description": "Base58 encoded public key prefixed by ed25519, associated with the private key that will be used to sign the transaction.",
            "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
            "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
          },
          "expiration_time": {
            "type": "integer",
            "description": "Transaction expiration time",
            "format": "int64",
            "example": 1689939023
          }
        }
      },
      "EthereumExitValidatorMessage": {
        "type": "object",
        "description": "Ethereum exit validator message",
        "required": [
          "validator_index",
          "epoch"
        ],
        "properties": {
          "validator_index": {
            "type": "string",
            "description": "Validator index",
            "example": "25"
          },
          "epoch": {
            "type": "string",
            "description": "The numeric index of an [Ethereum epoch](https://ethereum.org/en/glossary/#epoch).",
            "example": "1001"
          }
        }
      },
      "EthereumSignature": {
        "type": "string",
        "format": "hex",
        "description": "Ethereum signature",
        "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187"
      },
      "WalletAmount": {
        "type": "object",
        "description": "Amount per wallet",
        "required": [
          "wallet",
          "amount",
          "validator"
        ],
        "properties": {
          "wallet": {
            "type": "string"
          },
          "amount": {
            "type": "string",
            "pattern": "^[1-9]\\d+$"
          },
          "validator": {
            "type": "string"
          }
        }
      },
      "DeactivationIntentsNear": {
        "type": "array",
        "description": "List of deactivation intents",
        "items": {
          "allOf": [
            {
              "type": "object",
              "required": [
                "deactivate_intent_id",
                "customer_id"
              ],
              "properties": {
                "deactivate_intent_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique idenifier for deactivate intent.",
                  "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                },
                "customer_id": {
                  "type": "string",
                  "description": "Unique identifier for a customer",
                  "example": "SatoshiNakamoto-xUYJbPw9hw",
                  "minimum": 1
                }
              }
            },
            {
              "type": "object",
              "description": "Response to a new deactivation intent request.",
              "required": [
                "protocol",
                "network",
                "near"
              ],
              "properties": {
                "protocol": {
                  "type": "string",
                  "description": "Near protocol",
                  "enum": [
                    "near"
                  ]
                },
                "network": {
                  "type": "string",
                  "description": "NEAR network",
                  "enum": [
                    "mainnet",
                    "testnet",
                    "localnet"
                  ]
                },
                "near": {
                  "type": "object",
                  "description": "NEAR Protocol Deactivate Intent",
                  "required": [
                    "to",
                    "unsigned_transaction",
                    "amount",
                    "wallet_address",
                    "public_key",
                    "expiration_time"
                  ],
                  "properties": {
                    "to": {
                      "type": "string",
                      "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                      "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                      "example": "alice.near"
                    },
                    "unsigned_transaction": {
                      "type": "string",
                      "format": "base64",
                      "description": "Generated unsigned transaction smart contract call data.",
                      "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                    },
                    "amount": {
                      "type": "string",
                      "description": "Denomination of NEAR Protocol.",
                      "pattern": "^[1-9]\\d+$",
                      "example": "100000000000000000000000000"
                    },
                    "wallet_address": {
                      "type": "string",
                      "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                      "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                      "example": "alice.near"
                    },
                    "public_key": {
                      "type": "string",
                      "description": "Base58 encoded public key prefixed by ed25519, associated with the private key that will be used to sign the transaction.",
                      "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
                      "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
                    },
                    "expiration_time": {
                      "type": "integer",
                      "description": "Transaction expiration time",
                      "format": "int64",
                      "example": 1689939023
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "WithdrawalIntentsNear": {
        "type": "array",
        "description": "List of withdrawal intents",
        "items": {
          "type": "object",
          "description": "NEAR Protocol Withdrawal Intent",
          "required": [
            "to",
            "unsigned_transaction",
            "wallet_address",
            "public_key",
            "withdrawal_intent_id",
            "expiration_time"
          ],
          "properties": {
            "withdrawal_intent_id": {
              "type": "string",
              "format": "uuid",
              "description": "Unique idenifier for deactivate intent.",
              "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
            },
            "to": {
              "type": "string",
              "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
              "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
              "example": "alice.near"
            },
            "unsigned_transaction": {
              "type": "string",
              "format": "base64",
              "description": "Generated unsigned transaction smart contract call data.",
              "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
            },
            "amount": {
              "type": "string",
              "description": "Denomination of NEAR Protocol.",
              "pattern": "^[1-9]\\d+$",
              "example": "100000000000000000000000000"
            },
            "wallet_address": {
              "type": "string",
              "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
              "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
              "example": "alice.near"
            },
            "public_key": {
              "type": "string",
              "description": "Base58 encoded public key prefixed by ed25519, associated with the private key that will be used to sign the transaction.",
              "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
              "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
            },
            "expiration_time": {
              "type": "integer",
              "description": "Transaction expiration time",
              "format": "int64",
              "example": 1689939023
            }
          }
        }
      },
      "DeactivationIntentsCardano": {
        "type": "array",
        "description": "List of deactivation intents",
        "items": {
          "type": "object",
          "description": "Cardano Protocol Deactivate Intent",
          "required": [
            "deactivate_intent_id",
            "base_address",
            "unsigned_transaction"
          ],
          "properties": {
            "deactivate_intent_id": {
              "type": "string",
              "format": "uuid",
              "description": "Unique idenifier for deactivate intent.",
              "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
            },
            "base_address": {
              "type": "string",
              "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
              "format": "bech32",
              "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
            },
            "unsigned_transaction": {
              "type": "string",
              "format": "base64",
              "description": "Generated unsigned transaction smart contract call data.",
              "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
            }
          }
        }
      },
      "AddAccountsParams": {
        "type": "object",
        "description": "parameters for adding new accounts to an existing wallet",
        "required": [
          "protocol",
          "xid",
          "number_of_accounts"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          },
          "xid": {
            "type": "string",
            "description": "the node xid",
            "minLength": 1
          },
          "number_of_accounts": {
            "type": "integer",
            "format": "int64",
            "minimum": 1,
            "description": "the number of new accounts"
          },
          "new_node": {
            "type": "boolean",
            "description": "flag for creating a new node"
          }
        }
      },
      "NearPublicKey": {
        "type": "string",
        "description": "Base58 encoded public key prefixed by ed25519, associated with the private key that will be used to sign the transaction.",
        "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
        "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
      },
      "NearInvalidPublicKeyError": {
        "type": "object",
        "description": "Public key dont belong to the NEAR account",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "description": "Error code"
          },
          "message": {
            "type": "string",
            "description": "Error Message"
          }
        }
      },
      "CardanoBaseAddress": {
        "type": "string",
        "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
        "format": "bech32",
        "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
      },
      "EthereumGas": {
        "type": "integer",
        "description": "Gas estimation of the transaction",
        "format": "uint64",
        "example": 1001
      },
      "EthereumEsimatedGas": {
        "type": "object",
        "description": "Ethereum estimated gas",
        "required": [
          "estimated_gas"
        ],
        "properties": {
          "estimated_gas": {
            "type": "integer",
            "description": "Gas estimation of the transaction",
            "format": "uint64",
            "example": 1001
          }
        }
      },
      "EthereumExitValidatorTx": {
        "type": "object",
        "description": "Ethereum exit validator transaction response",
        "required": [
          "message",
          "signature",
          "fork_version"
        ],
        "properties": {
          "message": {
            "type": "object",
            "description": "Ethereum exit validator message",
            "required": [
              "validator_index",
              "epoch"
            ],
            "properties": {
              "validator_index": {
                "type": "string",
                "description": "Validator index",
                "example": "25"
              },
              "epoch": {
                "type": "string",
                "description": "The numeric index of an [Ethereum epoch](https://ethereum.org/en/glossary/#epoch).",
                "example": "1001"
              }
            }
          },
          "signature": {
            "type": "string",
            "format": "hex",
            "description": "Ethereum signature",
            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187"
          },
          "fork_version": {
            "type": "string",
            "description": "A hex-encoded Ethereum fork version value.\n\nThe fork versions values are unique for each network and each fork. As an example, here is the constants preset file for Mainnet:\nhttps://github.com/ethereum/consensus-specs/blob/dev/configs/mainnet.yaml",
            "example": "0x03000000"
          }
        }
      },
      "EthereumValidatorIdentifier": {
        "type": "object",
        "description": "Information to identify validator. Only either validator index or validator public key is required.",
        "properties": {
          "validator_public_key": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "hex",
            "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
          },
          "validator_index": {
            "type": "string",
            "description": "Validator index",
            "example": "25"
          }
        },
        "additionalProperties": false,
        "minProperties": 1
      },
      "PlanNearConfig": {
        "type": "object",
        "description": "NEAR Protocol staking plan config",
        "required": [
          "validator_address"
        ],
        "properties": {
          "validator_address": {
            "type": "object",
            "required": [
              "mainnet",
              "testnet"
            ],
            "properties": {
              "mainnet": {
                "type": "string",
                "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                "example": "alice.near"
              },
              "testnet": {
                "type": "string",
                "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                "example": "alice.near"
              }
            }
          }
        }
      },
      "CardanoPoolId": {
        "type": "string",
        "description": "bech32 encoded pool id.",
        "format": "bech32",
        "example": "pool1ev8fwfccn8gr0zcz3uyps0t0mcrefc6s95wjc6aed3ngc86y5rk"
      },
      "RewardsWithdrawIntents": {
        "type": "object",
        "description": "Rewards withdrawal intents.",
        "required": [
          "protocol",
          "network",
          "customer_id"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          },
          "network": {
            "type": "string",
            "description": "Protocol-specific network.",
            "enum": [
              "mainnet",
              "localnet",
              "goerli",
              "prater",
              "holesky",
              "testnet",
              "devnet",
              "kusama",
              "westend",
              "preprod",
              "fuji",
              "local"
            ]
          },
          "cardano": {
            "type": "array",
            "description": "List of Rewards Withdrawal Intents",
            "items": {
              "type": "object",
              "description": "Cardano Protocol Reward Withdrawal Intent",
              "required": [
                "base_address",
                "rewards_amount",
                "unsigned_transaction"
              ],
              "properties": {
                "base_address": {
                  "type": "string",
                  "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
                  "format": "bech32",
                  "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
                },
                "rewards_amount": {
                  "type": "string",
                  "description": "Denomination of the cryptocurrency Cardano.",
                  "pattern": "^[1-9]\\d+$",
                  "example": "100"
                },
                "unsigned_transaction": {
                  "type": "string",
                  "format": "base64",
                  "description": "Generated unsigned transaction smart contract call data.",
                  "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                }
              }
            }
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          }
        }
      },
      "RewardsWithdrawIntentsCardano": {
        "type": "array",
        "description": "List of Rewards Withdrawal Intents",
        "items": {
          "type": "object",
          "description": "Cardano Protocol Reward Withdrawal Intent",
          "required": [
            "base_address",
            "rewards_amount",
            "unsigned_transaction"
          ],
          "properties": {
            "base_address": {
              "type": "string",
              "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
              "format": "bech32",
              "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
            },
            "rewards_amount": {
              "type": "string",
              "description": "Denomination of the cryptocurrency Cardano.",
              "pattern": "^[1-9]\\d+$",
              "example": "100"
            },
            "unsigned_transaction": {
              "type": "string",
              "format": "base64",
              "description": "Generated unsigned transaction smart contract call data.",
              "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
            }
          }
        }
      },
      "CardanoLovelace": {
        "type": "string",
        "description": "Denomination of the cryptocurrency Cardano.",
        "pattern": "^[1-9]\\d+$",
        "example": "100"
      },
      "SignedTransaction": {
        "type": "string",
        "format": "base64",
        "description": "Hex-encoded raw bytes of a protocol-specific signed transaction.",
        "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
      },
      "NewTransactionSubmission": {
        "type": "object",
        "description": "Transaction for submission",
        "required": [
          "signed_transaction"
        ],
        "properties": {
          "signed_transaction": {
            "type": "string",
            "format": "base64",
            "description": "Hex-encoded raw bytes of a protocol-specific signed transaction.",
            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
          }
        }
      },
      "TransactionSubmission": {
        "type": "object",
        "description": "Transaction for submission response",
        "required": [
          "protocol",
          "network",
          "transaction_id",
          "customer_id"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Cardano protocol",
            "enum": [
              "cardano"
            ]
          },
          "network": {
            "type": "string",
            "description": "Cardano network",
            "enum": [
              "mainnet",
              "preprod",
              "localnet"
            ]
          },
          "transaction_id": {
            "type": "string",
            "description": "Unique identifier for a transaction",
            "format": "base58",
            "example": "transaction_Wgx98Rbi8nQuL9ddn3mTk1"
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          }
        }
      },
      "CardanoNetwork": {
        "type": "string",
        "description": "Cardano network",
        "enum": [
          "mainnet",
          "preprod",
          "localnet"
        ]
      },
      "CardanoProtocol": {
        "type": "string",
        "description": "Cardano protocol",
        "enum": [
          "cardano"
        ]
      },
      "SolanaProtocol": {
        "type": "string",
        "description": "Solana protocol",
        "enum": [
          "solana"
        ]
      },
      "SolanaDeactivatableAmount": {
        "type": "object",
        "description": "The deactivatable amount",
        "required": [
          "protocol",
          "network",
          "amount",
          "currency"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Solana protocol",
            "enum": [
              "solana"
            ]
          },
          "network": {
            "type": "string",
            "description": "Solana network",
            "enum": [
              "mainnet",
              "testnet"
            ]
          },
          "currency": {
            "type": "string",
            "description": "Denomination of the cryptocurrency Solana.",
            "pattern": "^[1-9]\\d+$",
            "example": "100"
          },
          "amount": {
            "type": "string",
            "pattern": "^[1-9]\\d+$",
            "example": "123456"
          }
        }
      },
      "NearProtocol": {
        "type": "string",
        "description": "Near protocol",
        "enum": [
          "near"
        ]
      },
      "NearDeactivatableAmount": {
        "type": "object",
        "description": "The deactivatable amount",
        "required": [
          "protocol",
          "network",
          "amount",
          "currency"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Near protocol",
            "enum": [
              "near"
            ]
          },
          "network": {
            "type": "string",
            "description": "NEAR network",
            "enum": [
              "mainnet",
              "testnet",
              "localnet"
            ]
          },
          "currency": {
            "type": "string",
            "description": "Denomination of NEAR Protocol.",
            "pattern": "^[1-9]\\d+$",
            "example": "100000000000000000000000000"
          },
          "amount": {
            "type": "string",
            "pattern": "^[1-9]\\d+$",
            "example": "123456"
          },
          "wallets": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Amount per wallet",
              "required": [
                "wallet",
                "amount",
                "validator"
              ],
              "properties": {
                "wallet": {
                  "type": "string"
                },
                "amount": {
                  "type": "string",
                  "pattern": "^[1-9]\\d+$"
                },
                "validator": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "PolkadotProtocol": {
        "type": "string",
        "description": "Polkadot protocol",
        "enum": [
          "polkadot"
        ]
      },
      "PolygonProtocol": {
        "type": "string",
        "description": "Polygon protocol",
        "enum": [
          "polygon"
        ]
      },
      "SolanaWithdrawableAmount": {
        "type": "object",
        "description": "Result of the get withdrawable amount",
        "required": [
          "protocol",
          "network",
          "amount",
          "currency"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Solana protocol",
            "enum": [
              "solana"
            ]
          },
          "network": {
            "type": "string",
            "description": "Solana network",
            "enum": [
              "mainnet",
              "testnet"
            ]
          },
          "currency": {
            "type": "string",
            "description": "Denomination of the cryptocurrency Solana.",
            "pattern": "^[1-9]\\d+$",
            "example": "100"
          },
          "amount": {
            "type": "string",
            "pattern": "^[1-9]\\d+$",
            "example": "123456"
          }
        }
      },
      "NearWithdrawableAmount": {
        "type": "object",
        "description": "Result of the get withdrawable amount",
        "required": [
          "protocol",
          "network",
          "amount",
          "currency"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Near protocol",
            "enum": [
              "near"
            ]
          },
          "network": {
            "type": "string",
            "description": "NEAR network",
            "enum": [
              "mainnet",
              "testnet",
              "localnet"
            ]
          },
          "currency": {
            "type": "string",
            "description": "Denomination of NEAR Protocol.",
            "pattern": "^[1-9]\\d+$",
            "example": "100000000000000000000000000"
          },
          "amount": {
            "type": "string",
            "pattern": "^[1-9]\\d+$",
            "example": "123456"
          },
          "wallets": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Amount per wallet",
              "required": [
                "wallet",
                "amount",
                "validator"
              ],
              "properties": {
                "wallet": {
                  "type": "string"
                },
                "amount": {
                  "type": "string",
                  "pattern": "^[1-9]\\d+$"
                },
                "validator": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "EthereumProtocol": {
        "type": "string",
        "description": "Ethereum protocol",
        "enum": [
          "ethereum"
        ]
      },
      "CosmosNetwork": {
        "type": "string",
        "description": "Cosmos network",
        "enum": [
          "mainnet",
          "testnet"
        ]
      },
      "CosmosProtocol": {
        "type": "string",
        "description": "Cosmos protocol",
        "enum": [
          "cosmos"
        ]
      },
      "BinanceNetwork": {
        "type": "string",
        "description": "Binance beacon chain network",
        "enum": [
          "mainnet",
          "testnet"
        ]
      },
      "BinanceProtocol": {
        "type": "string",
        "description": "Binance beacon chain protocol",
        "enum": [
          "binance"
        ]
      },
      "EthereumStakeIntentResponse": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "stake_intent_id",
              "customer_id"
            ],
            "properties": {
              "stake_intent_id": {
                "type": "string",
                "format": "base58",
                "description": "Unique idenifier for a group of stakes.",
                "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
              },
              "customer_id": {
                "type": "string",
                "description": "Unique identifier for a customer",
                "example": "SatoshiNakamoto-xUYJbPw9hw",
                "minimum": 1
              },
              "plan_id": {
                "type": "string",
                "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "protocol",
              "network"
            ],
            "properties": {
              "protocol": {
                "type": "string",
                "description": "Ethereum protocol",
                "enum": [
                  "ethereum"
                ]
              },
              "network": {
                "type": "string",
                "description": "Ethereum network",
                "enum": [
                  "mainnet",
                  "holesky"
                ]
              },
              "ethereum": {
                "type": "object",
                "description": "Ethereum Stake Intent response",
                "required": [
                  "stakes",
                  "contract_address",
                  "unsigned_transaction",
                  "estimated_gas",
                  "expiration_time"
                ],
                "properties": {
                  "stakes": {
                    "description": "Stakes being made.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "Individual Ethereum Stake Response",
                      "required": [
                        "stake_id",
                        "amount",
                        "validator_public_key",
                        "withdrawal_credentials",
                        "fee_recipient"
                      ],
                      "properties": {
                        "stake_id": {
                          "description": "Unique stake identifier.",
                          "type": "string",
                          "format": "base58",
                          "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                        },
                        "amount": {
                          "type": "string",
                          "description": "Amount of ETH (denominated in Gwei).",
                          "pattern": "^[1-9]\\d{10,}$",
                          "example": "32000000000"
                        },
                        "validator_public_key": {
                          "type": "string",
                          "description": "A BLS public Key.",
                          "format": "base64",
                          "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                        },
                        "withdrawal_credentials": {
                          "type": "string",
                          "format": "hex",
                          "pattern": "^0x0(0|1)[a-fA-F0-9]{62}$",
                          "example": "0x0092c20062cee70389f1cb4fa566a2be5e2319ff43965db26dbaa3ce90b9df99",
                          "description": "Hexadecimal encoded [withdrawal credentials](https://github.com/ethereum/consensus-specs/blob/master/specs/phase0/validator.md#withdrawal-credentials) which can be either a BLS public key or an Ethereum account address.\n\nThis parameter currently accepts ETH1 and BLS withdrawal credentials, but it is considered deprecated after the Capella/Shanghai fork. All users are now advised to use an ETH1 withdrawal address, specified through the `withdrawal_address` parameter as this is required to enable the ongoing accrual of rewards.\n\nFor more information regarding creating withdrawal credentials, please see the official [Ethereum Launchpad FAQ](https://launchpad.ethereum.org/en/faq#withdrawal-credentials)."
                        },
                        "fee_recipient": {
                          "type": "string",
                          "description": "An Ethereum address to receive transaction fees from published blocks. 20-bytes, hex encoded with 0x prefix, case insensitive.",
                          "example": "0x93247f2209abcacf57b75a51dafae777f9dd38bc",
                          "pattern": "^0x[a-fA-F0-9]{40}$"
                        }
                      }
                    }
                  },
                  "contract_address": {
                    "type": "string",
                    "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                    "format": "hex",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                  },
                  "unsigned_transaction": {
                    "type": "string",
                    "format": "base64",
                    "description": "Generated unsigned transaction smart contract call data.",
                    "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                  },
                  "estimated_gas": {
                    "type": "integer",
                    "description": "Gas estimation of the transaction",
                    "format": "uint64",
                    "example": 1001
                  },
                  "expiration_time": {
                    "type": "integer",
                    "description": "Transaction expiration time",
                    "format": "int64",
                    "example": 1689939023
                  }
                }
              }
            }
          }
        ]
      },
      "NearStakeIntentResponse": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "stake_intent_id",
              "customer_id"
            ],
            "properties": {
              "stake_intent_id": {
                "type": "string",
                "format": "base58",
                "description": "Unique idenifier for a group of stakes.",
                "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
              },
              "customer_id": {
                "type": "string",
                "description": "Unique identifier for a customer",
                "example": "SatoshiNakamoto-xUYJbPw9hw",
                "minimum": 1
              },
              "plan_id": {
                "type": "string",
                "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "protocol",
              "network"
            ],
            "properties": {
              "protocol": {
                "type": "string",
                "description": "Near protocol",
                "enum": [
                  "near"
                ]
              },
              "network": {
                "type": "string",
                "description": "NEAR network",
                "enum": [
                  "mainnet",
                  "testnet",
                  "localnet"
                ]
              },
              "near": {
                "type": "object",
                "description": "NEAR Protocol Stake Intent",
                "required": [
                  "to",
                  "unsigned_transaction",
                  "amount",
                  "wallet_address",
                  "public_key",
                  "expiration_time"
                ],
                "properties": {
                  "to": {
                    "type": "string",
                    "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                    "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                    "example": "alice.near"
                  },
                  "unsigned_transaction": {
                    "type": "string",
                    "format": "base64",
                    "description": "Generated unsigned transaction smart contract call data.",
                    "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                  },
                  "amount": {
                    "type": "string",
                    "description": "Denomination of NEAR Protocol.",
                    "pattern": "^[1-9]\\d+$",
                    "example": "100000000000000000000000000"
                  },
                  "wallet_address": {
                    "type": "string",
                    "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                    "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                    "example": "alice.near"
                  },
                  "public_key": {
                    "type": "string",
                    "description": "Base58 encoded public key prefixed by ed25519, associated with the private key that will be used to sign the transaction.",
                    "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
                    "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
                  },
                  "expiration_time": {
                    "type": "integer",
                    "description": "Transaction expiration time",
                    "format": "int64",
                    "example": 1689939023
                  }
                }
              }
            }
          }
        ]
      },
      "PolkadotStakeIntentResponse": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "stake_intent_id",
              "customer_id"
            ],
            "properties": {
              "stake_intent_id": {
                "type": "string",
                "format": "base58",
                "description": "Unique idenifier for a group of stakes.",
                "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
              },
              "customer_id": {
                "type": "string",
                "description": "Unique identifier for a customer",
                "example": "SatoshiNakamoto-xUYJbPw9hw",
                "minimum": 1
              },
              "plan_id": {
                "type": "string",
                "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "protocol",
              "network"
            ],
            "properties": {
              "protocol": {
                "type": "string",
                "description": "Polkadot protocol",
                "enum": [
                  "polkadot"
                ]
              },
              "network": {
                "type": "string",
                "description": "Coin network",
                "enum": [
                  "mainnet",
                  "kusama",
                  "westend"
                ]
              },
              "polkadot": {
                "type": "object",
                "description": "Polkadot Stake Intent Response",
                "required": [
                  "stake_id",
                  "unsigned_transaction",
                  "proxy_address"
                ],
                "properties": {
                  "unsigned_transaction": {
                    "description": "Unsigned transaction that bonds a Blockdaemon's proxy account to the given customer account.\nOnce this transaction is signed, broadcasted to the network and included in the canonical history of the chain, the proxy account will be associated with the customer account.",
                    "type": "string",
                    "format": "base64",
                    "example": "0xa4041601008c16e19e94328985d65cb7e3245213892730dd0e841f6511478cb12f23a178330100000000"
                  },
                  "customer_address": {
                    "description": "Address of the customer account to associate with the proxy account.",
                    "type": "string",
                    "format": "base58",
                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                  },
                  "controller_address": {
                    "description": "Address of the customer account to associate with the proxy account.\nSame as customer_address. Deprecated - will be removed in a later version.",
                    "type": "string",
                    "format": "base58",
                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                  },
                  "proxy_address": {
                    "description": "Address of the proxy account to associate with the customer account.",
                    "type": "string",
                    "format": "base58",
                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                  }
                }
              }
            }
          }
        ]
      },
      "PolygonStakeIntentResponse": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "stake_intent_id",
              "customer_id"
            ],
            "properties": {
              "stake_intent_id": {
                "type": "string",
                "format": "base58",
                "description": "Unique idenifier for a group of stakes.",
                "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
              },
              "customer_id": {
                "type": "string",
                "description": "Unique identifier for a customer",
                "example": "SatoshiNakamoto-xUYJbPw9hw",
                "minimum": 1
              },
              "plan_id": {
                "type": "string",
                "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "protocol",
              "network"
            ],
            "properties": {
              "protocol": {
                "type": "string",
                "description": "Polygon protocol",
                "enum": [
                  "polygon"
                ]
              },
              "network": {
                "type": "string",
                "description": "Polygon network",
                "enum": [
                  "mainnet",
                  "goerli",
                  "prater"
                ]
              },
              "polygon": {
                "type": "object",
                "description": "Polygon Stake Intent",
                "required": [
                  "to",
                  "unsigned_transaction",
                  "amount",
                  "wallet_address"
                ],
                "properties": {
                  "to": {
                    "type": "string",
                    "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                    "format": "hex",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                  },
                  "unsigned_transaction": {
                    "type": "string",
                    "format": "base64",
                    "description": "Generated unsigned transaction smart contract call data.",
                    "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                  },
                  "amount": {
                    "type": "string",
                    "description": "Denomination of the cryptocurrency Polygon.",
                    "pattern": "^[1-9]\\d+$",
                    "example": "100"
                  },
                  "wallet_address": {
                    "type": "string",
                    "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                    "format": "hex",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                  }
                }
              }
            }
          }
        ]
      },
      "SolanaStakeIntentResponse": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "stake_intent_id",
              "customer_id"
            ],
            "properties": {
              "stake_intent_id": {
                "type": "string",
                "format": "base58",
                "description": "Unique idenifier for a group of stakes.",
                "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
              },
              "customer_id": {
                "type": "string",
                "description": "Unique identifier for a customer",
                "example": "SatoshiNakamoto-xUYJbPw9hw",
                "minimum": 1
              },
              "plan_id": {
                "type": "string",
                "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "protocol",
              "network"
            ],
            "properties": {
              "protocol": {
                "type": "string",
                "description": "Solana protocol",
                "enum": [
                  "solana"
                ]
              },
              "network": {
                "type": "string",
                "description": "Solana network",
                "enum": [
                  "mainnet",
                  "testnet"
                ]
              },
              "solana": {
                "type": "object",
                "description": "Solana Stake Intent response",
                "required": [
                  "stake_id",
                  "amount",
                  "validator_public_key",
                  "withdrawal_authority",
                  "staking_authority",
                  "stake_account_public_key",
                  "unsigned_transaction",
                  "expiration_time"
                ],
                "properties": {
                  "stake_id": {
                    "description": "Unique stake identifier.",
                    "type": "string",
                    "format": "base58",
                    "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                  },
                  "amount": {
                    "type": "string",
                    "description": "Denomination of the cryptocurrency Solana.",
                    "pattern": "^[1-9]\\d+$",
                    "example": "100"
                  },
                  "validator_public_key": {
                    "type": "string",
                    "description": "A BLS public Key.",
                    "format": "base64",
                    "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                  },
                  "staking_authority": {
                    "type": "string",
                    "description": "Public Key of an asymmetric key-pair.",
                    "format": "base58",
                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                  },
                  "withdrawal_authority": {
                    "type": "string",
                    "description": "A BLS public Key.",
                    "format": "base64",
                    "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                  },
                  "stake_account_public_key": {
                    "type": "string",
                    "description": "Public Key of an asymmetric key-pair.",
                    "format": "base58",
                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                  },
                  "unsigned_transaction": {
                    "type": "string",
                    "format": "base64",
                    "description": "Generated unsigned transaction smart contract call data.",
                    "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                  },
                  "expiration_time": {
                    "type": "integer",
                    "description": "Transaction expiration time",
                    "format": "int64",
                    "example": 1689939023
                  }
                }
              }
            }
          }
        ]
      },
      "PolkadotWithdrawIntent": {
        "type": "object",
        "description": "Result of a new withdrawal intent request.",
        "required": [
          "withdraw_intent_id"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "enum": [
              "polkadot"
            ]
          },
          "network": {
            "type": "string",
            "description": "Coin network",
            "enum": [
              "mainnet",
              "kusama",
              "westend"
            ]
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          },
          "withdraw_intent_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique idenifier for a withdrawal intent.",
            "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
          },
          "polkadot": {
            "type": "object",
            "description": "Polkadot withdrawal intent response",
            "required": [
              "unsigned_transaction"
            ],
            "properties": {
              "unsigned_transaction": {
                "type": "string",
                "format": "base64",
                "description": "Unsigned withdraw intent transaction.\nOnce this transaction is signed, broadcasted to the network and included in the canonical history of the chain, the unbonded stake controlled by this customer account will be withdrawn from its stake pool.",
                "example": "0x1c04060301000000"
              },
              "customer_address": {
                "description": "Address of the customer account whose unbonded stake will be withdrawn.",
                "type": "string",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              },
              "controller_address": {
                "description": "Address of the customer account whose unbonded stake will be withdrawn.\nSame as customer_address. Deprecated - will be removed in a later version.",
                "type": "string",
                "format": "base58",
                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
              }
            }
          }
        }
      },
      "ExpirationTime": {
        "type": "integer",
        "description": "Transaction expiration time",
        "format": "int64",
        "example": 1689939023
      },
      "AvalancheAddress": {
        "type": "string",
        "description": "Avalanche platform chain address",
        "pattern": "^([P]|[a-km-zA-HJ-NP-Z1-9]{36,72})-[a-zA-Z]{1,83}1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{38}$",
        "example": "P-fuji1g2g0jxcfn5sp59ld7g0t0tp4jrqppvqcfqc7hy"
      },
      "AvalancheValidatorAddress": {
        "type": "string",
        "description": "Avalanche validator node address",
        "pattern": "^NodeID-[A-Za-z0-9]{43}$",
        "example": "NodeID-B19uSxUKerjjnA215czAJLHMqNJMbsAMWuSxUKerjjW"
      },
      "NewStakeIntentAvalanche": {
        "type": "object",
        "description": "Request object to create a new Stake Intent for Avalanche",
        "required": [
          "delegator_address",
          "amount"
        ],
        "properties": {
          "validator_address": {
            "type": "string",
            "description": "Avalanche validator address",
            "pattern": "^NodeID-[A-Za-z0-9]{43}$",
            "example": "NodeID-B19uSxUKerjjnA215czAJLHMqNJMbsAMWuSxUKerjjW"
          },
          "delegator_address": {
            "type": "string",
            "description": "Avalanche delegator address",
            "pattern": "^([P]|[a-km-zA-HJ-NP-Z1-9]{36,72})-[a-zA-Z]{1,83}1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{38}$",
            "example": "P-fuji1g2g0jxcfn5sp59ld7g0t0tp4jrqppvqcfqc7hy"
          },
          "start_time": {
            "description": "Avalanche staking start time",
            "type": "integer",
            "format": "int64",
            "example": 1689939023
          },
          "end_time": {
            "description": "Avalanche staking end time",
            "type": "integer",
            "format": "int64",
            "example": 1689939023
          },
          "amount": {
            "type": "string",
            "description": "Amount of nano-Avalanche to stake. 1 Avalanche = 1e9 nano-Avalanche.",
            "pattern": "^[1-9]\\d+$",
            "example": "10000000000"
          },
          "plan_id": {
            "type": "string",
            "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
            "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
          }
        }
      },
      "AvalancheStakingTimestamp": {
        "type": "integer",
        "description": "Avalanche staking start time",
        "format": "int64",
        "example": 1689939023
      },
      "AvalancheStakeIntentResponse": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "stake_intent_id",
              "customer_id"
            ],
            "properties": {
              "stake_intent_id": {
                "type": "string",
                "format": "base58",
                "description": "Unique idenifier for a group of stakes.",
                "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
              },
              "customer_id": {
                "type": "string",
                "description": "Unique identifier for a customer",
                "example": "SatoshiNakamoto-xUYJbPw9hw",
                "minimum": 1
              },
              "plan_id": {
                "type": "string",
                "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "protocol",
              "network"
            ],
            "properties": {
              "protocol": {
                "type": "string",
                "description": "Avalanche protocol",
                "enum": [
                  "avalanche"
                ]
              },
              "network": {
                "type": "string",
                "description": "Avalanche network",
                "enum": [
                  "mainnet",
                  "fuji",
                  "local"
                ]
              },
              "avalanche": {
                "type": "object",
                "description": "Avalanche Stake Intent",
                "required": [
                  "validator_address",
                  "unsigned_transaction",
                  "amount",
                  "delegator_address",
                  "start_time",
                  "end_time"
                ],
                "properties": {
                  "validator_address": {
                    "type": "string",
                    "description": "Avalanche validator node address",
                    "pattern": "^NodeID-[A-Za-z0-9]{43}$",
                    "example": "NodeID-B19uSxUKerjjnA215czAJLHMqNJMbsAMWuSxUKerjjW"
                  },
                  "unsigned_transaction": {
                    "type": "string",
                    "format": "base64",
                    "description": "Generated unsigned transaction smart contract call data.",
                    "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                  },
                  "amount": {
                    "type": "string",
                    "description": "Denomination of Avalanche.",
                    "pattern": "^[1-9]\\d+$",
                    "example": "10000000000"
                  },
                  "delegator_address": {
                    "type": "string",
                    "description": "Avalanche platform chain address",
                    "pattern": "^([P]|[a-km-zA-HJ-NP-Z1-9]{36,72})-[a-zA-Z]{1,83}1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{38}$",
                    "example": "P-fuji1g2g0jxcfn5sp59ld7g0t0tp4jrqppvqcfqc7hy"
                  },
                  "start_time": {
                    "description": "Avalanche staking start time",
                    "type": "integer",
                    "format": "int64",
                    "example": 1689939023
                  },
                  "end_time": {
                    "description": "Avalanche staking end time",
                    "type": "integer",
                    "format": "int64",
                    "example": 1689939023
                  }
                }
              }
            }
          }
        ]
      },
      "AvalancheNetwork": {
        "type": "string",
        "description": "Avalanche network",
        "enum": [
          "mainnet",
          "fuji",
          "local"
        ]
      },
      "AvalancheNano": {
        "type": "string",
        "description": "Denomination of Avalanche.",
        "pattern": "^[1-9]\\d+$",
        "example": "10000000000"
      },
      "AvalancheProtocol": {
        "type": "string",
        "description": "Avalanche protocol",
        "enum": [
          "avalanche"
        ]
      },
      "StakeIntentAvalanche": {
        "type": "object",
        "description": "Avalanche Stake Intent",
        "required": [
          "validator_address",
          "unsigned_transaction",
          "amount",
          "delegator_address",
          "start_time",
          "end_time"
        ],
        "properties": {
          "validator_address": {
            "type": "string",
            "description": "Avalanche validator node address",
            "pattern": "^NodeID-[A-Za-z0-9]{43}$",
            "example": "NodeID-B19uSxUKerjjnA215czAJLHMqNJMbsAMWuSxUKerjjW"
          },
          "unsigned_transaction": {
            "type": "string",
            "format": "base64",
            "description": "Generated unsigned transaction smart contract call data.",
            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
          },
          "amount": {
            "type": "string",
            "description": "Denomination of Avalanche.",
            "pattern": "^[1-9]\\d+$",
            "example": "10000000000"
          },
          "delegator_address": {
            "type": "string",
            "description": "Avalanche platform chain address",
            "pattern": "^([P]|[a-km-zA-HJ-NP-Z1-9]{36,72})-[a-zA-Z]{1,83}1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{38}$",
            "example": "P-fuji1g2g0jxcfn5sp59ld7g0t0tp4jrqppvqcfqc7hy"
          },
          "start_time": {
            "description": "Avalanche staking start time",
            "type": "integer",
            "format": "int64",
            "example": 1689939023
          },
          "end_time": {
            "description": "Avalanche staking end time",
            "type": "integer",
            "format": "int64",
            "example": 1689939023
          }
        }
      },
      "PlanAvalancheConfig": {
        "type": "object",
        "description": "Avalanche staking plan config",
        "required": [
          "validator_address"
        ],
        "properties": {
          "validator_address": {
            "type": "object",
            "required": [
              "mainnet",
              "fuji"
            ],
            "properties": {
              "mainnet": {
                "type": "string",
                "description": "Avalanche validator node address",
                "pattern": "^NodeID-[A-Za-z0-9]{43}$",
                "example": "NodeID-B19uSxUKerjjnA215czAJLHMqNJMbsAMWuSxUKerjjW"
              },
              "fuji": {
                "type": "string",
                "description": "Avalanche validator node address",
                "pattern": "^NodeID-[A-Za-z0-9]{43}$",
                "example": "NodeID-B19uSxUKerjjnA215czAJLHMqNJMbsAMWuSxUKerjjW"
              }
            }
          }
        }
      },
      "DeactivateIntentCosmos": {
        "type": "object",
        "description": "Cosmos Deactivate Intent",
        "required": [
          "unsigned_transaction",
          "delegator_address",
          "validator_address",
          "amount"
        ],
        "properties": {
          "unsigned_transaction": {
            "type": "string",
            "format": "base64",
            "description": "Generated unsigned transaction smart contract call data.",
            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
          },
          "delegator_address": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "bech32",
            "pattern": "^cosmos[1-9a-zA-Z]{39}$",
            "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
          },
          "validator_address": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "bech32",
            "pattern": "^cosmos[1-9a-zA-Z]{39}$",
            "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
          },
          "amount": {
            "type": "string",
            "description": "Denomination of the cryptocurrency Cosmos.",
            "pattern": "^[1-9]\\d+$",
            "example": "100"
          }
        }
      },
      "NewDeactivateIntentCosmos": {
        "type": "object",
        "description": "Request object to create a new deactivation intent for Cosmos.",
        "required": [
          "delegator_address",
          "amount"
        ],
        "properties": {
          "delegator_address": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "bech32",
            "pattern": "^cosmos[1-9a-zA-Z]{39}$",
            "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
          },
          "amount": {
            "type": "string",
            "description": "Denomination of the cryptocurrency Cosmos.",
            "pattern": "^[1-9]\\d+$",
            "example": "100"
          },
          "plan_id": {
            "type": "string",
            "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
            "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
          }
        }
      },
      "DeactivationIntentsCosmos": {
        "type": "array",
        "description": "List of deactivation intents",
        "items": {
          "allOf": [
            {
              "type": "object",
              "required": [
                "deactivate_intent_id",
                "customer_id"
              ],
              "properties": {
                "deactivate_intent_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique idenifier for deactivate intent.",
                  "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                },
                "customer_id": {
                  "type": "string",
                  "description": "Unique identifier for a customer",
                  "example": "SatoshiNakamoto-xUYJbPw9hw",
                  "minimum": 1
                }
              }
            },
            {
              "type": "object",
              "description": "Response to a new deactivation intent request.",
              "required": [
                "protocol",
                "network",
                "cosmos"
              ],
              "properties": {
                "protocol": {
                  "type": "string",
                  "description": "Cosmos protocol",
                  "enum": [
                    "cosmos"
                  ]
                },
                "network": {
                  "type": "string",
                  "description": "Cosmos network",
                  "enum": [
                    "mainnet",
                    "testnet"
                  ]
                },
                "cosmos": {
                  "type": "object",
                  "description": "Cosmos Deactivate Intent",
                  "required": [
                    "unsigned_transaction",
                    "delegator_address",
                    "validator_address",
                    "amount"
                  ],
                  "properties": {
                    "unsigned_transaction": {
                      "type": "string",
                      "format": "base64",
                      "description": "Generated unsigned transaction smart contract call data.",
                      "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                    },
                    "delegator_address": {
                      "type": "string",
                      "description": "Public Key of an asymmetric key-pair.",
                      "format": "bech32",
                      "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                      "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                    },
                    "validator_address": {
                      "type": "string",
                      "description": "Public Key of an asymmetric key-pair.",
                      "format": "bech32",
                      "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                      "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                    },
                    "amount": {
                      "type": "string",
                      "description": "Denomination of the cryptocurrency Cosmos.",
                      "pattern": "^[1-9]\\d+$",
                      "example": "100"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "CosmosDeactivationIntentResponse": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "deactivate_intent_id",
              "customer_id"
            ],
            "properties": {
              "deactivate_intent_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique idenifier for deactivate intent.",
                "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
              },
              "customer_id": {
                "type": "string",
                "description": "Unique identifier for a customer",
                "example": "SatoshiNakamoto-xUYJbPw9hw",
                "minimum": 1
              }
            }
          },
          {
            "type": "object",
            "description": "Response to a new deactivation intent request.",
            "required": [
              "protocol",
              "network",
              "cosmos"
            ],
            "properties": {
              "protocol": {
                "type": "string",
                "description": "Cosmos protocol",
                "enum": [
                  "cosmos"
                ]
              },
              "network": {
                "type": "string",
                "description": "Cosmos network",
                "enum": [
                  "mainnet",
                  "testnet"
                ]
              },
              "cosmos": {
                "type": "object",
                "description": "Cosmos Deactivate Intent",
                "required": [
                  "unsigned_transaction",
                  "delegator_address",
                  "validator_address",
                  "amount"
                ],
                "properties": {
                  "unsigned_transaction": {
                    "type": "string",
                    "format": "base64",
                    "description": "Generated unsigned transaction smart contract call data.",
                    "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                  },
                  "delegator_address": {
                    "type": "string",
                    "description": "Public Key of an asymmetric key-pair.",
                    "format": "bech32",
                    "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                    "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                  },
                  "validator_address": {
                    "type": "string",
                    "description": "Public Key of an asymmetric key-pair.",
                    "format": "bech32",
                    "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                    "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                  },
                  "amount": {
                    "type": "string",
                    "description": "Denomination of the cryptocurrency Cosmos.",
                    "pattern": "^[1-9]\\d+$",
                    "example": "100"
                  }
                }
              }
            }
          }
        ]
      },
      "CosmosRewardsWithdrawIntent": {
        "type": "object",
        "required": [
          "unsigned_transaction",
          "delegator_address",
          "validator_address",
          "amount"
        ],
        "properties": {
          "unsigned_transaction": {
            "type": "string",
            "format": "base64",
            "description": "Generated unsigned transaction smart contract call data.",
            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
          },
          "delegator_address": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "bech32",
            "pattern": "^cosmos[1-9a-zA-Z]{39}$",
            "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
          },
          "validator_address": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "bech32",
            "pattern": "^cosmos[1-9a-zA-Z]{39}$",
            "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
          },
          "amount": {
            "type": "string",
            "description": "Denomination of the cryptocurrency Cosmos.",
            "pattern": "^[1-9]\\d+$",
            "example": "100"
          }
        }
      },
      "DeactivateIntentBinance": {
        "type": "object",
        "description": "Binance Deactivate Intent",
        "required": [
          "unsigned_transaction",
          "delegator_address",
          "validator_address",
          "amount"
        ],
        "properties": {
          "unsigned_transaction": {
            "type": "string",
            "format": "base64",
            "description": "Generated unsigned transaction smart contract call data.",
            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
          },
          "delegator_address": {
            "type": "string",
            "description": "Binance beacon chain address.",
            "format": "bech32",
            "pattern": "^bnb[0-9a-z]+$",
            "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
          },
          "validator_address": {
            "type": "string",
            "description": "Binance beacon chain validator address.",
            "format": "bech32",
            "pattern": "^bva[0-9a-zA-Z]*$",
            "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
          },
          "amount": {
            "type": "string",
            "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
            "pattern": "^[1-9]\\d+$",
            "example": "10000000000"
          }
        }
      },
      "NewDeactivateIntentBinance": {
        "type": "object",
        "description": "Request object to create a new deactivation intent for Binance.",
        "required": [
          "delegator_address",
          "amount"
        ],
        "properties": {
          "delegator_address": {
            "type": "string",
            "description": "Binance beacon chain address.",
            "format": "bech32",
            "pattern": "^bnb[0-9a-z]+$",
            "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
          },
          "amount": {
            "type": "string",
            "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
            "pattern": "^[1-9]\\d+$",
            "example": "10000000000"
          },
          "plan_id": {
            "type": "string",
            "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
            "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
          }
        }
      },
      "DeactivationIntentsBinance": {
        "type": "array",
        "description": "List of deactivation intents",
        "items": {
          "allOf": [
            {
              "type": "object",
              "required": [
                "deactivate_intent_id",
                "customer_id"
              ],
              "properties": {
                "deactivate_intent_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique idenifier for deactivate intent.",
                  "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                },
                "customer_id": {
                  "type": "string",
                  "description": "Unique identifier for a customer",
                  "example": "SatoshiNakamoto-xUYJbPw9hw",
                  "minimum": 1
                }
              }
            },
            {
              "type": "object",
              "description": "Response to a new deactivation intent request.",
              "required": [
                "protocol",
                "network",
                "binance"
              ],
              "properties": {
                "protocol": {
                  "type": "string",
                  "description": "Binance beacon chain protocol",
                  "enum": [
                    "binance"
                  ]
                },
                "network": {
                  "type": "string",
                  "description": "Binance beacon chain network",
                  "enum": [
                    "mainnet",
                    "testnet"
                  ]
                },
                "binance": {
                  "type": "object",
                  "description": "Binance Deactivate Intent",
                  "required": [
                    "unsigned_transaction",
                    "delegator_address",
                    "validator_address",
                    "amount"
                  ],
                  "properties": {
                    "unsigned_transaction": {
                      "type": "string",
                      "format": "base64",
                      "description": "Generated unsigned transaction smart contract call data.",
                      "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                    },
                    "delegator_address": {
                      "type": "string",
                      "description": "Binance beacon chain address.",
                      "format": "bech32",
                      "pattern": "^bnb[0-9a-z]+$",
                      "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
                    },
                    "validator_address": {
                      "type": "string",
                      "description": "Binance beacon chain validator address.",
                      "format": "bech32",
                      "pattern": "^bva[0-9a-zA-Z]*$",
                      "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                    },
                    "amount": {
                      "type": "string",
                      "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
                      "pattern": "^[1-9]\\d+$",
                      "example": "10000000000"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "BinanceDeactivationIntentResponse": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "deactivate_intent_id",
              "customer_id"
            ],
            "properties": {
              "deactivate_intent_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique idenifier for deactivate intent.",
                "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
              },
              "customer_id": {
                "type": "string",
                "description": "Unique identifier for a customer",
                "example": "SatoshiNakamoto-xUYJbPw9hw",
                "minimum": 1
              }
            }
          },
          {
            "type": "object",
            "description": "Response to a new deactivation intent request.",
            "required": [
              "protocol",
              "network",
              "binance"
            ],
            "properties": {
              "protocol": {
                "type": "string",
                "description": "Binance beacon chain protocol",
                "enum": [
                  "binance"
                ]
              },
              "network": {
                "type": "string",
                "description": "Binance beacon chain network",
                "enum": [
                  "mainnet",
                  "testnet"
                ]
              },
              "binance": {
                "type": "object",
                "description": "Binance Deactivate Intent",
                "required": [
                  "unsigned_transaction",
                  "delegator_address",
                  "validator_address",
                  "amount"
                ],
                "properties": {
                  "unsigned_transaction": {
                    "type": "string",
                    "format": "base64",
                    "description": "Generated unsigned transaction smart contract call data.",
                    "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                  },
                  "delegator_address": {
                    "type": "string",
                    "description": "Binance beacon chain address.",
                    "format": "bech32",
                    "pattern": "^bnb[0-9a-z]+$",
                    "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
                  },
                  "validator_address": {
                    "type": "string",
                    "description": "Binance beacon chain validator address.",
                    "format": "bech32",
                    "pattern": "^bva[0-9a-zA-Z]*$",
                    "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                  },
                  "amount": {
                    "type": "string",
                    "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
                    "pattern": "^[1-9]\\d+$",
                    "example": "10000000000"
                  }
                }
              }
            }
          }
        ]
      },
      "NewRestakeIntent": {
        "type": "object",
        "description": "Request object to create a new withdrawal intent.",
        "required": [
          "protocol",
          "network",
          "customer_id"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          },
          "network": {
            "type": "string",
            "description": "Protocol-specific network.",
            "enum": [
              "mainnet",
              "localnet",
              "goerli",
              "prater",
              "holesky",
              "testnet",
              "devnet",
              "kusama",
              "westend",
              "preprod",
              "fuji",
              "local"
            ]
          },
          "cosmos": {
            "type": "object",
            "description": "Request object to create a new restake intent for Cosmos.",
            "required": [
              "delegator_address",
              "old_validator_address",
              "amount"
            ],
            "properties": {
              "delegator_address": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "bech32",
                "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
              },
              "old_validator_address": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "bech32",
                "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
              },
              "amount": {
                "type": "string",
                "description": "Denomination of the cryptocurrency Cosmos.",
                "pattern": "^[1-9]\\d+$",
                "example": "100"
              },
              "plan_id": {
                "type": "string",
                "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
              }
            }
          },
          "binance": {
            "type": "object",
            "description": "Request object to create a new restake intent for Binance.",
            "required": [
              "delegator_address",
              "old_validator_address",
              "amount"
            ],
            "properties": {
              "delegator_address": {
                "type": "string",
                "description": "Binance beacon chain address.",
                "format": "bech32",
                "pattern": "^bnb[0-9a-z]+$",
                "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
              },
              "old_validator_address": {
                "type": "string",
                "description": "Binance beacon chain validator address.",
                "format": "bech32",
                "pattern": "^bva[0-9a-zA-Z]*$",
                "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
              },
              "amount": {
                "type": "string",
                "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
                "pattern": "^[1-9]\\d+$",
                "example": "10000000000"
              },
              "plan_id": {
                "type": "string",
                "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
              }
            }
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          }
        }
      },
      "NewRestakeIntentCosmos": {
        "type": "object",
        "description": "Request object to create a new restake intent for Cosmos.",
        "required": [
          "delegator_address",
          "old_validator_address",
          "amount"
        ],
        "properties": {
          "delegator_address": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "bech32",
            "pattern": "^cosmos[1-9a-zA-Z]{39}$",
            "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
          },
          "old_validator_address": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "bech32",
            "pattern": "^cosmos[1-9a-zA-Z]{39}$",
            "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
          },
          "amount": {
            "type": "string",
            "description": "Denomination of the cryptocurrency Cosmos.",
            "pattern": "^[1-9]\\d+$",
            "example": "100"
          },
          "plan_id": {
            "type": "string",
            "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
            "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
          }
        }
      },
      "NewRestakeIntentBinance": {
        "type": "object",
        "description": "Request object to create a new restake intent for Binance.",
        "required": [
          "delegator_address",
          "old_validator_address",
          "amount"
        ],
        "properties": {
          "delegator_address": {
            "type": "string",
            "description": "Binance beacon chain address.",
            "format": "bech32",
            "pattern": "^bnb[0-9a-z]+$",
            "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
          },
          "old_validator_address": {
            "type": "string",
            "description": "Binance beacon chain validator address.",
            "format": "bech32",
            "pattern": "^bva[0-9a-zA-Z]*$",
            "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
          },
          "amount": {
            "type": "string",
            "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
            "pattern": "^[1-9]\\d+$",
            "example": "10000000000"
          },
          "plan_id": {
            "type": "string",
            "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
            "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
          }
        }
      },
      "NewRewardsWithdrawIntentCosmos": {
        "type": "object",
        "description": "Request object to create a new rewards withdrawal intent for Cardano.",
        "required": [
          "delegator_address"
        ],
        "properties": {
          "delegator_address": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "bech32",
            "pattern": "^cosmos[1-9a-zA-Z]{39}$",
            "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
          },
          "plan_id": {
            "type": "string",
            "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
            "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
          }
        }
      },
      "RestakeIntent": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "restake_intent_id",
              "customer_id"
            ],
            "properties": {
              "restake_intent_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique idenifier for a restake intent.",
                "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
              },
              "customer_id": {
                "type": "string",
                "description": "Unique identifier for a customer",
                "example": "SatoshiNakamoto-xUYJbPw9hw",
                "minimum": 1
              }
            }
          },
          {
            "type": "object",
            "description": "Request object to create a new restake intent.",
            "required": [
              "protocol",
              "network"
            ],
            "properties": {
              "protocol": {
                "type": "string",
                "description": "Blockchain protocol.",
                "enum": [
                  "ethereum",
                  "polkadot",
                  "solana",
                  "cosmos",
                  "polygon",
                  "near",
                  "cardano",
                  "avalanche",
                  "binance"
                ]
              },
              "network": {
                "type": "string",
                "description": "Protocol-specific network.",
                "enum": [
                  "mainnet",
                  "localnet",
                  "goerli",
                  "prater",
                  "holesky",
                  "testnet",
                  "devnet",
                  "kusama",
                  "westend",
                  "preprod",
                  "fuji",
                  "local"
                ]
              },
              "cosmos": {
                "type": "object",
                "description": "Cosmos Restake Intent",
                "required": [
                  "unsigned_transaction",
                  "delegator_address",
                  "old_validator_address",
                  "new_validator_address",
                  "amount"
                ],
                "properties": {
                  "unsigned_transaction": {
                    "type": "string",
                    "format": "base64",
                    "description": "Generated unsigned transaction smart contract call data.",
                    "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                  },
                  "delegator_address": {
                    "type": "string",
                    "description": "Public Key of an asymmetric key-pair.",
                    "format": "bech32",
                    "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                    "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                  },
                  "old_validator_address": {
                    "type": "string",
                    "description": "Public Key of an asymmetric key-pair.",
                    "format": "bech32",
                    "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                    "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                  },
                  "new_validator_address": {
                    "type": "string",
                    "description": "Public Key of an asymmetric key-pair.",
                    "format": "bech32",
                    "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                    "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                  },
                  "amount": {
                    "type": "string",
                    "description": "Denomination of the cryptocurrency Cosmos.",
                    "pattern": "^[1-9]\\d+$",
                    "example": "100"
                  }
                }
              },
              "binance": {
                "type": "object",
                "description": "Binance Restake Intent",
                "required": [
                  "unsigned_transaction",
                  "delegator_address",
                  "old_validator_address",
                  "new_validator_address",
                  "amount"
                ],
                "properties": {
                  "unsigned_transaction": {
                    "type": "string",
                    "format": "base64",
                    "description": "Generated unsigned transaction smart contract call data.",
                    "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                  },
                  "delegator_address": {
                    "type": "string",
                    "description": "Binance beacon chain address.",
                    "format": "bech32",
                    "pattern": "^bnb[0-9a-z]+$",
                    "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
                  },
                  "old_validator_address": {
                    "type": "string",
                    "description": "Binance beacon chain validator address.",
                    "format": "bech32",
                    "pattern": "^bva[0-9a-zA-Z]*$",
                    "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                  },
                  "new_validator_address": {
                    "type": "string",
                    "description": "Binance beacon chain validator address.",
                    "format": "bech32",
                    "pattern": "^bva[0-9a-zA-Z]*$",
                    "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                  },
                  "amount": {
                    "type": "string",
                    "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
                    "pattern": "^[1-9]\\d+$",
                    "example": "10000000000"
                  }
                }
              }
            }
          }
        ]
      },
      "RestakeIntentBinance": {
        "type": "object",
        "description": "Binance Restake Intent",
        "required": [
          "unsigned_transaction",
          "delegator_address",
          "old_validator_address",
          "new_validator_address",
          "amount"
        ],
        "properties": {
          "unsigned_transaction": {
            "type": "string",
            "format": "base64",
            "description": "Generated unsigned transaction smart contract call data.",
            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
          },
          "delegator_address": {
            "type": "string",
            "description": "Binance beacon chain address.",
            "format": "bech32",
            "pattern": "^bnb[0-9a-z]+$",
            "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
          },
          "old_validator_address": {
            "type": "string",
            "description": "Binance beacon chain validator address.",
            "format": "bech32",
            "pattern": "^bva[0-9a-zA-Z]*$",
            "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
          },
          "new_validator_address": {
            "type": "string",
            "description": "Binance beacon chain validator address.",
            "format": "bech32",
            "pattern": "^bva[0-9a-zA-Z]*$",
            "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
          },
          "amount": {
            "type": "string",
            "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
            "pattern": "^[1-9]\\d+$",
            "example": "10000000000"
          }
        }
      },
      "RestakeIntentCosmos": {
        "type": "object",
        "description": "Cosmos Restake Intent",
        "required": [
          "unsigned_transaction",
          "delegator_address",
          "old_validator_address",
          "new_validator_address",
          "amount"
        ],
        "properties": {
          "unsigned_transaction": {
            "type": "string",
            "format": "base64",
            "description": "Generated unsigned transaction smart contract call data.",
            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
          },
          "delegator_address": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "bech32",
            "pattern": "^cosmos[1-9a-zA-Z]{39}$",
            "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
          },
          "old_validator_address": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "bech32",
            "pattern": "^cosmos[1-9a-zA-Z]{39}$",
            "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
          },
          "new_validator_address": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "bech32",
            "pattern": "^cosmos[1-9a-zA-Z]{39}$",
            "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
          },
          "amount": {
            "type": "string",
            "description": "Denomination of the cryptocurrency Cosmos.",
            "pattern": "^[1-9]\\d+$",
            "example": "100"
          }
        }
      },
      "RewardsWithdrawIntentCosmos": {
        "type": "object",
        "required": [
          "protocol",
          "network",
          "cosmos",
          "customer_id"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Cosmos protocol",
            "enum": [
              "cosmos"
            ]
          },
          "network": {
            "type": "string",
            "description": "Cosmos network",
            "enum": [
              "mainnet",
              "testnet"
            ]
          },
          "cosmos": {
            "type": "object",
            "required": [
              "unsigned_transaction",
              "delegator_address",
              "validator_address",
              "amount"
            ],
            "properties": {
              "unsigned_transaction": {
                "type": "string",
                "format": "base64",
                "description": "Generated unsigned transaction smart contract call data.",
                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
              },
              "delegator_address": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "bech32",
                "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
              },
              "validator_address": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "bech32",
                "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
              },
              "amount": {
                "type": "string",
                "description": "Denomination of the cryptocurrency Cosmos.",
                "pattern": "^[1-9]\\d+$",
                "example": "100"
              }
            }
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          }
        }
      },
      "CosmosPublicKey": {
        "type": "object",
        "description": "Cosmos public key description",
        "required": [
          "value",
          "type"
        ],
        "properties": {
          "value": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "base64",
            "example": "MTIzMDl3c2hka2Fqc2RoYXNramQ4OTEyM25oamtzaGRrcWplZ"
          },
          "type": {
            "type": "string",
            "description": "Cosmos public key types",
            "enum": [
              "ed25519",
              "secp256k1"
            ]
          }
        }
      },
      "CosmosPublicKeyType": {
        "type": "string",
        "description": "Cosmos public key types",
        "enum": [
          "ed25519",
          "secp256k1"
        ]
      },
      "RestakeIntentId": {
        "type": "string",
        "format": "uuid",
        "description": "Unique idenifier for a restake intent.",
        "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
      },
      "PlanCosmosConfig": {
        "type": "object",
        "description": "Cosmos staking plan config",
        "required": [
          "validator_address"
        ],
        "properties": {
          "validator_address": {
            "type": "object",
            "required": [
              "mainnet",
              "testnet"
            ],
            "properties": {
              "mainnet": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "bech32",
                "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
              },
              "testnet": {
                "type": "string",
                "description": "Public Key of an asymmetric key-pair.",
                "format": "bech32",
                "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
              }
            }
          }
        }
      },
      "PlanBinanceConfig": {
        "type": "object",
        "description": "Binance staking plan config",
        "required": [
          "validator_address"
        ],
        "properties": {
          "validator_address": {
            "type": "object",
            "required": [
              "mainnet",
              "testnet"
            ],
            "properties": {
              "mainnet": {
                "type": "string",
                "description": "Binance beacon chain validator address.",
                "format": "bech32",
                "pattern": "^bva[0-9a-zA-Z]*$",
                "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
              },
              "testnet": {
                "type": "string",
                "description": "Binance beacon chain validator address.",
                "format": "bech32",
                "pattern": "^bva[0-9a-zA-Z]*$",
                "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
              }
            }
          }
        }
      },
      "BinanceDeactivatableAmount": {
        "type": "object",
        "description": "The deactivatable amount",
        "required": [
          "protocol",
          "network",
          "amount",
          "currency"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Binance beacon chain protocol",
            "enum": [
              "binance"
            ]
          },
          "network": {
            "type": "string",
            "description": "Binance beacon chain network",
            "enum": [
              "mainnet",
              "testnet"
            ]
          },
          "currency": {
            "type": "string",
            "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
            "pattern": "^[1-9]\\d+$",
            "example": "10000000000"
          },
          "amount": {
            "type": "string",
            "pattern": "^[1-9]\\d+$",
            "example": "123456"
          },
          "wallets": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Amount per wallet",
              "required": [
                "wallet",
                "amount",
                "validator"
              ],
              "properties": {
                "wallet": {
                  "type": "string"
                },
                "amount": {
                  "type": "string",
                  "pattern": "^[1-9]\\d+$"
                },
                "validator": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "BinanceStakeIntentResponse": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "stake_intent_id",
              "customer_id"
            ],
            "properties": {
              "stake_intent_id": {
                "type": "string",
                "format": "base58",
                "description": "Unique idenifier for a group of stakes.",
                "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
              },
              "customer_id": {
                "type": "string",
                "description": "Unique identifier for a customer",
                "example": "SatoshiNakamoto-xUYJbPw9hw",
                "minimum": 1
              },
              "plan_id": {
                "type": "string",
                "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "protocol",
              "network",
              "binance"
            ],
            "properties": {
              "protocol": {
                "type": "string",
                "description": "Binance beacon chain protocol",
                "enum": [
                  "binance"
                ]
              },
              "network": {
                "type": "string",
                "description": "Binance beacon chain network",
                "enum": [
                  "mainnet",
                  "testnet"
                ]
              },
              "binance": {
                "type": "object",
                "description": "Binance Stake Intent response",
                "required": [
                  "unsigned_transaction",
                  "amount",
                  "delegator_address",
                  "validator_address"
                ],
                "properties": {
                  "unsigned_transaction": {
                    "type": "string",
                    "format": "base64",
                    "description": "Generated unsigned transaction smart contract call data.",
                    "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                  },
                  "delegator_address": {
                    "type": "string",
                    "description": "Binance beacon chain address.",
                    "format": "bech32",
                    "pattern": "^bnb[0-9a-z]+$",
                    "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
                  },
                  "validator_address": {
                    "type": "string",
                    "description": "Binance beacon chain validator address.",
                    "format": "bech32",
                    "pattern": "^bva[0-9a-zA-Z]*$",
                    "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                  },
                  "amount": {
                    "type": "string",
                    "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
                    "pattern": "^[1-9]\\d+$",
                    "example": "10000000000"
                  }
                }
              }
            }
          }
        ]
      },
      "CosmosDeactivatableAmount": {
        "type": "object",
        "description": "The deactivatable amount",
        "required": [
          "protocol",
          "network",
          "amount",
          "currency"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Cosmos protocol",
            "enum": [
              "cosmos"
            ]
          },
          "network": {
            "type": "string",
            "description": "Cosmos network",
            "enum": [
              "mainnet",
              "testnet"
            ]
          },
          "currency": {
            "type": "string",
            "description": "Denomination of the cryptocurrency Cosmos.",
            "pattern": "^[1-9]\\d+$",
            "example": "100"
          },
          "amount": {
            "type": "string",
            "pattern": "^[1-9]\\d+$",
            "example": "123456"
          },
          "wallets": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Amount per wallet",
              "required": [
                "wallet",
                "amount",
                "validator"
              ],
              "properties": {
                "wallet": {
                  "type": "string"
                },
                "amount": {
                  "type": "string",
                  "pattern": "^[1-9]\\d+$"
                },
                "validator": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "CosmosWithdrawableRewardsAmount": {
        "type": "object",
        "description": "The withdrawable rewards amount",
        "required": [
          "protocol",
          "network",
          "amount",
          "currency"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Cosmos protocol",
            "enum": [
              "cosmos"
            ]
          },
          "network": {
            "type": "string",
            "description": "Cosmos network",
            "enum": [
              "mainnet",
              "testnet"
            ]
          },
          "currency": {
            "type": "string",
            "description": "Denomination of the cryptocurrency Cosmos.",
            "pattern": "^[1-9]\\d+$",
            "example": "100"
          },
          "amount": {
            "type": "string",
            "pattern": "^[1-9]\\d+$",
            "example": "123456"
          },
          "wallets": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Amount per wallet",
              "required": [
                "wallet",
                "amount",
                "validator"
              ],
              "properties": {
                "wallet": {
                  "type": "string"
                },
                "amount": {
                  "type": "string",
                  "pattern": "^[1-9]\\d+$"
                },
                "validator": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "CosmosStakeIntentResponse": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "stake_intent_id",
              "customer_id"
            ],
            "properties": {
              "stake_intent_id": {
                "type": "string",
                "format": "base58",
                "description": "Unique idenifier for a group of stakes.",
                "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
              },
              "customer_id": {
                "type": "string",
                "description": "Unique identifier for a customer",
                "example": "SatoshiNakamoto-xUYJbPw9hw",
                "minimum": 1
              },
              "plan_id": {
                "type": "string",
                "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "protocol",
              "network"
            ],
            "properties": {
              "protocol": {
                "type": "string",
                "description": "Cosmos protocol",
                "enum": [
                  "cosmos"
                ]
              },
              "network": {
                "type": "string",
                "description": "Cosmos network",
                "enum": [
                  "mainnet",
                  "testnet"
                ]
              },
              "cosmos": {
                "type": "object",
                "description": "Cosmos Stake Intent response",
                "required": [
                  "unsigned_transaction",
                  "amount",
                  "delegator_address",
                  "validator_address"
                ],
                "properties": {
                  "unsigned_transaction": {
                    "type": "string",
                    "format": "base64",
                    "description": "Generated unsigned transaction smart contract call data.",
                    "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                  },
                  "delegator_address": {
                    "type": "string",
                    "description": "Public Key of an asymmetric key-pair.",
                    "format": "bech32",
                    "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                    "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                  },
                  "validator_address": {
                    "type": "string",
                    "description": "Public Key of an asymmetric key-pair.",
                    "format": "bech32",
                    "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                    "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                  },
                  "amount": {
                    "type": "string",
                    "description": "Denomination of the cryptocurrency Cosmos.",
                    "pattern": "^[1-9]\\d+$",
                    "example": "100"
                  }
                }
              }
            }
          }
        ]
      },
      "RestakeIntents": {
        "type": "object",
        "description": "Restake intents",
        "required": [
          "protocol",
          "network",
          "customer_id"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          },
          "network": {
            "type": "string",
            "description": "Protocol-specific network.",
            "enum": [
              "mainnet",
              "localnet",
              "goerli",
              "prater",
              "holesky",
              "testnet",
              "devnet",
              "kusama",
              "westend",
              "preprod",
              "fuji",
              "local"
            ]
          },
          "cosmos": {
            "type": "array",
            "description": "List of restake intents",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "restake_intent_id",
                    "customer_id"
                  ],
                  "properties": {
                    "restake_intent_id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Unique idenifier for a restake intent.",
                      "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "Unique identifier for a customer",
                      "example": "SatoshiNakamoto-xUYJbPw9hw",
                      "minimum": 1
                    }
                  }
                },
                {
                  "type": "object",
                  "description": "Response to a new restake intent request.",
                  "required": [
                    "protocol",
                    "network",
                    "cosmos"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Cosmos protocol",
                      "enum": [
                        "cosmos"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "Cosmos network",
                      "enum": [
                        "mainnet",
                        "testnet"
                      ]
                    },
                    "cosmos": {
                      "type": "object",
                      "description": "Cosmos Restake Intent",
                      "required": [
                        "unsigned_transaction",
                        "delegator_address",
                        "old_validator_address",
                        "new_validator_address",
                        "amount"
                      ],
                      "properties": {
                        "unsigned_transaction": {
                          "type": "string",
                          "format": "base64",
                          "description": "Generated unsigned transaction smart contract call data.",
                          "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                        },
                        "delegator_address": {
                          "type": "string",
                          "description": "Public Key of an asymmetric key-pair.",
                          "format": "bech32",
                          "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                          "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                        },
                        "old_validator_address": {
                          "type": "string",
                          "description": "Public Key of an asymmetric key-pair.",
                          "format": "bech32",
                          "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                          "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                        },
                        "new_validator_address": {
                          "type": "string",
                          "description": "Public Key of an asymmetric key-pair.",
                          "format": "bech32",
                          "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                          "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                        },
                        "amount": {
                          "type": "string",
                          "description": "Denomination of the cryptocurrency Cosmos.",
                          "pattern": "^[1-9]\\d+$",
                          "example": "100"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "binance": {
            "type": "array",
            "description": "List of restake intents",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "restake_intent_id",
                    "customer_id"
                  ],
                  "properties": {
                    "restake_intent_id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Unique idenifier for a restake intent.",
                      "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "Unique identifier for a customer",
                      "example": "SatoshiNakamoto-xUYJbPw9hw",
                      "minimum": 1
                    }
                  }
                },
                {
                  "type": "object",
                  "description": "Response to a new restake intent request.",
                  "required": [
                    "protocol",
                    "network",
                    "binance"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Binance beacon chain protocol",
                      "enum": [
                        "binance"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "Binance beacon chain network",
                      "enum": [
                        "mainnet",
                        "testnet"
                      ]
                    },
                    "binance": {
                      "type": "object",
                      "description": "Binance Restake Intent",
                      "required": [
                        "unsigned_transaction",
                        "delegator_address",
                        "old_validator_address",
                        "new_validator_address",
                        "amount"
                      ],
                      "properties": {
                        "unsigned_transaction": {
                          "type": "string",
                          "format": "base64",
                          "description": "Generated unsigned transaction smart contract call data.",
                          "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                        },
                        "delegator_address": {
                          "type": "string",
                          "description": "Binance beacon chain address.",
                          "format": "bech32",
                          "pattern": "^bnb[0-9a-z]+$",
                          "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
                        },
                        "old_validator_address": {
                          "type": "string",
                          "description": "Binance beacon chain validator address.",
                          "format": "bech32",
                          "pattern": "^bva[0-9a-zA-Z]*$",
                          "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                        },
                        "new_validator_address": {
                          "type": "string",
                          "description": "Binance beacon chain validator address.",
                          "format": "bech32",
                          "pattern": "^bva[0-9a-zA-Z]*$",
                          "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                        },
                        "amount": {
                          "type": "string",
                          "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
                          "pattern": "^[1-9]\\d+$",
                          "example": "10000000000"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          }
        }
      },
      "RestakeIntentsCosmos": {
        "type": "array",
        "description": "List of restake intents",
        "items": {
          "allOf": [
            {
              "type": "object",
              "required": [
                "restake_intent_id",
                "customer_id"
              ],
              "properties": {
                "restake_intent_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique idenifier for a restake intent.",
                  "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                },
                "customer_id": {
                  "type": "string",
                  "description": "Unique identifier for a customer",
                  "example": "SatoshiNakamoto-xUYJbPw9hw",
                  "minimum": 1
                }
              }
            },
            {
              "type": "object",
              "description": "Response to a new restake intent request.",
              "required": [
                "protocol",
                "network",
                "cosmos"
              ],
              "properties": {
                "protocol": {
                  "type": "string",
                  "description": "Cosmos protocol",
                  "enum": [
                    "cosmos"
                  ]
                },
                "network": {
                  "type": "string",
                  "description": "Cosmos network",
                  "enum": [
                    "mainnet",
                    "testnet"
                  ]
                },
                "cosmos": {
                  "type": "object",
                  "description": "Cosmos Restake Intent",
                  "required": [
                    "unsigned_transaction",
                    "delegator_address",
                    "old_validator_address",
                    "new_validator_address",
                    "amount"
                  ],
                  "properties": {
                    "unsigned_transaction": {
                      "type": "string",
                      "format": "base64",
                      "description": "Generated unsigned transaction smart contract call data.",
                      "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                    },
                    "delegator_address": {
                      "type": "string",
                      "description": "Public Key of an asymmetric key-pair.",
                      "format": "bech32",
                      "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                      "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                    },
                    "old_validator_address": {
                      "type": "string",
                      "description": "Public Key of an asymmetric key-pair.",
                      "format": "bech32",
                      "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                      "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                    },
                    "new_validator_address": {
                      "type": "string",
                      "description": "Public Key of an asymmetric key-pair.",
                      "format": "bech32",
                      "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                      "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                    },
                    "amount": {
                      "type": "string",
                      "description": "Denomination of the cryptocurrency Cosmos.",
                      "pattern": "^[1-9]\\d+$",
                      "example": "100"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "RestakeIntentsBinance": {
        "type": "array",
        "description": "List of restake intents",
        "items": {
          "allOf": [
            {
              "type": "object",
              "required": [
                "restake_intent_id",
                "customer_id"
              ],
              "properties": {
                "restake_intent_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Unique idenifier for a restake intent.",
                  "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                },
                "customer_id": {
                  "type": "string",
                  "description": "Unique identifier for a customer",
                  "example": "SatoshiNakamoto-xUYJbPw9hw",
                  "minimum": 1
                }
              }
            },
            {
              "type": "object",
              "description": "Response to a new restake intent request.",
              "required": [
                "protocol",
                "network",
                "binance"
              ],
              "properties": {
                "protocol": {
                  "type": "string",
                  "description": "Binance beacon chain protocol",
                  "enum": [
                    "binance"
                  ]
                },
                "network": {
                  "type": "string",
                  "description": "Binance beacon chain network",
                  "enum": [
                    "mainnet",
                    "testnet"
                  ]
                },
                "binance": {
                  "type": "object",
                  "description": "Binance Restake Intent",
                  "required": [
                    "unsigned_transaction",
                    "delegator_address",
                    "old_validator_address",
                    "new_validator_address",
                    "amount"
                  ],
                  "properties": {
                    "unsigned_transaction": {
                      "type": "string",
                      "format": "base64",
                      "description": "Generated unsigned transaction smart contract call data.",
                      "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                    },
                    "delegator_address": {
                      "type": "string",
                      "description": "Binance beacon chain address.",
                      "format": "bech32",
                      "pattern": "^bnb[0-9a-z]+$",
                      "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
                    },
                    "old_validator_address": {
                      "type": "string",
                      "description": "Binance beacon chain validator address.",
                      "format": "bech32",
                      "pattern": "^bva[0-9a-zA-Z]*$",
                      "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                    },
                    "new_validator_address": {
                      "type": "string",
                      "description": "Binance beacon chain validator address.",
                      "format": "bech32",
                      "pattern": "^bva[0-9a-zA-Z]*$",
                      "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                    },
                    "amount": {
                      "type": "string",
                      "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
                      "pattern": "^[1-9]\\d+$",
                      "example": "10000000000"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "CosmosRestakeIntentResponse": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "restake_intent_id",
              "customer_id"
            ],
            "properties": {
              "restake_intent_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique idenifier for a restake intent.",
                "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
              },
              "customer_id": {
                "type": "string",
                "description": "Unique identifier for a customer",
                "example": "SatoshiNakamoto-xUYJbPw9hw",
                "minimum": 1
              }
            }
          },
          {
            "type": "object",
            "description": "Response to a new restake intent request.",
            "required": [
              "protocol",
              "network",
              "cosmos"
            ],
            "properties": {
              "protocol": {
                "type": "string",
                "description": "Cosmos protocol",
                "enum": [
                  "cosmos"
                ]
              },
              "network": {
                "type": "string",
                "description": "Cosmos network",
                "enum": [
                  "mainnet",
                  "testnet"
                ]
              },
              "cosmos": {
                "type": "object",
                "description": "Cosmos Restake Intent",
                "required": [
                  "unsigned_transaction",
                  "delegator_address",
                  "old_validator_address",
                  "new_validator_address",
                  "amount"
                ],
                "properties": {
                  "unsigned_transaction": {
                    "type": "string",
                    "format": "base64",
                    "description": "Generated unsigned transaction smart contract call data.",
                    "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                  },
                  "delegator_address": {
                    "type": "string",
                    "description": "Public Key of an asymmetric key-pair.",
                    "format": "bech32",
                    "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                    "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                  },
                  "old_validator_address": {
                    "type": "string",
                    "description": "Public Key of an asymmetric key-pair.",
                    "format": "bech32",
                    "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                    "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                  },
                  "new_validator_address": {
                    "type": "string",
                    "description": "Public Key of an asymmetric key-pair.",
                    "format": "bech32",
                    "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                    "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                  },
                  "amount": {
                    "type": "string",
                    "description": "Denomination of the cryptocurrency Cosmos.",
                    "pattern": "^[1-9]\\d+$",
                    "example": "100"
                  }
                }
              }
            }
          }
        ]
      },
      "BinanceRestakeIntentResponse": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "restake_intent_id",
              "customer_id"
            ],
            "properties": {
              "restake_intent_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique idenifier for a restake intent.",
                "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
              },
              "customer_id": {
                "type": "string",
                "description": "Unique identifier for a customer",
                "example": "SatoshiNakamoto-xUYJbPw9hw",
                "minimum": 1
              }
            }
          },
          {
            "type": "object",
            "description": "Response to a new restake intent request.",
            "required": [
              "protocol",
              "network",
              "binance"
            ],
            "properties": {
              "protocol": {
                "type": "string",
                "description": "Binance beacon chain protocol",
                "enum": [
                  "binance"
                ]
              },
              "network": {
                "type": "string",
                "description": "Binance beacon chain network",
                "enum": [
                  "mainnet",
                  "testnet"
                ]
              },
              "binance": {
                "type": "object",
                "description": "Binance Restake Intent",
                "required": [
                  "unsigned_transaction",
                  "delegator_address",
                  "old_validator_address",
                  "new_validator_address",
                  "amount"
                ],
                "properties": {
                  "unsigned_transaction": {
                    "type": "string",
                    "format": "base64",
                    "description": "Generated unsigned transaction smart contract call data.",
                    "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                  },
                  "delegator_address": {
                    "type": "string",
                    "description": "Binance beacon chain address.",
                    "format": "bech32",
                    "pattern": "^bnb[0-9a-z]+$",
                    "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
                  },
                  "old_validator_address": {
                    "type": "string",
                    "description": "Binance beacon chain validator address.",
                    "format": "bech32",
                    "pattern": "^bva[0-9a-zA-Z]*$",
                    "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                  },
                  "new_validator_address": {
                    "type": "string",
                    "description": "Binance beacon chain validator address.",
                    "format": "bech32",
                    "pattern": "^bva[0-9a-zA-Z]*$",
                    "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                  },
                  "amount": {
                    "type": "string",
                    "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
                    "pattern": "^[1-9]\\d+$",
                    "example": "10000000000"
                  }
                }
              }
            }
          }
        ]
      },
      "BinanceValidatorAddress": {
        "type": "string",
        "description": "Binance beacon chain validator address.",
        "format": "bech32",
        "pattern": "^bva[0-9a-zA-Z]*$",
        "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
      },
      "NodeProvider": {
        "type": "object",
        "description": "node provider",
        "required": [
          "provider",
          "region",
          "priority"
        ],
        "properties": {
          "provider": {
            "description": "Cloud provider which will host the node.",
            "x-go-type": "models.ProviderID",
            "x-go-type-import": {
              "path": "go.blockdaemon.com/nodeq-server/pkg/models",
              "name": "models"
            }
          },
          "region": {
            "description": "cloud provider's zone code",
            "type": "string"
          },
          "priority": {
            "description": "reflect priority weighting. provider with weighted 1 will be the first one to try.",
            "type": "integer",
            "format": "uint8"
          }
        }
      },
      "NodeProviders": {
        "type": "array",
        "description": "list of node providers",
        "minItems": 1,
        "items": {
          "type": "object",
          "description": "node provider",
          "required": [
            "provider",
            "region",
            "priority"
          ],
          "properties": {
            "provider": {
              "description": "Cloud provider which will host the node.",
              "x-go-type": "models.ProviderID",
              "x-go-type-import": {
                "path": "go.blockdaemon.com/nodeq-server/pkg/models",
                "name": "models"
              }
            },
            "region": {
              "description": "cloud provider's zone code",
              "type": "string"
            },
            "priority": {
              "description": "reflect priority weighting. provider with weighted 1 will be the first one to try.",
              "type": "integer",
              "format": "uint8"
            }
          }
        }
      },
      "CardanoStakeIntentResponse": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "stake_intent_id",
              "customer_id"
            ],
            "properties": {
              "stake_intent_id": {
                "type": "string",
                "format": "base58",
                "description": "Unique idenifier for a group of stakes.",
                "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
              },
              "customer_id": {
                "type": "string",
                "description": "Unique identifier for a customer",
                "example": "SatoshiNakamoto-xUYJbPw9hw",
                "minimum": 1
              },
              "plan_id": {
                "type": "string",
                "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "protocol",
              "network"
            ],
            "properties": {
              "protocol": {
                "type": "string",
                "description": "Cardano protocol",
                "enum": [
                  "cardano"
                ]
              },
              "network": {
                "type": "string",
                "description": "Cardano network",
                "enum": [
                  "mainnet",
                  "preprod",
                  "localnet"
                ]
              },
              "cardano": {
                "type": "object",
                "description": "Cardano Protocol Stake Intent",
                "required": [
                  "pool_id",
                  "unsigned_transaction",
                  "base_address"
                ],
                "properties": {
                  "pool_id": {
                    "type": "string",
                    "description": "bech32 encoded pool id.",
                    "format": "bech32",
                    "example": "pool1ev8fwfccn8gr0zcz3uyps0t0mcrefc6s95wjc6aed3ngc86y5rk"
                  },
                  "unsigned_transaction": {
                    "type": "string",
                    "format": "base64",
                    "description": "Generated unsigned transaction smart contract call data.",
                    "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                  },
                  "base_address": {
                    "type": "string",
                    "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
                    "format": "bech32",
                    "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
                  }
                }
              }
            }
          }
        ]
      },
      "PolygonWithdrawalIntentResponse": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "withdraw_intent_id",
              "customer_id"
            ],
            "properties": {
              "withdraw_intent_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique idenifier for a withdrawal intent.",
                "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
              },
              "customer_id": {
                "type": "string",
                "description": "Unique identifier for a customer",
                "example": "SatoshiNakamoto-xUYJbPw9hw",
                "minimum": 1
              }
            }
          },
          {
            "type": "object",
            "description": "Result of a new withdrawal intent request.",
            "required": [
              "protocol",
              "network"
            ],
            "properties": {
              "protocol": {
                "type": "string",
                "description": "Polygon protocol",
                "enum": [
                  "polygon"
                ]
              },
              "network": {
                "type": "string",
                "description": "Polygon network",
                "enum": [
                  "mainnet",
                  "goerli",
                  "prater"
                ]
              },
              "polygon": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "to",
                    "unsigned_transaction",
                    "unbond_nonce",
                    "wallet_address"
                  ],
                  "properties": {
                    "to": {
                      "type": "string",
                      "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                      "format": "hex",
                      "pattern": "^0x[a-fA-F0-9]{40}$",
                      "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                    },
                    "unsigned_transaction": {
                      "type": "string",
                      "format": "base64",
                      "description": "Generated unsigned transaction smart contract call data.",
                      "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                    },
                    "unbond_nonce": {
                      "type": "integer",
                      "description": "Number for one use only",
                      "example": 1
                    },
                    "wallet_address": {
                      "type": "string",
                      "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                      "format": "hex",
                      "pattern": "^0x[a-fA-F0-9]{40}$",
                      "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "CardanoDeactivationIntentResponse": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "deactivate_intent_id",
              "customer_id"
            ],
            "properties": {
              "deactivate_intent_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique idenifier for deactivate intent.",
                "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
              },
              "customer_id": {
                "type": "string",
                "description": "Unique identifier for a customer",
                "example": "SatoshiNakamoto-xUYJbPw9hw",
                "minimum": 1
              }
            }
          },
          {
            "type": "object",
            "description": "Response to a new deactivation intent request.",
            "required": [
              "network",
              "protocol",
              "cardano"
            ],
            "properties": {
              "protocol": {
                "type": "string",
                "description": "Cardano protocol",
                "enum": [
                  "cardano"
                ]
              },
              "network": {
                "type": "string",
                "description": "Cardano network",
                "enum": [
                  "mainnet",
                  "preprod",
                  "localnet"
                ]
              },
              "cardano": {
                "type": "object",
                "description": "Result of the new Deactivate Intent request.",
                "required": [
                  "base_address",
                  "unsigned_transaction"
                ],
                "properties": {
                  "base_address": {
                    "type": "string",
                    "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
                    "format": "bech32",
                    "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
                  },
                  "unsigned_transaction": {
                    "type": "string",
                    "format": "base64",
                    "description": "Generated unsigned transaction smart contract call data.",
                    "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                  }
                }
              }
            }
          }
        ]
      },
      "PlanAdmin": {
        "type": "object",
        "description": "staking plan for validators",
        "required": [
          "id",
          "protocol",
          "network",
          "config",
          "customer_id",
          "staking_plan_type",
          "title"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
            "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for a customer",
            "example": "SatoshiNakamoto-xUYJbPw9hw",
            "minimum": 1
          },
          "protocol": {
            "type": "string",
            "description": "Blockchain protocol.",
            "enum": [
              "ethereum",
              "polkadot",
              "solana",
              "cosmos",
              "polygon",
              "near",
              "cardano",
              "avalanche",
              "binance"
            ]
          },
          "network": {
            "type": "string",
            "description": "Protocol-specific network.",
            "enum": [
              "mainnet",
              "localnet",
              "goerli",
              "prater",
              "holesky",
              "testnet",
              "devnet",
              "kusama",
              "westend",
              "preprod",
              "fuji",
              "local"
            ]
          },
          "providers": {
            "type": "array",
            "description": "list of node providers",
            "minItems": 1,
            "items": {
              "type": "object",
              "description": "node provider",
              "required": [
                "provider",
                "region",
                "priority"
              ],
              "properties": {
                "provider": {
                  "description": "Cloud provider which will host the node.",
                  "x-go-type": "models.ProviderID",
                  "x-go-type-import": {
                    "path": "go.blockdaemon.com/nodeq-server/pkg/models",
                    "name": "models"
                  }
                },
                "region": {
                  "description": "cloud provider's zone code",
                  "type": "string"
                },
                "priority": {
                  "description": "reflect priority weighting. provider with weighted 1 will be the first one to try.",
                  "type": "integer",
                  "format": "uint8"
                }
              }
            }
          },
          "minimum": {
            "description": "minimum number of validators to be available. required for white label plans",
            "type": "integer",
            "format": "int64"
          },
          "config": {
            "oneOf": [
              {
                "type": "object",
                "description": "Ethereum staking plan config",
                "required": [
                  "inventory_type"
                ],
                "properties": {
                  "suggested_fee_recipient": {
                    "type": "string",
                    "description": "the suggested fee recipient address",
                    "minimum": 1
                  },
                  "mev": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "ID of the MEV fee recipient. optional"
                      },
                      "enabled": {
                        "type": "boolean"
                      },
                      "relays": {
                        "type": "array",
                        "description": "List of Relay urls",
                        "items": {
                          "type": "string",
                          "format": "uri",
                          "description": "Relay url"
                        },
                        "minItems": 1
                      }
                    }
                  },
                  "inventory_type": {
                    "type": "string",
                    "description": "Indicates if the quantity of validators for the staking plan is static or dynamic. Static is a once off deployment of a specified quantity of validators. Dynamic is where an initial quantity of validators is deployed with a threshold of available validators also configured. If the number of available validators within the validator inventory drops below the threshold (by being reserved as part of a stake intents API call) then the dynamic plan will automatically deploy the required infrastructure to bring the number of available validators above the threshold.",
                    "enum": [
                      "static",
                      "dynamic"
                    ]
                  },
                  "execution_client": {
                    "type": "string",
                    "description": "The execution client to use on the node",
                    "enum": [
                      "geth",
                      "besu"
                    ]
                  }
                }
              },
              {
                "type": "object",
                "description": "Solana staking plan config",
                "required": [
                  "validator_address"
                ],
                "properties": {
                  "validator_address": {
                    "type": "object",
                    "required": [
                      "mainnet",
                      "testnet"
                    ],
                    "properties": {
                      "mainnet": {
                        "type": "string",
                        "description": "Public Key of an asymmetric key-pair.",
                        "format": "base58",
                        "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                        "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                      },
                      "testnet": {
                        "type": "string",
                        "description": "Public Key of an asymmetric key-pair.",
                        "format": "base58",
                        "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                        "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "description": "Polygon staking plan config",
                "required": [
                  "validator_share_address"
                ],
                "properties": {
                  "validator_share_address": {
                    "type": "object",
                    "required": [
                      "mainnet",
                      "testnet"
                    ],
                    "properties": {
                      "mainnet": {
                        "type": "string",
                        "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                        "format": "hex",
                        "pattern": "^0x[a-fA-F0-9]{40}$",
                        "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                      },
                      "testnet": {
                        "type": "string",
                        "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                        "format": "hex",
                        "pattern": "^0x[a-fA-F0-9]{40}$",
                        "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "description": "Cardano staking plan config",
                "required": [
                  "stake_pool_id"
                ],
                "properties": {
                  "stake_pool_id": {
                    "type": "object",
                    "required": [
                      "mainnet",
                      "preprod"
                    ],
                    "properties": {
                      "mainnet": {
                        "type": "string",
                        "description": "bech32 encoded pool id.",
                        "format": "bech32",
                        "example": "pool1ev8fwfccn8gr0zcz3uyps0t0mcrefc6s95wjc6aed3ngc86y5rk"
                      },
                      "preprod": {
                        "type": "string",
                        "description": "bech32 encoded pool id.",
                        "format": "bech32",
                        "example": "pool1ev8fwfccn8gr0zcz3uyps0t0mcrefc6s95wjc6aed3ngc86y5rk"
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "description": "Avalanche staking plan config",
                "required": [
                  "validator_address"
                ],
                "properties": {
                  "validator_address": {
                    "type": "object",
                    "required": [
                      "mainnet",
                      "fuji"
                    ],
                    "properties": {
                      "mainnet": {
                        "type": "string",
                        "description": "Avalanche validator node address",
                        "pattern": "^NodeID-[A-Za-z0-9]{43}$",
                        "example": "NodeID-B19uSxUKerjjnA215czAJLHMqNJMbsAMWuSxUKerjjW"
                      },
                      "fuji": {
                        "type": "string",
                        "description": "Avalanche validator node address",
                        "pattern": "^NodeID-[A-Za-z0-9]{43}$",
                        "example": "NodeID-B19uSxUKerjjnA215czAJLHMqNJMbsAMWuSxUKerjjW"
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "description": "Cosmos staking plan config",
                "required": [
                  "validator_address"
                ],
                "properties": {
                  "validator_address": {
                    "type": "object",
                    "required": [
                      "mainnet",
                      "testnet"
                    ],
                    "properties": {
                      "mainnet": {
                        "type": "string",
                        "description": "Public Key of an asymmetric key-pair.",
                        "format": "bech32",
                        "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                        "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                      },
                      "testnet": {
                        "type": "string",
                        "description": "Public Key of an asymmetric key-pair.",
                        "format": "bech32",
                        "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                        "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "description": "Binance staking plan config",
                "required": [
                  "validator_address"
                ],
                "properties": {
                  "validator_address": {
                    "type": "object",
                    "required": [
                      "mainnet",
                      "testnet"
                    ],
                    "properties": {
                      "mainnet": {
                        "type": "string",
                        "description": "Binance beacon chain validator address.",
                        "format": "bech32",
                        "pattern": "^bva[0-9a-zA-Z]*$",
                        "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                      },
                      "testnet": {
                        "type": "string",
                        "description": "Binance beacon chain validator address.",
                        "format": "bech32",
                        "pattern": "^bva[0-9a-zA-Z]*$",
                        "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                      }
                    }
                  }
                }
              }
            ]
          },
          "total_pending": {
            "description": "total number of pending validators in a staking plan",
            "type": "integer",
            "format": "int64"
          },
          "total_available": {
            "description": "total number of available validators in a staking plan",
            "type": "integer",
            "format": "int64"
          },
          "total_active": {
            "description": "total number of active validators in a staking plan",
            "type": "integer",
            "format": "int64"
          },
          "staking_plan_type": {
            "type": "string",
            "description": "Indicates if the staking plan requires a Blockdaemon validator launch or it is associated to a public validator.",
            "enum": [
              "white_label",
              "public"
            ]
          },
          "title": {
            "type": "string",
            "description": "Plan title for display purposes"
          },
          "total_reserved": {
            "description": "total number of reserved validators in a staking plan",
            "type": "integer",
            "format": "int64"
          },
          "shared": {
            "description": "flag for shared plans",
            "type": "boolean"
          }
        }
      },
      "Relays": {
        "type": "array",
        "description": "List of Relay urls",
        "items": {
          "type": "string",
          "format": "uri",
          "description": "Relay url"
        },
        "minItems": 1
      },
      "Relay": {
        "type": "string",
        "format": "uri",
        "description": "Relay url"
      },
      "ExecutionClient": {
        "type": "string",
        "description": "The execution client to use on the node",
        "enum": [
          "geth",
          "besu"
        ]
      },
      "ValidatorBondTime": {
        "type": "object",
        "description": "Epochs object indicates number of epochs required for validator bonding to occur.",
        "required": [
          "epochs"
        ],
        "properties": {
          "epochs": {
            "type": "object",
            "description": "Validator bonding / unbonding estimates in epochs",
            "required": [
              "current",
              "min"
            ],
            "properties": {
              "min": {
                "type": "integer",
                "format": "int64",
                "description": "estimated minimum epochs for validator bonding / unbonding to occur"
              },
              "max": {
                "type": "integer",
                "format": "int64",
                "description": "estimated maximum epochs for validator bonding / unbonding to occur"
              },
              "current": {
                "type": "integer",
                "format": "int64",
                "description": "current epoch where max / min epochs were calculated"
              }
            }
          }
        }
      },
      "ValidatorUnbondTime": {
        "type": "object",
        "description": "Epochs object indicates number of epochs required for validator unbonding to occur.",
        "required": [
          "epochs"
        ],
        "properties": {
          "epochs": {
            "type": "object",
            "description": "Validator bonding / unbonding estimates in epochs",
            "required": [
              "current",
              "min"
            ],
            "properties": {
              "min": {
                "type": "integer",
                "format": "int64",
                "description": "estimated minimum epochs for validator bonding / unbonding to occur"
              },
              "max": {
                "type": "integer",
                "format": "int64",
                "description": "estimated maximum epochs for validator bonding / unbonding to occur"
              },
              "current": {
                "type": "integer",
                "format": "int64",
                "description": "current epoch where max / min epochs were calculated"
              }
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "paths": {
    "/v1/plans": {
      "get": {
        "summary": "List of customer's staking plans",
        "operationId": "listCustomerPlans",
        "tags": [
          "General"
        ],
        "description": "This endpoint allows you to get a list of your staking plans.\n\nStaking plans are created by Blockdaemon on your behalf. They are a means to deploy white-label validators or get access to public Blockdaemon validators (depending on the protocol being used in the staking API).\n\nIf you do not yet have a staking plan, please [contact Blockdaemon sales](https://blockdaemon.com/get-in-touch/) to get started with our industry-leading staking API.",
        "parameters": [
          {
            "in": "query",
            "name": "mev_enabled",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "A filter on MEV on/off"
          },
          {
            "name": "X-Client-ID",
            "in": "header",
            "description": "Unique ID of the client/customer",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "required": true
          },
          {
            "name": "protocols",
            "in": "query",
            "required": false,
            "description": "A filter on the type of protocols.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "Blockchain protocol.",
                "enum": [
                  "ethereum",
                  "polkadot",
                  "solana",
                  "cosmos",
                  "polygon",
                  "near",
                  "cardano",
                  "avalanche",
                  "binance"
                ]
              }
            }
          },
          {
            "name": "networks",
            "in": "query",
            "required": false,
            "description": "A filter on the type of networks.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "Protocol-specific network.",
                "enum": [
                  "mainnet",
                  "localnet",
                  "goerli",
                  "prater",
                  "holesky",
                  "testnet",
                  "devnet",
                  "kusama",
                  "westend",
                  "preprod",
                  "fuji",
                  "local"
                ]
              }
            }
          },
          {
            "name": "providers",
            "in": "query",
            "required": false,
            "description": "A filter on the type of providers.",
            "schema": {
              "type": "array",
              "items": {
                "description": "Cloud provider which will host the node.",
                "x-go-type": "models.ProviderID",
                "x-go-type-import": {
                  "path": "go.blockdaemon.com/nodeq-server/pkg/models",
                  "name": "models"
                }
              }
            }
          },
          {
            "name": "regions",
            "in": "query",
            "required": false,
            "description": "A filter on the type of regions.",
            "schema": {
              "type": "array",
              "items": {
                "description": "cloud provider's zone code",
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "default": 1
            },
            "description": "The result set page to view"
          },
          {
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "maximum": 1000,
              "default": 250
            },
            "description": "The number of items to include on a single page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "plans",
                    "pagination"
                  ],
                  "properties": {
                    "pagination": {
                      "type": "object",
                      "description": "encapsulates pagination properties",
                      "required": [
                        "page",
                        "per_page",
                        "total"
                      ],
                      "properties": {
                        "page": {
                          "description": "current page number",
                          "type": "integer",
                          "format": "int64"
                        },
                        "per_page": {
                          "description": "number of results per page",
                          "type": "integer",
                          "format": "int64"
                        },
                        "total": {
                          "description": "total number of results",
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    },
                    "plans": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "staking plan for validators",
                        "required": [
                          "id",
                          "protocol",
                          "network",
                          "config",
                          "customer_id",
                          "staking_plan_type",
                          "title"
                        ],
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                            "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                          },
                          "customer_id": {
                            "type": "string",
                            "description": "Unique identifier for a customer",
                            "example": "SatoshiNakamoto-xUYJbPw9hw",
                            "minimum": 1
                          },
                          "protocol": {
                            "type": "string",
                            "description": "Blockchain protocol.",
                            "enum": [
                              "ethereum",
                              "polkadot",
                              "solana",
                              "cosmos",
                              "polygon",
                              "near",
                              "cardano",
                              "avalanche",
                              "binance"
                            ]
                          },
                          "network": {
                            "type": "string",
                            "description": "Protocol-specific network.",
                            "enum": [
                              "mainnet",
                              "localnet",
                              "goerli",
                              "prater",
                              "holesky",
                              "testnet",
                              "devnet",
                              "kusama",
                              "westend",
                              "preprod",
                              "fuji",
                              "local"
                            ]
                          },
                          "provider": {
                            "description": "Cloud provider which will host the node.",
                            "x-go-type": "models.ProviderID",
                            "x-go-type-import": {
                              "path": "go.blockdaemon.com/nodeq-server/pkg/models",
                              "name": "models"
                            }
                          },
                          "region": {
                            "description": "cloud provider's zone code",
                            "type": "string"
                          },
                          "minimum": {
                            "description": "minimum number of validators to be available. required for white label plans",
                            "type": "integer",
                            "format": "int64"
                          },
                          "config": {
                            "oneOf": [
                              {
                                "type": "object",
                                "description": "Ethereum staking plan config",
                                "required": [
                                  "inventory_type"
                                ],
                                "properties": {
                                  "suggested_fee_recipient": {
                                    "type": "string",
                                    "description": "the suggested fee recipient address",
                                    "minimum": 1
                                  },
                                  "mev": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "ID of the MEV fee recipient. optional"
                                      },
                                      "enabled": {
                                        "type": "boolean"
                                      },
                                      "relays": {
                                        "type": "array",
                                        "description": "List of Relay urls",
                                        "items": {
                                          "type": "string",
                                          "format": "uri",
                                          "description": "Relay url"
                                        },
                                        "minItems": 1
                                      }
                                    }
                                  },
                                  "inventory_type": {
                                    "type": "string",
                                    "description": "Indicates if the quantity of validators for the staking plan is static or dynamic. Static is a once off deployment of a specified quantity of validators. Dynamic is where an initial quantity of validators is deployed with a threshold of available validators also configured. If the number of available validators within the validator inventory drops below the threshold (by being reserved as part of a stake intents API call) then the dynamic plan will automatically deploy the required infrastructure to bring the number of available validators above the threshold.",
                                    "enum": [
                                      "static",
                                      "dynamic"
                                    ]
                                  },
                                  "execution_client": {
                                    "type": "string",
                                    "description": "The execution client to use on the node",
                                    "enum": [
                                      "geth",
                                      "besu"
                                    ]
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "description": "Solana staking plan config",
                                "required": [
                                  "validator_address"
                                ],
                                "properties": {
                                  "validator_address": {
                                    "type": "object",
                                    "required": [
                                      "mainnet",
                                      "testnet"
                                    ],
                                    "properties": {
                                      "mainnet": {
                                        "type": "string",
                                        "description": "Public Key of an asymmetric key-pair.",
                                        "format": "base58",
                                        "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                        "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                      },
                                      "testnet": {
                                        "type": "string",
                                        "description": "Public Key of an asymmetric key-pair.",
                                        "format": "base58",
                                        "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                        "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "description": "Polygon staking plan config",
                                "required": [
                                  "validator_share_address"
                                ],
                                "properties": {
                                  "validator_share_address": {
                                    "type": "object",
                                    "required": [
                                      "mainnet",
                                      "testnet"
                                    ],
                                    "properties": {
                                      "mainnet": {
                                        "type": "string",
                                        "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                                        "format": "hex",
                                        "pattern": "^0x[a-fA-F0-9]{40}$",
                                        "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                                      },
                                      "testnet": {
                                        "type": "string",
                                        "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                                        "format": "hex",
                                        "pattern": "^0x[a-fA-F0-9]{40}$",
                                        "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "description": "Cardano staking plan config",
                                "required": [
                                  "stake_pool_id"
                                ],
                                "properties": {
                                  "stake_pool_id": {
                                    "type": "object",
                                    "required": [
                                      "mainnet",
                                      "preprod"
                                    ],
                                    "properties": {
                                      "mainnet": {
                                        "type": "string",
                                        "description": "bech32 encoded pool id.",
                                        "format": "bech32",
                                        "example": "pool1ev8fwfccn8gr0zcz3uyps0t0mcrefc6s95wjc6aed3ngc86y5rk"
                                      },
                                      "preprod": {
                                        "type": "string",
                                        "description": "bech32 encoded pool id.",
                                        "format": "bech32",
                                        "example": "pool1ev8fwfccn8gr0zcz3uyps0t0mcrefc6s95wjc6aed3ngc86y5rk"
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "description": "Avalanche staking plan config",
                                "required": [
                                  "validator_address"
                                ],
                                "properties": {
                                  "validator_address": {
                                    "type": "object",
                                    "required": [
                                      "mainnet",
                                      "fuji"
                                    ],
                                    "properties": {
                                      "mainnet": {
                                        "type": "string",
                                        "description": "Avalanche validator node address",
                                        "pattern": "^NodeID-[A-Za-z0-9]{43}$",
                                        "example": "NodeID-B19uSxUKerjjnA215czAJLHMqNJMbsAMWuSxUKerjjW"
                                      },
                                      "fuji": {
                                        "type": "string",
                                        "description": "Avalanche validator node address",
                                        "pattern": "^NodeID-[A-Za-z0-9]{43}$",
                                        "example": "NodeID-B19uSxUKerjjnA215czAJLHMqNJMbsAMWuSxUKerjjW"
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "description": "Cosmos staking plan config",
                                "required": [
                                  "validator_address"
                                ],
                                "properties": {
                                  "validator_address": {
                                    "type": "object",
                                    "required": [
                                      "mainnet",
                                      "testnet"
                                    ],
                                    "properties": {
                                      "mainnet": {
                                        "type": "string",
                                        "description": "Public Key of an asymmetric key-pair.",
                                        "format": "bech32",
                                        "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                                        "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                                      },
                                      "testnet": {
                                        "type": "string",
                                        "description": "Public Key of an asymmetric key-pair.",
                                        "format": "bech32",
                                        "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                                        "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "description": "Binance staking plan config",
                                "required": [
                                  "validator_address"
                                ],
                                "properties": {
                                  "validator_address": {
                                    "type": "object",
                                    "required": [
                                      "mainnet",
                                      "testnet"
                                    ],
                                    "properties": {
                                      "mainnet": {
                                        "type": "string",
                                        "description": "Binance beacon chain validator address.",
                                        "format": "bech32",
                                        "pattern": "^bva[0-9a-zA-Z]*$",
                                        "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                                      },
                                      "testnet": {
                                        "type": "string",
                                        "description": "Binance beacon chain validator address.",
                                        "format": "bech32",
                                        "pattern": "^bva[0-9a-zA-Z]*$",
                                        "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          "total_pending": {
                            "description": "total number of pending validators in a staking plan",
                            "type": "integer",
                            "format": "int64"
                          },
                          "total_available": {
                            "description": "total number of available validators in a staking plan",
                            "type": "integer",
                            "format": "int64"
                          },
                          "total_active": {
                            "description": "total number of active validators in a staking plan",
                            "type": "integer",
                            "format": "int64"
                          },
                          "staking_plan_type": {
                            "type": "string",
                            "description": "Indicates if the staking plan requires a Blockdaemon validator launch or it is associated to a public validator.",
                            "enum": [
                              "white_label",
                              "public"
                            ]
                          },
                          "title": {
                            "type": "string",
                            "description": "Plan title for display purposes"
                          },
                          "total_reserved": {
                            "description": "total number of reserved validators in a staking plan",
                            "type": "integer",
                            "format": "int64"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v1/stake-intents": {
      "get": {
        "summary": "List Your Stake Intents",
        "operationId": "listStakeIntents",
        "tags": [
          "General"
        ],
        "description": "Retrieve a list of all outstanding stake intents.",
        "parameters": [
          {
            "name": "protocols",
            "in": "query",
            "required": false,
            "description": "Protocol(s) to list stake intents for (one per argument).",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "Blockchain protocol.",
                "enum": [
                  "ethereum",
                  "polkadot",
                  "solana",
                  "cosmos",
                  "polygon",
                  "near",
                  "cardano",
                  "avalanche",
                  "binance"
                ]
              }
            }
          },
          {
            "name": "networks",
            "in": "query",
            "required": false,
            "description": "Network(s) to list stake intents for (one per argument).",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "Protocol-specific network.",
                "enum": [
                  "mainnet",
                  "localnet",
                  "goerli",
                  "prater",
                  "holesky",
                  "testnet",
                  "devnet",
                  "kusama",
                  "westend",
                  "preprod",
                  "fuji",
                  "local"
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "default": 1
            },
            "description": "The result set page to view"
          },
          {
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "maximum": 1000,
              "default": 250
            },
            "description": "The number of items to include on a single page"
          },
          {
            "name": "from_time",
            "in": "query",
            "required": false,
            "description": "Filter stake intents created on or after this time.",
            "schema": {
              "description": "Timestamp",
              "type": "string",
              "example": "2023-01-11 06:22:46.182"
            }
          },
          {
            "name": "to_time",
            "in": "query",
            "required": false,
            "description": "Filter stake intents created on or before this time.",
            "schema": {
              "description": "Timestamp",
              "type": "string",
              "example": "2023-01-11 06:22:46.182"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "stake_intents",
                    "pagination"
                  ],
                  "properties": {
                    "stake_intents": {
                      "type": "array",
                      "description": "List of stake intents",
                      "items": {
                        "type": "object",
                        "required": [
                          "stake_intent_id",
                          "protocol",
                          "network",
                          "customer_id"
                        ],
                        "properties": {
                          "stake_intent_id": {
                            "type": "string",
                            "format": "base58",
                            "description": "Unique idenifier for a group of stakes.",
                            "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
                          },
                          "protocol": {
                            "type": "string",
                            "description": "Blockchain protocol.",
                            "enum": [
                              "ethereum",
                              "polkadot",
                              "solana",
                              "cosmos",
                              "polygon",
                              "near",
                              "cardano",
                              "avalanche",
                              "binance"
                            ]
                          },
                          "network": {
                            "type": "string",
                            "description": "Protocol-specific network.",
                            "enum": [
                              "mainnet",
                              "localnet",
                              "goerli",
                              "prater",
                              "holesky",
                              "testnet",
                              "devnet",
                              "kusama",
                              "westend",
                              "preprod",
                              "fuji",
                              "local"
                            ]
                          },
                          "ethereum": {
                            "type": "object",
                            "description": "Ethereum Stake Intent response",
                            "required": [
                              "stakes",
                              "contract_address",
                              "unsigned_transaction",
                              "estimated_gas",
                              "expiration_time"
                            ],
                            "properties": {
                              "stakes": {
                                "description": "Stakes being made.",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "description": "Individual Ethereum Stake Response",
                                  "required": [
                                    "stake_id",
                                    "amount",
                                    "validator_public_key",
                                    "withdrawal_credentials",
                                    "fee_recipient"
                                  ],
                                  "properties": {
                                    "stake_id": {
                                      "description": "Unique stake identifier.",
                                      "type": "string",
                                      "format": "base58",
                                      "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                                    },
                                    "amount": {
                                      "type": "string",
                                      "description": "Amount of ETH (denominated in Gwei).",
                                      "pattern": "^[1-9]\\d{10,}$",
                                      "example": "32000000000"
                                    },
                                    "validator_public_key": {
                                      "type": "string",
                                      "description": "A BLS public Key.",
                                      "format": "base64",
                                      "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                                    },
                                    "withdrawal_credentials": {
                                      "type": "string",
                                      "format": "hex",
                                      "pattern": "^0x0(0|1)[a-fA-F0-9]{62}$",
                                      "example": "0x0092c20062cee70389f1cb4fa566a2be5e2319ff43965db26dbaa3ce90b9df99",
                                      "description": "Hexadecimal encoded [withdrawal credentials](https://github.com/ethereum/consensus-specs/blob/master/specs/phase0/validator.md#withdrawal-credentials) which can be either a BLS public key or an Ethereum account address.\n\nThis parameter currently accepts ETH1 and BLS withdrawal credentials, but it is considered deprecated after the Capella/Shanghai fork. All users are now advised to use an ETH1 withdrawal address, specified through the `withdrawal_address` parameter as this is required to enable the ongoing accrual of rewards.\n\nFor more information regarding creating withdrawal credentials, please see the official [Ethereum Launchpad FAQ](https://launchpad.ethereum.org/en/faq#withdrawal-credentials)."
                                    },
                                    "fee_recipient": {
                                      "type": "string",
                                      "description": "An Ethereum address to receive transaction fees from published blocks. 20-bytes, hex encoded with 0x prefix, case insensitive.",
                                      "example": "0x93247f2209abcacf57b75a51dafae777f9dd38bc",
                                      "pattern": "^0x[a-fA-F0-9]{40}$"
                                    }
                                  }
                                }
                              },
                              "contract_address": {
                                "type": "string",
                                "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                                "format": "hex",
                                "pattern": "^0x[a-fA-F0-9]{40}$",
                                "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                              },
                              "unsigned_transaction": {
                                "type": "string",
                                "format": "base64",
                                "description": "Generated unsigned transaction smart contract call data.",
                                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                              },
                              "estimated_gas": {
                                "type": "integer",
                                "description": "Gas estimation of the transaction",
                                "format": "uint64",
                                "example": 1001
                              },
                              "expiration_time": {
                                "type": "integer",
                                "description": "Transaction expiration time",
                                "format": "int64",
                                "example": 1689939023
                              }
                            }
                          },
                          "polkadot": {
                            "type": "object",
                            "description": "Polkadot Stake Intent Response",
                            "required": [
                              "stake_id",
                              "unsigned_transaction",
                              "proxy_address"
                            ],
                            "properties": {
                              "unsigned_transaction": {
                                "description": "Unsigned transaction that bonds a Blockdaemon's proxy account to the given customer account.\nOnce this transaction is signed, broadcasted to the network and included in the canonical history of the chain, the proxy account will be associated with the customer account.",
                                "type": "string",
                                "format": "base64",
                                "example": "0xa4041601008c16e19e94328985d65cb7e3245213892730dd0e841f6511478cb12f23a178330100000000"
                              },
                              "customer_address": {
                                "description": "Address of the customer account to associate with the proxy account.",
                                "type": "string",
                                "format": "base58",
                                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                              },
                              "controller_address": {
                                "description": "Address of the customer account to associate with the proxy account.\nSame as customer_address. Deprecated - will be removed in a later version.",
                                "type": "string",
                                "format": "base58",
                                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                              },
                              "proxy_address": {
                                "description": "Address of the proxy account to associate with the customer account.",
                                "type": "string",
                                "format": "base58",
                                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                              }
                            }
                          },
                          "solana": {
                            "type": "object",
                            "description": "Solana Stake Intent response",
                            "required": [
                              "stake_id",
                              "amount",
                              "validator_public_key",
                              "withdrawal_authority",
                              "staking_authority",
                              "stake_account_public_key",
                              "unsigned_transaction",
                              "expiration_time"
                            ],
                            "properties": {
                              "stake_id": {
                                "description": "Unique stake identifier.",
                                "type": "string",
                                "format": "base58",
                                "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                              },
                              "amount": {
                                "type": "string",
                                "description": "Denomination of the cryptocurrency Solana.",
                                "pattern": "^[1-9]\\d+$",
                                "example": "100"
                              },
                              "validator_public_key": {
                                "type": "string",
                                "description": "A BLS public Key.",
                                "format": "base64",
                                "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                              },
                              "staking_authority": {
                                "type": "string",
                                "description": "Public Key of an asymmetric key-pair.",
                                "format": "base58",
                                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                              },
                              "withdrawal_authority": {
                                "type": "string",
                                "description": "A BLS public Key.",
                                "format": "base64",
                                "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                              },
                              "stake_account_public_key": {
                                "type": "string",
                                "description": "Public Key of an asymmetric key-pair.",
                                "format": "base58",
                                "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                              },
                              "unsigned_transaction": {
                                "type": "string",
                                "format": "base64",
                                "description": "Generated unsigned transaction smart contract call data.",
                                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                              },
                              "expiration_time": {
                                "type": "integer",
                                "description": "Transaction expiration time",
                                "format": "int64",
                                "example": 1689939023
                              }
                            }
                          },
                          "cosmos": {
                            "type": "object",
                            "description": "Cosmos Stake Intent response",
                            "required": [
                              "unsigned_transaction",
                              "amount",
                              "delegator_address",
                              "validator_address"
                            ],
                            "properties": {
                              "unsigned_transaction": {
                                "type": "string",
                                "format": "base64",
                                "description": "Generated unsigned transaction smart contract call data.",
                                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                              },
                              "delegator_address": {
                                "type": "string",
                                "description": "Public Key of an asymmetric key-pair.",
                                "format": "bech32",
                                "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                                "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                              },
                              "validator_address": {
                                "type": "string",
                                "description": "Public Key of an asymmetric key-pair.",
                                "format": "bech32",
                                "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                                "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                              },
                              "amount": {
                                "type": "string",
                                "description": "Denomination of the cryptocurrency Cosmos.",
                                "pattern": "^[1-9]\\d+$",
                                "example": "100"
                              }
                            }
                          },
                          "binance": {
                            "type": "object",
                            "description": "Binance Stake Intent response",
                            "required": [
                              "unsigned_transaction",
                              "amount",
                              "delegator_address",
                              "validator_address"
                            ],
                            "properties": {
                              "unsigned_transaction": {
                                "type": "string",
                                "format": "base64",
                                "description": "Generated unsigned transaction smart contract call data.",
                                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                              },
                              "delegator_address": {
                                "type": "string",
                                "description": "Binance beacon chain address.",
                                "format": "bech32",
                                "pattern": "^bnb[0-9a-z]+$",
                                "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
                              },
                              "validator_address": {
                                "type": "string",
                                "description": "Binance beacon chain validator address.",
                                "format": "bech32",
                                "pattern": "^bva[0-9a-zA-Z]*$",
                                "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                              },
                              "amount": {
                                "type": "string",
                                "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
                                "pattern": "^[1-9]\\d+$",
                                "example": "10000000000"
                              }
                            }
                          },
                          "polygon": {
                            "type": "object",
                            "description": "Polygon Stake Intent",
                            "required": [
                              "to",
                              "unsigned_transaction",
                              "amount",
                              "wallet_address"
                            ],
                            "properties": {
                              "to": {
                                "type": "string",
                                "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                                "format": "hex",
                                "pattern": "^0x[a-fA-F0-9]{40}$",
                                "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                              },
                              "unsigned_transaction": {
                                "type": "string",
                                "format": "base64",
                                "description": "Generated unsigned transaction smart contract call data.",
                                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                              },
                              "amount": {
                                "type": "string",
                                "description": "Denomination of the cryptocurrency Polygon.",
                                "pattern": "^[1-9]\\d+$",
                                "example": "100"
                              },
                              "wallet_address": {
                                "type": "string",
                                "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                                "format": "hex",
                                "pattern": "^0x[a-fA-F0-9]{40}$",
                                "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                              }
                            }
                          },
                          "near": {
                            "type": "object",
                            "description": "NEAR Protocol Stake Intent",
                            "required": [
                              "to",
                              "unsigned_transaction",
                              "amount",
                              "wallet_address",
                              "public_key",
                              "expiration_time"
                            ],
                            "properties": {
                              "to": {
                                "type": "string",
                                "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                                "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                                "example": "alice.near"
                              },
                              "unsigned_transaction": {
                                "type": "string",
                                "format": "base64",
                                "description": "Generated unsigned transaction smart contract call data.",
                                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                              },
                              "amount": {
                                "type": "string",
                                "description": "Denomination of NEAR Protocol.",
                                "pattern": "^[1-9]\\d+$",
                                "example": "100000000000000000000000000"
                              },
                              "wallet_address": {
                                "type": "string",
                                "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                                "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                                "example": "alice.near"
                              },
                              "public_key": {
                                "type": "string",
                                "description": "Base58 encoded public key prefixed by ed25519, associated with the private key that will be used to sign the transaction.",
                                "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
                                "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
                              },
                              "expiration_time": {
                                "type": "integer",
                                "description": "Transaction expiration time",
                                "format": "int64",
                                "example": 1689939023
                              }
                            }
                          },
                          "cardano": {
                            "type": "object",
                            "description": "Cardano Protocol Stake Intent",
                            "required": [
                              "pool_id",
                              "unsigned_transaction",
                              "base_address"
                            ],
                            "properties": {
                              "pool_id": {
                                "type": "string",
                                "description": "bech32 encoded pool id.",
                                "format": "bech32",
                                "example": "pool1ev8fwfccn8gr0zcz3uyps0t0mcrefc6s95wjc6aed3ngc86y5rk"
                              },
                              "unsigned_transaction": {
                                "type": "string",
                                "format": "base64",
                                "description": "Generated unsigned transaction smart contract call data.",
                                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                              },
                              "base_address": {
                                "type": "string",
                                "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
                                "format": "bech32",
                                "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
                              }
                            }
                          },
                          "avalanche": {
                            "type": "object",
                            "description": "Avalanche Stake Intent",
                            "required": [
                              "validator_address",
                              "unsigned_transaction",
                              "amount",
                              "delegator_address",
                              "start_time",
                              "end_time"
                            ],
                            "properties": {
                              "validator_address": {
                                "type": "string",
                                "description": "Avalanche validator node address",
                                "pattern": "^NodeID-[A-Za-z0-9]{43}$",
                                "example": "NodeID-B19uSxUKerjjnA215czAJLHMqNJMbsAMWuSxUKerjjW"
                              },
                              "unsigned_transaction": {
                                "type": "string",
                                "format": "base64",
                                "description": "Generated unsigned transaction smart contract call data.",
                                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                              },
                              "amount": {
                                "type": "string",
                                "description": "Denomination of Avalanche.",
                                "pattern": "^[1-9]\\d+$",
                                "example": "10000000000"
                              },
                              "delegator_address": {
                                "type": "string",
                                "description": "Avalanche platform chain address",
                                "pattern": "^([P]|[a-km-zA-HJ-NP-Z1-9]{36,72})-[a-zA-Z]{1,83}1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{38}$",
                                "example": "P-fuji1g2g0jxcfn5sp59ld7g0t0tp4jrqppvqcfqc7hy"
                              },
                              "start_time": {
                                "description": "Avalanche staking start time",
                                "type": "integer",
                                "format": "int64",
                                "example": 1689939023
                              },
                              "end_time": {
                                "description": "Avalanche staking end time",
                                "type": "integer",
                                "format": "int64",
                                "example": 1689939023
                              }
                            }
                          },
                          "customer_id": {
                            "type": "string",
                            "description": "Unique identifier for a customer",
                            "example": "SatoshiNakamoto-xUYJbPw9hw",
                            "minimum": 1
                          },
                          "plan_id": {
                            "type": "string",
                            "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                            "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                          },
                          "created_at": {
                            "description": "Timestamp",
                            "type": "string",
                            "example": "2023-01-11 06:22:46.182"
                          },
                          "updated_at": {
                            "description": "Timestamp",
                            "type": "string",
                            "example": "2023-01-11 06:22:46.182"
                          }
                        }
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "description": "encapsulates pagination properties",
                      "required": [
                        "page",
                        "per_page",
                        "total"
                      ],
                      "properties": {
                        "page": {
                          "description": "current page number",
                          "type": "integer",
                          "format": "int64"
                        },
                        "per_page": {
                          "description": "number of results per page",
                          "type": "integer",
                          "format": "int64"
                        },
                        "total": {
                          "description": "total number of results",
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v1/ethereum/{network}/stake-intents": {
      "parameters": [
        {
          "name": "network",
          "in": "path",
          "description": "Ethereum network",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Ethereum network",
            "enum": [
              "mainnet",
              "holesky"
            ]
          }
        },
        {
          "in": "header",
          "name": "Idempotency-Key",
          "description": "the unique idempotency key for this request",
          "example": "f1c971b4-7114-4c4b-8ad2-a6f9e33e2cd0",
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "required": false
        }
      ],
      "post": {
        "summary": "Post Stake Intent",
        "operationId": "postEthereumStakeIntent",
        "tags": [
          "Ethereum"
        ],
        "description": "Reserves one or more available validators and returns an unsigned transaction.\n\nThe validators will remain reserved for 90 days or until the returned transaction is signed and confirmed in the network. Blockdaemon reserves the right to free any allocated resources if the transaction is not confirmed in time.\n\nA single transaction can create up to 250 validators through the use of the Blockdaemon [batch deposit contract](https://gitlab.com/Blockdaemon/open-source/eth2-batch-deposit-contract) which delivers over 50% reduction in gas fees when compared to submitting individual transactions for each deposit.\n\nTo complete the staking process, you must sign an Ethereum transaction with a [data field](https://ethereum.org/en/developers/docs/transactions/#the-data-field) set to match the returned `unsigned_transaction` property of the response. The `recipient` of the transaction must be set to the `contract_address` property of the response. The account signing the transaction must have the sufficient balance to create the requested number of validators and this amount must be provided as the value of the signed transaction.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Stake intent for the Ethereum protocol.",
                "required": [
                  "stakes"
                ],
                "properties": {
                  "stakes": {
                    "type": "array",
                    "description": "Stakes for the Ethereum protocol.",
                    "minItems": 1,
                    "maxItems": 250,
                    "additionalProperties": false,
                    "items": {
                      "type": "object",
                      "description": "Details of a individual Ethereum Stake request.",
                      "required": [
                        "amount",
                        "withdrawal_address"
                      ],
                      "properties": {
                        "amount": {
                          "type": "string",
                          "description": "Amount of ETH (denominated in Gwei).",
                          "pattern": "^[1-9]\\d{10,}$",
                          "example": "32000000000"
                        },
                        "withdrawal_address": {
                          "type": "string",
                          "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                          "format": "hex",
                          "pattern": "^0x[a-fA-F0-9]{40}$",
                          "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                        },
                        "quantity": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Number of validators to create that will share the same withdrawal credentials.",
                          "minimum": 1
                        },
                        "fee_recipient": {
                          "type": "string",
                          "description": "An Ethereum address to receive transaction fees from published blocks. 20-bytes, hex encoded with 0x prefix, case insensitive.",
                          "example": "0x93247f2209abcacf57b75a51dafae777f9dd38bc",
                          "pattern": "^0x[a-fA-F0-9]{40}$"
                        }
                      }
                    }
                  },
                  "plan_id": {
                    "type": "string",
                    "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                    "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "stake_intent_id",
                        "customer_id"
                      ],
                      "properties": {
                        "stake_intent_id": {
                          "type": "string",
                          "format": "base58",
                          "description": "Unique idenifier for a group of stakes.",
                          "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
                        },
                        "customer_id": {
                          "type": "string",
                          "description": "Unique identifier for a customer",
                          "example": "SatoshiNakamoto-xUYJbPw9hw",
                          "minimum": 1
                        },
                        "plan_id": {
                          "type": "string",
                          "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                          "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "protocol",
                        "network"
                      ],
                      "properties": {
                        "protocol": {
                          "type": "string",
                          "description": "Ethereum protocol",
                          "enum": [
                            "ethereum"
                          ]
                        },
                        "network": {
                          "type": "string",
                          "description": "Ethereum network",
                          "enum": [
                            "mainnet",
                            "holesky"
                          ]
                        },
                        "ethereum": {
                          "type": "object",
                          "description": "Ethereum Stake Intent response",
                          "required": [
                            "stakes",
                            "contract_address",
                            "unsigned_transaction",
                            "estimated_gas",
                            "expiration_time"
                          ],
                          "properties": {
                            "stakes": {
                              "description": "Stakes being made.",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "description": "Individual Ethereum Stake Response",
                                "required": [
                                  "stake_id",
                                  "amount",
                                  "validator_public_key",
                                  "withdrawal_credentials",
                                  "fee_recipient"
                                ],
                                "properties": {
                                  "stake_id": {
                                    "description": "Unique stake identifier.",
                                    "type": "string",
                                    "format": "base58",
                                    "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                                  },
                                  "amount": {
                                    "type": "string",
                                    "description": "Amount of ETH (denominated in Gwei).",
                                    "pattern": "^[1-9]\\d{10,}$",
                                    "example": "32000000000"
                                  },
                                  "validator_public_key": {
                                    "type": "string",
                                    "description": "A BLS public Key.",
                                    "format": "base64",
                                    "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                                  },
                                  "withdrawal_credentials": {
                                    "type": "string",
                                    "format": "hex",
                                    "pattern": "^0x0(0|1)[a-fA-F0-9]{62}$",
                                    "example": "0x0092c20062cee70389f1cb4fa566a2be5e2319ff43965db26dbaa3ce90b9df99",
                                    "description": "Hexadecimal encoded [withdrawal credentials](https://github.com/ethereum/consensus-specs/blob/master/specs/phase0/validator.md#withdrawal-credentials) which can be either a BLS public key or an Ethereum account address.\n\nThis parameter currently accepts ETH1 and BLS withdrawal credentials, but it is considered deprecated after the Capella/Shanghai fork. All users are now advised to use an ETH1 withdrawal address, specified through the `withdrawal_address` parameter as this is required to enable the ongoing accrual of rewards.\n\nFor more information regarding creating withdrawal credentials, please see the official [Ethereum Launchpad FAQ](https://launchpad.ethereum.org/en/faq#withdrawal-credentials)."
                                  },
                                  "fee_recipient": {
                                    "type": "string",
                                    "description": "An Ethereum address to receive transaction fees from published blocks. 20-bytes, hex encoded with 0x prefix, case insensitive.",
                                    "example": "0x93247f2209abcacf57b75a51dafae777f9dd38bc",
                                    "pattern": "^0x[a-fA-F0-9]{40}$"
                                  }
                                }
                              }
                            },
                            "contract_address": {
                              "type": "string",
                              "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                              "format": "hex",
                              "pattern": "^0x[a-fA-F0-9]{40}$",
                              "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                            },
                            "unsigned_transaction": {
                              "type": "string",
                              "format": "base64",
                              "description": "Generated unsigned transaction smart contract call data.",
                              "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                            },
                            "estimated_gas": {
                              "type": "integer",
                              "description": "Gas estimation of the transaction",
                              "format": "uint64",
                              "example": 1001
                            },
                            "expiration_time": {
                              "type": "integer",
                              "description": "Transaction expiration time",
                              "format": "int64",
                              "example": 1689939023
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Insufficient validators available to process Stake Intent request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/ethereum/{network}/voluntary-exit": {
      "post": {
        "summary": "Exit Ethereum Validator",
        "operationId": "exitEthereumValidator",
        "tags": [
          "Ethereum"
        ],
        "description": "Generates an Ethereum voluntary exit message and broadcasts it to the network.",
        "parameters": [
          {
            "name": "network",
            "in": "path",
            "description": "Ethereum network",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Ethereum network",
              "enum": [
                "mainnet",
                "holesky"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Data about validator to exit.",
                "required": [
                  "validator_identifier"
                ],
                "properties": {
                  "validator_identifier": {
                    "type": "object",
                    "description": "Information to identify validator. Only either validator index or validator public key is required.",
                    "properties": {
                      "validator_public_key": {
                        "type": "string",
                        "description": "Public Key of an asymmetric key-pair.",
                        "format": "hex",
                        "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                      },
                      "validator_index": {
                        "type": "string",
                        "description": "Validator index",
                        "example": "25"
                      }
                    },
                    "additionalProperties": false,
                    "minProperties": 1
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Transaction was generated and submitted for processing."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Validator not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Insufficient validators available to process Stake Intent request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ],
        "x-inbound-policy": [
          "apikey-check",
          "auth-policy",
          "ip-check",
          "boss-eth-exit-product-check",
          "rate-limit-inbound"
        ]
      }
    },
    "/v1/ethereum/{network}/voluntary-exits": {
      "post": {
        "summary": "Exit Ethereum Validators",
        "operationId": "exitEthereumValidators",
        "tags": [
          "Ethereum"
        ],
        "x-inbound-policy": [
          "apikey-check",
          "auth-policy",
          "ip-check",
          "boss-eth-exit-product-check",
          "rate-limit-inbound"
        ],
        "description": "Generates an Ethereum voluntary exit message and broadcasts it to the network.\nWith most error codes, a list of the correctly processed validators is returned. Use it to check which validators will be exited.",
        "parameters": [
          {
            "name": "network",
            "in": "path",
            "description": "Ethereum network",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Ethereum network",
              "enum": [
                "mainnet",
                "holesky"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Data about a list of validators (up to 500) to exit.",
                "required": [
                  "validator_identifiers"
                ],
                "properties": {
                  "validator_identifiers": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "Information to identify validator. Only either validator index or validator public key is required.",
                      "properties": {
                        "validator_public_key": {
                          "type": "string",
                          "description": "Public Key of an asymmetric key-pair.",
                          "format": "hex",
                          "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                        },
                        "validator_index": {
                          "type": "string",
                          "description": "Validator index",
                          "example": "25"
                        }
                      },
                      "additionalProperties": false,
                      "minProperties": 1
                    },
                    "maxItems": 500,
                    "description": "Contains a list of validators to exit."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A list of validators was exited correctly.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A list of validators was exited correctly.",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Correct execution",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "description": "Confirmation message",
                      "example": "Detailed human-readable diagnostic message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Validator not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Insufficient validators available to process Stake Intent request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v1/ethereum/{network}/signed-voluntary-exit": {
      "get": {
        "summary": "Generate a Signed Voluntary Exit Message",
        "operationId": "generateSignedVoluntaryExit",
        "tags": [
          "Ethereum"
        ],
        "description": "Generates a voluntary exit message, but does not broadcast it to the network. Instead, the signed message is returned as part of the response. You can use the Native Ubiquity API for Ethereum to broadcast the message.",
        "parameters": [
          {
            "name": "network",
            "in": "path",
            "description": "Ethereum network",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Ethereum network",
              "enum": [
                "mainnet",
                "holesky"
              ]
            }
          },
          {
            "name": "show_fork_version",
            "in": "query",
            "description": "When this parameter is set to `true`, the response will include the field `fork_version` indicating the fork version constant for the currently active fork.\n\nThe fork versions values are unique for each network and each fork. As an example, here is the constants preset file for Mainnet:\nhttps://github.com/ethereum/consensus-specs/blob/dev/configs/mainnet.yaml",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "validator_index",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "Validator index",
              "format": "uint64",
              "example": 25
            }
          },
          {
            "name": "validator_public_key",
            "in": "query",
            "description": "Validator public key",
            "schema": {
              "type": "string",
              "description": "Public Key of an asymmetric key-pair.",
              "format": "hex",
              "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
            }
          },
          {
            "name": "epoch",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "Earliest epoch when voluntary exit can be processed.\nIf not provided the earliest possible epoch will be fetched from the network.\n",
              "format": "uint64",
              "example": 1001
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ethereum exit validator transaction response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Ethereum exit validator transaction response",
                  "required": [
                    "message",
                    "signature",
                    "fork_version"
                  ],
                  "properties": {
                    "message": {
                      "type": "object",
                      "description": "Ethereum exit validator message",
                      "required": [
                        "validator_index",
                        "epoch"
                      ],
                      "properties": {
                        "validator_index": {
                          "type": "string",
                          "description": "Validator index",
                          "example": "25"
                        },
                        "epoch": {
                          "type": "string",
                          "description": "The numeric index of an [Ethereum epoch](https://ethereum.org/en/glossary/#epoch).",
                          "example": "1001"
                        }
                      }
                    },
                    "signature": {
                      "type": "string",
                      "format": "hex",
                      "description": "Ethereum signature",
                      "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187"
                    },
                    "fork_version": {
                      "type": "string",
                      "description": "A hex-encoded Ethereum fork version value.\n\nThe fork versions values are unique for each network and each fork. As an example, here is the constants preset file for Mainnet:\nhttps://github.com/ethereum/consensus-specs/blob/dev/configs/mainnet.yaml",
                      "example": "0x03000000"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "validator not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Insufficient validators available to process Stake Intent request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v1/eth2-launchpad-deposit": {
      "post": {
        "summary": "Generate an Ethereum Launchpad Deposit File",
        "operationId": "generateEthereumLaunchpadDeposit",
        "tags": [
          "Ethereum"
        ],
        "description": "Generates an Ethereum Launchpad deposit string for one or more validators. The resulting JSON file will allow you to execute the deposit manually on the official [Ethereum Deposit Launchpad](https://launchpad.ethereum.org/) web-site.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Request for generating an Ethereum Launchpad deposit string",
                "required": [
                  "validators"
                ],
                "properties": {
                  "validators": {
                    "description": "Validators public keys",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "A BLS public Key.",
                      "format": "base64",
                      "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Launchpad deposit string created.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An array of data that should be submitted to launchpad.ethereum.org to register the validators it describes.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "Data about a validator that can be registered at launchpad.ethereum.org",
                    "required": [
                      "pubkey",
                      "withdrawal_credentials",
                      "amount",
                      "signature",
                      "deposit_message_root",
                      "deposit_data_root",
                      "fork_version",
                      "network_name",
                      "deposit_cli_version"
                    ],
                    "properties": {
                      "pubkey": {
                        "type": "string",
                        "description": "Validator public key, 96 hex digits, no `0x` prefix"
                      },
                      "withdrawal_credentials": {
                        "type": "string",
                        "description": "Validator withdrawal credentials, 64 hex digits, no `0x` prefix"
                      },
                      "amount": {
                        "type": "integer",
                        "format": "uint64",
                        "description": "Amount of ether that this validator has staked"
                      },
                      "signature": {
                        "type": "string",
                        "description": "Signed validator domain root, hex digits, no `0x` prefix"
                      },
                      "deposit_message_root": {
                        "type": "string",
                        "description": "Merkle root for the deposit message, 32 hex digits, no `0x` prefix"
                      },
                      "deposit_data_root": {
                        "type": "string",
                        "description": "Merkle root for the deposit data, 32 hex digits, no `0x` prefix"
                      },
                      "fork_version": {
                        "type": "string",
                        "description": "Network fork version, 8 hex digits, no `0x` prefix"
                      },
                      "network_name": {
                        "type": "string",
                        "description": "Name for the deposit network (mainnet, holesky...), lowercase"
                      },
                      "deposit_cli_version": {
                        "type": "string",
                        "description": "String form of 3-number generator version, eg. `2.3.0`"
                      }
                    }
                  },
                  "format": "json"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "validator(s) stake(s) not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Insufficient validators available to process Stake Intent request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v1/ethereum/{network}/queue-progress/pending-queued": {
      "post": {
        "summary": "Estimate Ethereum validators progress in the pending-queued queue",
        "operationId": "PendingQueuedProgress",
        "tags": [
          "Ethereum"
        ],
        "description": "Retrieve Ethereum validator in the pending-queued queue",
        "parameters": [
          {
            "name": "network",
            "in": "path",
            "description": "Ethereum network",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Ethereum network",
              "enum": [
                "mainnet",
                "holesky"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "List of Ethereum validator ids.",
                "required": [
                  "public_keys"
                ],
                "properties": {
                  "public_keys": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "Public Key of an asymmetric key-pair.",
                      "format": "hex",
                      "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ethereum queue estimate response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "validators",
                    "last_updated"
                  ],
                  "properties": {
                    "last_updated": {
                      "type": "string",
                      "description": "Time validator state was recorded",
                      "example": "2024-04-15 08:23:00"
                    },
                    "validators": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Ethereum validator queue progress validator",
                        "required": [
                          "public_key",
                          "epochs_remaining"
                        ],
                        "properties": {
                          "public_key": {
                            "type": "string",
                            "description": "Public Key of an asymmetric key-pair.",
                            "format": "hex",
                            "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                          },
                          "epochs_remaining": {
                            "description": "the number of epochs remaining in the current queue",
                            "type": "integer",
                            "format": "int64",
                            "example": 280312
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v1/ethereum/{network}/queue-progress/active-exiting": {
      "post": {
        "summary": "Estimate Ethereum validators progress in the active-exiting queue",
        "operationId": "ActiveExitingQueueProgress",
        "tags": [
          "Ethereum"
        ],
        "description": "Retrieve Ethereum validator in the active-exiting queue",
        "parameters": [
          {
            "name": "network",
            "in": "path",
            "description": "Ethereum network",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Ethereum network",
              "enum": [
                "mainnet",
                "holesky"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "List of Ethereum validator ids.",
                "required": [
                  "public_keys"
                ],
                "properties": {
                  "public_keys": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "Public Key of an asymmetric key-pair.",
                      "format": "hex",
                      "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ethereum queue estimate response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "validators",
                    "last_updated"
                  ],
                  "properties": {
                    "last_updated": {
                      "type": "string",
                      "description": "Time validator state was recorded",
                      "example": "2024-04-15 08:23:00"
                    },
                    "validators": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Ethereum validator queue progress validator",
                        "required": [
                          "public_key",
                          "epochs_remaining"
                        ],
                        "properties": {
                          "public_key": {
                            "type": "string",
                            "description": "Public Key of an asymmetric key-pair.",
                            "format": "hex",
                            "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                          },
                          "epochs_remaining": {
                            "description": "the number of epochs remaining in the current queue",
                            "type": "integer",
                            "format": "int64",
                            "example": 280312
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v1/solana/{network}/stake-intents": {
      "parameters": [
        {
          "name": "network",
          "in": "path",
          "description": "Solana network",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Solana network",
            "enum": [
              "mainnet",
              "testnet"
            ]
          }
        },
        {
          "in": "header",
          "name": "Idempotency-Key",
          "description": "the unique idempotency key for this request",
          "example": "f1c971b4-7114-4c4b-8ad2-a6f9e33e2cd0",
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "required": false
        }
      ],
      "post": {
        "summary": "Post Stake Intent",
        "operationId": "postSolanaStakeIntent",
        "tags": [
          "Solana"
        ],
        "description": "Returns an unsigned transaction that can be used to delegate your tokens to the validator specified in the request.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Individual solana stake",
                "required": [
                  "amount",
                  "delegator_address"
                ],
                "properties": {
                  "amount": {
                    "type": "string",
                    "description": "The amount of funds you want to stake (in Lamports)",
                    "pattern": "^[1-9]\\d+$",
                    "example": "100"
                  },
                  "validator_address": {
                    "type": "string",
                    "description": "The public address of the validator node that you intend to delegate your tokens to",
                    "format": "base58",
                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                  },
                  "delegator_address": {
                    "type": "string",
                    "description": "The address sending the funds to be staked",
                    "format": "base58",
                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                  },
                  "staking_authority": {
                    "type": "string",
                    "description": "The stake authority can be considered the manager of the stake account. It is used to sign transactions for the following operations but doesn’t have control over the funds:\n* Delegating stake\n* Deactivating the stake delegation\n* Splitting the stake account (creating a new stake account with a portion of the funds)\n* Merging two stake accounts into one\n* Setting a new stake authority\n* **Note:** When not specified, this will default to the delegator_address",
                    "format": "base58",
                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                  },
                  "withdrawal_authority": {
                    "type": "string",
                    "description": "The withdraw authority is used to sign transactions for the following operations:\n* Withdrawing an un-delegated stake into a wallet address\n* Setting a new withdrawal authority\n* Setting a new stake authority (thus, the withdrawal authority is the ultimate owner of the account)\n* **Note:** When not specified, this will default to the delegator_address",
                    "format": "base58",
                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                  },
                  "plan_id": {
                    "type": "string",
                    "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                    "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "stake_intent_id",
                        "customer_id"
                      ],
                      "properties": {
                        "stake_intent_id": {
                          "type": "string",
                          "format": "base58",
                          "description": "Unique idenifier for a group of stakes.",
                          "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
                        },
                        "customer_id": {
                          "type": "string",
                          "description": "Unique identifier for a customer",
                          "example": "SatoshiNakamoto-xUYJbPw9hw",
                          "minimum": 1
                        },
                        "plan_id": {
                          "type": "string",
                          "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                          "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "protocol",
                        "network"
                      ],
                      "properties": {
                        "protocol": {
                          "type": "string",
                          "description": "Solana protocol",
                          "enum": [
                            "solana"
                          ]
                        },
                        "network": {
                          "type": "string",
                          "description": "Solana network",
                          "enum": [
                            "mainnet",
                            "testnet"
                          ]
                        },
                        "solana": {
                          "type": "object",
                          "description": "Solana Stake Intent response",
                          "required": [
                            "stake_id",
                            "amount",
                            "validator_public_key",
                            "withdrawal_authority",
                            "staking_authority",
                            "stake_account_public_key",
                            "unsigned_transaction",
                            "expiration_time"
                          ],
                          "properties": {
                            "stake_id": {
                              "description": "Unique stake identifier.",
                              "type": "string",
                              "format": "base58",
                              "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                            },
                            "amount": {
                              "type": "string",
                              "description": "Denomination of the cryptocurrency Solana.",
                              "pattern": "^[1-9]\\d+$",
                              "example": "100"
                            },
                            "validator_public_key": {
                              "type": "string",
                              "description": "A BLS public Key.",
                              "format": "base64",
                              "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                            },
                            "staking_authority": {
                              "type": "string",
                              "description": "Public Key of an asymmetric key-pair.",
                              "format": "base58",
                              "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                              "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                            },
                            "withdrawal_authority": {
                              "type": "string",
                              "description": "A BLS public Key.",
                              "format": "base64",
                              "example": "0xa1d1ad0714035353258038e964ae9675dc0252ee22cea896825c01458e1807bfad2f9969338798548d9858a571f7425c"
                            },
                            "stake_account_public_key": {
                              "type": "string",
                              "description": "Public Key of an asymmetric key-pair.",
                              "format": "base58",
                              "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                              "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                            },
                            "unsigned_transaction": {
                              "type": "string",
                              "format": "base64",
                              "description": "Generated unsigned transaction smart contract call data.",
                              "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                            },
                            "expiration_time": {
                              "type": "integer",
                              "description": "Transaction expiration time",
                              "format": "int64",
                              "example": 1689939023
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Insufficient validators available to process Stake Intent request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/solana/{network}/deactivation-intents": {
      "parameters": [
        {
          "name": "network",
          "in": "path",
          "description": "Solana network",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Solana network",
            "enum": [
              "mainnet",
              "testnet"
            ]
          }
        }
      ],
      "post": {
        "summary": "Post Deactivation Intent",
        "operationId": "postSolanaDeactivationIntent",
        "tags": [
          "Solana"
        ],
        "description": "This endpoint is used to request deactivation transactions that will be executed against available addresses. The API will automatically select which stake addresses need to be deactivated in order to satisfy the request.\n\nThis operation may split some of the stakes in order to ensure that the exact amount will be deactivated. If there are not enough available funds, the API will produce an error response.\n\nThe API returns two sets of transactions – splitting transactions and deactivation transactions. You must sign and broadcast the splitting transactions before the deactivation transactions.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Request object to create a new deactivation intent for Solana.",
                "required": [
                  "amount"
                ],
                "properties": {
                  "amount": {
                    "type": "string",
                    "description": "The amount of funds you want to deactivate (in Lamports).",
                    "pattern": "^[1-9]\\d+$",
                    "example": "100"
                  },
                  "delegator_address": {
                    "type": "string",
                    "description": "Public Key of an asymmetric key-pair.",
                    "format": "base58",
                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                  },
                  "staking_authority": {
                    "type": "string",
                    "description": "Public Key of an asymmetric key-pair.",
                    "format": "base58",
                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                  },
                  "withdrawal_authority": {
                    "type": "string",
                    "description": "Public Key of an asymmetric key-pair.",
                    "format": "base58",
                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "deactivate_intent_id",
                        "customer_id"
                      ],
                      "properties": {
                        "deactivate_intent_id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "Unique idenifier for deactivate intent.",
                          "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                        },
                        "customer_id": {
                          "type": "string",
                          "description": "Unique identifier for a customer",
                          "example": "SatoshiNakamoto-xUYJbPw9hw",
                          "minimum": 1
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Response to a new deactivation intent request.",
                      "required": [
                        "network",
                        "protocol",
                        "solana"
                      ],
                      "properties": {
                        "protocol": {
                          "type": "string",
                          "description": "Solana protocol",
                          "enum": [
                            "solana"
                          ]
                        },
                        "network": {
                          "type": "string",
                          "description": "Solana network",
                          "enum": [
                            "mainnet",
                            "testnet"
                          ]
                        },
                        "solana": {
                          "type": "object",
                          "description": "Result of the new Deactivate Intent request.",
                          "required": [
                            "total_deactivated_amount",
                            "deactivates",
                            "splits"
                          ],
                          "properties": {
                            "deactivates": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "description": "Result of the deactivation transaction request",
                                "required": [
                                  "unsigned_transaction",
                                  "stake_account_authority",
                                  "stake_account_address",
                                  "withdrawal_authority",
                                  "stake_id",
                                  "amount",
                                  "expiration_time"
                                ],
                                "properties": {
                                  "unsigned_transaction": {
                                    "type": "string",
                                    "format": "base64",
                                    "description": "Generated unsigned transaction smart contract call data.",
                                    "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                                  },
                                  "stake_account_authority": {
                                    "type": "string",
                                    "description": "Public Key of an asymmetric key-pair.",
                                    "format": "base58",
                                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                  },
                                  "stake_account_address": {
                                    "type": "string",
                                    "description": "Public Key of an asymmetric key-pair.",
                                    "format": "base58",
                                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                  },
                                  "withdrawal_authority": {
                                    "type": "string",
                                    "description": "Public Key of an asymmetric key-pair.",
                                    "format": "base58",
                                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                  },
                                  "stake_id": {
                                    "description": "Unique stake identifier.",
                                    "type": "string",
                                    "format": "base58",
                                    "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                                  },
                                  "amount": {
                                    "type": "string",
                                    "description": "Denomination of the cryptocurrency Solana.",
                                    "pattern": "^[1-9]\\d+$",
                                    "example": "100"
                                  },
                                  "expiration_time": {
                                    "type": "integer",
                                    "description": "Transaction expiration time",
                                    "format": "int64",
                                    "example": 1689939023
                                  }
                                }
                              }
                            },
                            "splits": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "description": "Result of the split transaction request",
                                "required": [
                                  "unsigned_transaction",
                                  "stake_account_authority",
                                  "new_stake_account_address",
                                  "new_stake_id",
                                  "splitted_stake_account_address",
                                  "splitted_stake_id",
                                  "amount"
                                ],
                                "properties": {
                                  "unsigned_transaction": {
                                    "type": "string",
                                    "format": "base64",
                                    "description": "Generated unsigned transaction smart contract call data.",
                                    "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                                  },
                                  "stake_account_authority": {
                                    "type": "string",
                                    "description": "Public Key of an asymmetric key-pair.",
                                    "format": "base58",
                                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                  },
                                  "new_stake_account_address": {
                                    "type": "string",
                                    "description": "Public Key of an asymmetric key-pair.",
                                    "format": "base58",
                                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                  },
                                  "new_stake_id": {
                                    "description": "Unique stake identifier.",
                                    "type": "string",
                                    "format": "base58",
                                    "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                                  },
                                  "splitted_stake_account_address": {
                                    "type": "string",
                                    "description": "Public Key of an asymmetric key-pair.",
                                    "format": "base58",
                                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                  },
                                  "splitted_stake_id": {
                                    "description": "Unique stake identifier.",
                                    "type": "string",
                                    "format": "base58",
                                    "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                                  },
                                  "amount": {
                                    "type": "string",
                                    "description": "Denomination of the cryptocurrency Solana.",
                                    "pattern": "^[1-9]\\d+$",
                                    "example": "100"
                                  }
                                }
                              }
                            },
                            "total_deactivated_amount": {
                              "type": "string",
                              "description": "Denomination of the cryptocurrency Solana.",
                              "pattern": "^[1-9]\\d+$",
                              "example": "100"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "get": {
        "parameters": [
          {
            "name": "wallet_address",
            "in": "query",
            "required": false,
            "description": "User wallet address.",
            "schema": {
              "type": "string",
              "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
              "format": "hex",
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
            }
          }
        ],
        "summary": "List Deactivation Intents",
        "operationId": "getSolanaDeactivationIntents",
        "tags": [
          "Solana"
        ],
        "description": "Retrieve a list of all outstanding deactivation intents.",
        "responses": {
          "200": {
            "description": "Deactivation intents listed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Deactivation intents",
                  "required": [
                    "protocol",
                    "network",
                    "customer_id"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Solana protocol",
                      "enum": [
                        "solana"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "Solana network",
                      "enum": [
                        "mainnet",
                        "testnet"
                      ]
                    },
                    "solana": {
                      "description": "List of deactivation intents",
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "deactivate_intent_id",
                              "customer_id"
                            ],
                            "properties": {
                              "deactivate_intent_id": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Unique idenifier for deactivate intent.",
                                "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                              },
                              "customer_id": {
                                "type": "string",
                                "description": "Unique identifier for a customer",
                                "example": "SatoshiNakamoto-xUYJbPw9hw",
                                "minimum": 1
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Response to a new deactivation intent request.",
                            "required": [
                              "network",
                              "protocol",
                              "solana"
                            ],
                            "properties": {
                              "protocol": {
                                "type": "string",
                                "description": "Solana protocol",
                                "enum": [
                                  "solana"
                                ]
                              },
                              "network": {
                                "type": "string",
                                "description": "Solana network",
                                "enum": [
                                  "mainnet",
                                  "testnet"
                                ]
                              },
                              "solana": {
                                "type": "object",
                                "description": "Result of the new Deactivate Intent request.",
                                "required": [
                                  "total_deactivated_amount",
                                  "deactivates",
                                  "splits"
                                ],
                                "properties": {
                                  "deactivates": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "description": "Result of the deactivation transaction request",
                                      "required": [
                                        "unsigned_transaction",
                                        "stake_account_authority",
                                        "stake_account_address",
                                        "withdrawal_authority",
                                        "stake_id",
                                        "amount",
                                        "expiration_time"
                                      ],
                                      "properties": {
                                        "unsigned_transaction": {
                                          "type": "string",
                                          "format": "base64",
                                          "description": "Generated unsigned transaction smart contract call data.",
                                          "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                                        },
                                        "stake_account_authority": {
                                          "type": "string",
                                          "description": "Public Key of an asymmetric key-pair.",
                                          "format": "base58",
                                          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                        },
                                        "stake_account_address": {
                                          "type": "string",
                                          "description": "Public Key of an asymmetric key-pair.",
                                          "format": "base58",
                                          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                        },
                                        "withdrawal_authority": {
                                          "type": "string",
                                          "description": "Public Key of an asymmetric key-pair.",
                                          "format": "base58",
                                          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                        },
                                        "stake_id": {
                                          "description": "Unique stake identifier.",
                                          "type": "string",
                                          "format": "base58",
                                          "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                                        },
                                        "amount": {
                                          "type": "string",
                                          "description": "Denomination of the cryptocurrency Solana.",
                                          "pattern": "^[1-9]\\d+$",
                                          "example": "100"
                                        },
                                        "expiration_time": {
                                          "type": "integer",
                                          "description": "Transaction expiration time",
                                          "format": "int64",
                                          "example": 1689939023
                                        }
                                      }
                                    }
                                  },
                                  "splits": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "description": "Result of the split transaction request",
                                      "required": [
                                        "unsigned_transaction",
                                        "stake_account_authority",
                                        "new_stake_account_address",
                                        "new_stake_id",
                                        "splitted_stake_account_address",
                                        "splitted_stake_id",
                                        "amount"
                                      ],
                                      "properties": {
                                        "unsigned_transaction": {
                                          "type": "string",
                                          "format": "base64",
                                          "description": "Generated unsigned transaction smart contract call data.",
                                          "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                                        },
                                        "stake_account_authority": {
                                          "type": "string",
                                          "description": "Public Key of an asymmetric key-pair.",
                                          "format": "base58",
                                          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                        },
                                        "new_stake_account_address": {
                                          "type": "string",
                                          "description": "Public Key of an asymmetric key-pair.",
                                          "format": "base58",
                                          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                        },
                                        "new_stake_id": {
                                          "description": "Unique stake identifier.",
                                          "type": "string",
                                          "format": "base58",
                                          "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                                        },
                                        "splitted_stake_account_address": {
                                          "type": "string",
                                          "description": "Public Key of an asymmetric key-pair.",
                                          "format": "base58",
                                          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                        },
                                        "splitted_stake_id": {
                                          "description": "Unique stake identifier.",
                                          "type": "string",
                                          "format": "base58",
                                          "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                                        },
                                        "amount": {
                                          "type": "string",
                                          "description": "Denomination of the cryptocurrency Solana.",
                                          "pattern": "^[1-9]\\d+$",
                                          "example": "100"
                                        }
                                      }
                                    }
                                  },
                                  "total_deactivated_amount": {
                                    "type": "string",
                                    "description": "Denomination of the cryptocurrency Solana.",
                                    "pattern": "^[1-9]\\d+$",
                                    "example": "100"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "Unique identifier for a customer",
                      "example": "SatoshiNakamoto-xUYJbPw9hw",
                      "minimum": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "put": {
        "summary": "Cancel Deactivation Intent",
        "operationId": "cancelSolanaDeactivationIntent",
        "tags": [
          "Solana"
        ],
        "description": "Cancels a previously issued deactivation intent by specifying its ID.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Intent id.",
                "required": [
                  "intent_id"
                ],
                "properties": {
                  "intent_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique idenifier for deactivate intent.",
                    "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cancellation Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Success Response",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Status Code",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "description": "Confirmation Message",
                      "example": "Canceled"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/solana/{network}/deactivatable-amount": {
      "parameters": [
        {
          "name": "network",
          "in": "path",
          "description": "Solana network",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Solana network",
            "enum": [
              "mainnet",
              "testnet"
            ]
          }
        },
        {
          "name": "delegator_address",
          "in": "query",
          "required": false,
          "description": "A filter on the delegator address",
          "schema": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          }
        },
        {
          "name": "withdrawal_authority",
          "in": "query",
          "required": false,
          "description": "A filter on the withdrawal authority address",
          "schema": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          }
        },
        {
          "name": "staking_authority",
          "in": "query",
          "required": false,
          "description": "A filter on the staking authority address",
          "schema": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          }
        }
      ],
      "get": {
        "summary": "Get Deactivatable Amount",
        "operationId": "getSolanaDeactivatableAmount",
        "tags": [
          "Solana"
        ],
        "description": "Returns the total staked amount that can be deactivated across all wallets of the user.\n\nYou can specify the optional `wallets` parameter to get the total deactivatable amount in specific wallets.",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "The deactivatable amount",
                  "required": [
                    "protocol",
                    "network",
                    "amount",
                    "currency"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Solana protocol",
                      "enum": [
                        "solana"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "Solana network",
                      "enum": [
                        "mainnet",
                        "testnet"
                      ]
                    },
                    "currency": {
                      "type": "string",
                      "description": "Denomination of the cryptocurrency Solana.",
                      "pattern": "^[1-9]\\d+$",
                      "example": "100"
                    },
                    "amount": {
                      "type": "string",
                      "pattern": "^[1-9]\\d+$",
                      "example": "123456"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/solana/{network}/withdrawal-intents": {
      "parameters": [
        {
          "name": "network",
          "in": "path",
          "description": "Solana network",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Solana network",
            "enum": [
              "mainnet",
              "testnet"
            ]
          }
        }
      ],
      "post": {
        "summary": "Post Withdrawal Intent",
        "operationId": "postSolanaWithdrawalIntent",
        "tags": [
          "Solana"
        ],
        "description": "This endpoint is used to request withdrawal transactions that will be executed against available deactivated accounts. If you request more funds than are currently unlocked, the API will return an error indicating the maximum possible withdrawal.\n\nYou will receive at least one unsigned transaction (potentially multiple) that needs to be signed in order to complete the withdrawal.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Request object to create a new withdrawal intent for Solana.",
                "required": [
                  "amount",
                  "withdrawal_address"
                ],
                "properties": {
                  "amount": {
                    "type": "string",
                    "description": "The amount of funds you want to withdraw (in Lamports). If the value is 0 or unspecified it will be set to current balance.",
                    "pattern": "^[1-9]\\d+$",
                    "example": "100"
                  },
                  "withdrawal_address": {
                    "type": "string",
                    "description": "The receiving address – i.e. where the withdrawn funds should go.",
                    "format": "base58",
                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                  },
                  "delegator_address": {
                    "type": "string",
                    "description": "Public Key of an asymmetric key-pair.",
                    "format": "base58",
                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                  },
                  "withdrawal_authority": {
                    "type": "string",
                    "description": "Public Key of an asymmetric key-pair.",
                    "format": "base58",
                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "withdraw_intent_id",
                        "customer_id"
                      ],
                      "properties": {
                        "withdraw_intent_id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "Unique idenifier for a withdrawal intent.",
                          "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                        },
                        "customer_id": {
                          "type": "string",
                          "description": "Unique identifier for a customer",
                          "example": "SatoshiNakamoto-xUYJbPw9hw",
                          "minimum": 1
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Result of a new withdrawal intent request.",
                      "required": [
                        "protocol",
                        "network",
                        "solana"
                      ],
                      "properties": {
                        "protocol": {
                          "type": "string",
                          "description": "Solana protocol",
                          "enum": [
                            "solana"
                          ]
                        },
                        "network": {
                          "type": "string",
                          "description": "Solana network",
                          "enum": [
                            "mainnet",
                            "testnet"
                          ]
                        },
                        "solana": {
                          "type": "object",
                          "required": [
                            "withdraws",
                            "total_withdraw_amount"
                          ],
                          "properties": {
                            "withdraws": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "description": "Result of the withdraw transaction request",
                                "required": [
                                  "unsigned_transaction",
                                  "withdrawal_authority_public_key",
                                  "stake_account_address",
                                  "amount",
                                  "stake_id",
                                  "expiration_time"
                                ],
                                "properties": {
                                  "unsigned_transaction": {
                                    "type": "string",
                                    "format": "base64",
                                    "description": "Generated unsigned transaction smart contract call data.",
                                    "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                                  },
                                  "withdrawal_authority_public_key": {
                                    "type": "string",
                                    "description": "Public Key of an asymmetric key-pair.",
                                    "format": "base58",
                                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                  },
                                  "stake_account_address": {
                                    "type": "string",
                                    "description": "Public Key of an asymmetric key-pair.",
                                    "format": "base58",
                                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                  },
                                  "stake_id": {
                                    "description": "Unique stake identifier.",
                                    "type": "string",
                                    "format": "base58",
                                    "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                                  },
                                  "amount": {
                                    "type": "string",
                                    "description": "Denomination of the cryptocurrency Solana.",
                                    "pattern": "^[1-9]\\d+$",
                                    "example": "100"
                                  },
                                  "expiration_time": {
                                    "type": "integer",
                                    "description": "Transaction expiration time",
                                    "format": "int64",
                                    "example": 1689939023
                                  }
                                }
                              }
                            },
                            "total_withdraw_amount": {
                              "type": "string",
                              "description": "Denomination of the cryptocurrency Solana.",
                              "pattern": "^[1-9]\\d+$",
                              "example": "100"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "get": {
        "summary": "List Withdrawal Intents",
        "operationId": "getSolanaWithdrawalIntents",
        "tags": [
          "Solana"
        ],
        "description": "Retrieve a list of all outstanding withdrawal intents",
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Withdrawal intents",
                  "required": [
                    "protocol",
                    "network",
                    "customer_id"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Solana protocol",
                      "enum": [
                        "solana"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "Solana network",
                      "enum": [
                        "mainnet",
                        "testnet"
                      ]
                    },
                    "solana": {
                      "type": "array",
                      "description": "List of withdrawal intents",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "withdraw_intent_id",
                              "customer_id"
                            ],
                            "properties": {
                              "withdraw_intent_id": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Unique idenifier for a withdrawal intent.",
                                "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                              },
                              "customer_id": {
                                "type": "string",
                                "description": "Unique identifier for a customer",
                                "example": "SatoshiNakamoto-xUYJbPw9hw",
                                "minimum": 1
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Result of a new withdrawal intent request.",
                            "required": [
                              "protocol",
                              "network",
                              "solana"
                            ],
                            "properties": {
                              "protocol": {
                                "type": "string",
                                "description": "Solana protocol",
                                "enum": [
                                  "solana"
                                ]
                              },
                              "network": {
                                "type": "string",
                                "description": "Solana network",
                                "enum": [
                                  "mainnet",
                                  "testnet"
                                ]
                              },
                              "solana": {
                                "type": "object",
                                "required": [
                                  "withdraws",
                                  "total_withdraw_amount"
                                ],
                                "properties": {
                                  "withdraws": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "description": "Result of the withdraw transaction request",
                                      "required": [
                                        "unsigned_transaction",
                                        "withdrawal_authority_public_key",
                                        "stake_account_address",
                                        "amount",
                                        "stake_id",
                                        "expiration_time"
                                      ],
                                      "properties": {
                                        "unsigned_transaction": {
                                          "type": "string",
                                          "format": "base64",
                                          "description": "Generated unsigned transaction smart contract call data.",
                                          "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                                        },
                                        "withdrawal_authority_public_key": {
                                          "type": "string",
                                          "description": "Public Key of an asymmetric key-pair.",
                                          "format": "base58",
                                          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                        },
                                        "stake_account_address": {
                                          "type": "string",
                                          "description": "Public Key of an asymmetric key-pair.",
                                          "format": "base58",
                                          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                        },
                                        "stake_id": {
                                          "description": "Unique stake identifier.",
                                          "type": "string",
                                          "format": "base58",
                                          "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                                        },
                                        "amount": {
                                          "type": "string",
                                          "description": "Denomination of the cryptocurrency Solana.",
                                          "pattern": "^[1-9]\\d+$",
                                          "example": "100"
                                        },
                                        "expiration_time": {
                                          "type": "integer",
                                          "description": "Transaction expiration time",
                                          "format": "int64",
                                          "example": 1689939023
                                        }
                                      }
                                    }
                                  },
                                  "total_withdraw_amount": {
                                    "type": "string",
                                    "description": "Denomination of the cryptocurrency Solana.",
                                    "pattern": "^[1-9]\\d+$",
                                    "example": "100"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "Unique identifier for a customer",
                      "example": "SatoshiNakamoto-xUYJbPw9hw",
                      "minimum": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "put": {
        "summary": "Cancel Withdrawal Intent",
        "operationId": "cancelSolanaWithdrawalIntent",
        "tags": [
          "Solana"
        ],
        "description": "Cancels a previously issued withdrawal intent by specifying its ID.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Intent id.",
                "required": [
                  "intent_id"
                ],
                "properties": {
                  "intent_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique idenifier for deactivate intent.",
                    "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cancellation Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Success Response",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Status Code",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "description": "Confirmation Message",
                      "example": "Canceled"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/solana/{network}/withdrawable-amount": {
      "parameters": [
        {
          "name": "network",
          "in": "path",
          "description": "Solana network",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Solana network",
            "enum": [
              "mainnet",
              "testnet"
            ]
          }
        },
        {
          "name": "delegator_address",
          "in": "query",
          "required": false,
          "description": "A filter on the delegator address",
          "schema": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          }
        },
        {
          "name": "withdrawal_authority",
          "in": "query",
          "required": false,
          "description": "A filter on the withdrawal authority address",
          "schema": {
            "type": "string",
            "description": "Public Key of an asymmetric key-pair.",
            "format": "base58",
            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
          }
        }
      ],
      "get": {
        "summary": "Get Withdrawable Amount",
        "operationId": "getSolanaWithdrawableAmount",
        "tags": [
          "Solana"
        ],
        "description": "Returns total amount that can be withdrawn across all wallets of the user.\n\nYou can specify the optional `wallets` parameter to get the total withdrawable amount in specific wallets.",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Result of the get withdrawable amount",
                  "required": [
                    "protocol",
                    "network",
                    "amount",
                    "currency"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Solana protocol",
                      "enum": [
                        "solana"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "Solana network",
                      "enum": [
                        "mainnet",
                        "testnet"
                      ]
                    },
                    "currency": {
                      "type": "string",
                      "description": "Denomination of the cryptocurrency Solana.",
                      "pattern": "^[1-9]\\d+$",
                      "example": "100"
                    },
                    "amount": {
                      "type": "string",
                      "pattern": "^[1-9]\\d+$",
                      "example": "123456"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/solana/{network}/stake-accounts": {
      "parameters": [
        {
          "name": "network",
          "in": "path",
          "description": "Solana network",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Solana network",
            "enum": [
              "mainnet",
              "testnet"
            ]
          }
        },
        {
          "in": "query",
          "name": "page",
          "required": false,
          "schema": {
            "type": "integer",
            "format": "int64",
            "minimum": 1,
            "default": 1
          },
          "description": "The result set page to view"
        },
        {
          "in": "query",
          "name": "per_page",
          "required": false,
          "schema": {
            "type": "integer",
            "format": "int64",
            "minimum": 1,
            "maximum": 50,
            "default": 50
          },
          "description": "The number of items to include on a single page"
        }
      ],
      "get": {
        "summary": "Get Stake Accounts",
        "operationId": "getStakeAccountsSolana",
        "tags": [
          "Solana"
        ],
        "description": "Retrieve all of the stake accounts.",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "stake_accounts",
                    "pagination"
                  ],
                  "properties": {
                    "stake_accounts": {
                      "type": "array",
                      "description": "List of stake accounts",
                      "items": {
                        "type": "object",
                        "description": "Stake account",
                        "required": [
                          "status",
                          "amount",
                          "stake_account_address",
                          "stake_account_authority",
                          "withdrawal_authority",
                          "delegator_address",
                          "vote_account",
                          "network"
                        ],
                        "properties": {
                          "status": {
                            "type": "string",
                            "description": "Solana stake account internal status based on the transaction intents that have been created against the stake accounts.",
                            "enum": [
                              "pending",
                              "active",
                              "activating",
                              "deactivated",
                              "deactivating",
                              "withdrawing",
                              "withdrawn"
                            ]
                          },
                          "amount": {
                            "type": "string",
                            "description": "Denomination of the cryptocurrency Solana.",
                            "pattern": "^[1-9]\\d+$",
                            "example": "100"
                          },
                          "stake_account_address": {
                            "type": "string",
                            "description": "Public Key of an asymmetric key-pair.",
                            "format": "base58",
                            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                          },
                          "stake_account_authority": {
                            "type": "string",
                            "description": "Public Key of an asymmetric key-pair.",
                            "format": "base58",
                            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                          },
                          "withdrawal_authority": {
                            "type": "string",
                            "description": "Public Key of an asymmetric key-pair.",
                            "format": "base58",
                            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                          },
                          "delegator_address": {
                            "type": "string",
                            "description": "Public Key of an asymmetric key-pair.",
                            "format": "base58",
                            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                          },
                          "vote_account": {
                            "type": "string",
                            "description": "Public Key of an asymmetric key-pair.",
                            "format": "base58",
                            "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                            "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                          },
                          "network": {
                            "type": "string",
                            "description": "Solana network",
                            "enum": [
                              "mainnet",
                              "testnet"
                            ]
                          }
                        }
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "description": "encapsulates pagination properties",
                      "required": [
                        "page",
                        "per_page",
                        "total"
                      ],
                      "properties": {
                        "page": {
                          "description": "current page number",
                          "type": "integer",
                          "format": "int64"
                        },
                        "per_page": {
                          "description": "number of results per page",
                          "type": "integer",
                          "format": "int64"
                        },
                        "total": {
                          "description": "total number of results",
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/polygon/{network}/bootstrapping-intents": {
      "parameters": [
        {
          "name": "network",
          "in": "path",
          "description": "Polygon network",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Polygon network",
            "enum": [
              "mainnet",
              "goerli",
              "prater"
            ]
          }
        }
      ],
      "post": {
        "summary": "Post Bootstrapping Intent",
        "operationId": "postPolygonBootstrappingIntent",
        "tags": [
          "Polygon"
        ],
        "description": "Creates a new account bootstrapping intent transaction.\n\nReturns an unsigned transaction that sets up the user’s wallet for delegation. It is required to sign and send this transaction only once, the very first time the user is going to delegate. If this step is not completed, any subsequent delegation transactions will fail.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Request object to create a new Bootstrapping Intent for Polygon.",
                "required": [
                  "wallet_address"
                ],
                "properties": {
                  "wallet_address": {
                    "type": "string",
                    "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                    "format": "hex",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bootstrapping intent created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "protocol",
                    "network",
                    "customer_id"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Blockchain protocol.",
                      "enum": [
                        "ethereum",
                        "polkadot",
                        "solana",
                        "cosmos",
                        "polygon",
                        "near",
                        "cardano",
                        "avalanche",
                        "binance"
                      ],
                      "example": "polygon"
                    },
                    "network": {
                      "type": "string",
                      "description": "Protocol-specific network.",
                      "enum": [
                        "mainnet",
                        "localnet",
                        "goerli",
                        "prater",
                        "holesky",
                        "testnet",
                        "devnet",
                        "kusama",
                        "westend",
                        "preprod",
                        "fuji",
                        "local"
                      ]
                    },
                    "polygon": {
                      "type": "object",
                      "description": "Polygon Bootstrapping Intent",
                      "required": [
                        "to",
                        "unsigned_transaction",
                        "wallet_address"
                      ],
                      "properties": {
                        "to": {
                          "type": "string",
                          "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                          "format": "hex",
                          "pattern": "^0x[a-fA-F0-9]{40}$",
                          "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                        },
                        "unsigned_transaction": {
                          "type": "string",
                          "format": "base64",
                          "description": "Generated unsigned transaction smart contract call data.",
                          "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                        },
                        "wallet_address": {
                          "type": "string",
                          "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                          "format": "hex",
                          "pattern": "^0x[a-fA-F0-9]{40}$",
                          "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                        }
                      }
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "Unique identifier for a customer",
                      "example": "SatoshiNakamoto-xUYJbPw9hw",
                      "minimum": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/polygon/{network}/stake-intents": {
      "parameters": [
        {
          "name": "network",
          "in": "path",
          "description": "Polygon network",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Polygon network",
            "enum": [
              "mainnet",
              "goerli",
              "prater"
            ]
          }
        },
        {
          "in": "header",
          "name": "Idempotency-Key",
          "description": "the unique idempotency key for this request",
          "example": "f1c971b4-7114-4c4b-8ad2-a6f9e33e2cd0",
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "required": false
        }
      ],
      "post": {
        "summary": "Post Stake Intent",
        "operationId": "postPolygonStakeIntent",
        "tags": [
          "Polygon"
        ],
        "description": "Returns an unsigned transaction for delegation. Before using this endpoint, the user must sign and submit the unsigned transaction returned by [Post Bootstrapping Intent](https://docs.blockdaemon.com/reference/postpolygonbootstrappingintent).",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Request object to create a new Stake Intent for Polygon",
                "required": [
                  "amount",
                  "wallet_address"
                ],
                "properties": {
                  "amount": {
                    "type": "string",
                    "description": "The amount of MATIC (in Wei) you want to stake.",
                    "pattern": "^[1-9]\\d+$",
                    "example": "100"
                  },
                  "wallet_address": {
                    "type": "string",
                    "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                    "format": "hex",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                  },
                  "validator_share_address": {
                    "type": "string",
                    "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                    "format": "hex",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                  },
                  "plan_id": {
                    "type": "string",
                    "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                    "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "stake_intent_id",
                        "customer_id"
                      ],
                      "properties": {
                        "stake_intent_id": {
                          "type": "string",
                          "format": "base58",
                          "description": "Unique idenifier for a group of stakes.",
                          "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
                        },
                        "customer_id": {
                          "type": "string",
                          "description": "Unique identifier for a customer",
                          "example": "SatoshiNakamoto-xUYJbPw9hw",
                          "minimum": 1
                        },
                        "plan_id": {
                          "type": "string",
                          "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                          "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "protocol",
                        "network"
                      ],
                      "properties": {
                        "protocol": {
                          "type": "string",
                          "description": "Polygon protocol",
                          "enum": [
                            "polygon"
                          ]
                        },
                        "network": {
                          "type": "string",
                          "description": "Polygon network",
                          "enum": [
                            "mainnet",
                            "goerli",
                            "prater"
                          ]
                        },
                        "polygon": {
                          "type": "object",
                          "description": "Polygon Stake Intent",
                          "required": [
                            "to",
                            "unsigned_transaction",
                            "amount",
                            "wallet_address"
                          ],
                          "properties": {
                            "to": {
                              "type": "string",
                              "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                              "format": "hex",
                              "pattern": "^0x[a-fA-F0-9]{40}$",
                              "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                            },
                            "unsigned_transaction": {
                              "type": "string",
                              "format": "base64",
                              "description": "Generated unsigned transaction smart contract call data.",
                              "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                            },
                            "amount": {
                              "type": "string",
                              "description": "Denomination of the cryptocurrency Polygon.",
                              "pattern": "^[1-9]\\d+$",
                              "example": "100"
                            },
                            "wallet_address": {
                              "type": "string",
                              "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                              "format": "hex",
                              "pattern": "^0x[a-fA-F0-9]{40}$",
                              "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Insufficient validators available to process Stake Intent request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/polygon/{network}/deactivation-intents": {
      "parameters": [
        {
          "name": "network",
          "in": "path",
          "description": "Polygon network",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Polygon network",
            "enum": [
              "mainnet",
              "goerli",
              "prater"
            ]
          }
        }
      ],
      "post": {
        "summary": "Post Deactivation Intent",
        "operationId": "postPolygonDeactivationIntent",
        "tags": [
          "Polygon"
        ],
        "description": "Creates a new unbond intent that opts out of the delegation program.\nThe user is getting back both their stake and the earned reward. The reward is sent immediately, but the stake gets locked for the so-called “unbonding period” of 2–3 days (or 80 Polygon checkpoints). Once the period is over, the user should call [GET Deactivation Intents](https://docs.blockdaemon.com/reference/getpolygondeactivationintents) and [POST Withdrawal Intent](https://docs.blockdaemon.com/reference/postpolygonwithdrawalintent) to actually get their stake back.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Request object to create a new deactivation intent for Polygon.",
                "required": [
                  "amount",
                  "wallet_address"
                ],
                "properties": {
                  "amount": {
                    "type": "string",
                    "description": "Denomination of the cryptocurrency Polygon.",
                    "pattern": "^[1-9]\\d+$",
                    "example": "100"
                  },
                  "wallet_address": {
                    "type": "string",
                    "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                    "format": "hex",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                  },
                  "validator_share_address": {
                    "type": "string",
                    "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                    "format": "hex",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                  },
                  "plan_id": {
                    "type": "string",
                    "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                    "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "deactivate_intent_id",
                        "customer_id"
                      ],
                      "properties": {
                        "deactivate_intent_id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "Unique idenifier for deactivate intent.",
                          "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                        },
                        "customer_id": {
                          "type": "string",
                          "description": "Unique identifier for a customer",
                          "example": "SatoshiNakamoto-xUYJbPw9hw",
                          "minimum": 1
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Response to a new deactivation intent request.",
                      "required": [
                        "protocol",
                        "network",
                        "polygon"
                      ],
                      "properties": {
                        "protocol": {
                          "type": "string",
                          "description": "Polygon protocol",
                          "enum": [
                            "polygon"
                          ]
                        },
                        "network": {
                          "type": "string",
                          "description": "Polygon network",
                          "enum": [
                            "mainnet",
                            "goerli",
                            "prater"
                          ]
                        },
                        "polygon": {
                          "type": "object",
                          "description": "Polygon Deactivate Intent",
                          "required": [
                            "to",
                            "unsigned_transaction",
                            "amount",
                            "wallet_address"
                          ],
                          "properties": {
                            "to": {
                              "type": "string",
                              "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                              "format": "hex",
                              "pattern": "^0x[a-fA-F0-9]{40}$",
                              "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                            },
                            "unsigned_transaction": {
                              "type": "string",
                              "format": "base64",
                              "description": "Generated unsigned transaction smart contract call data.",
                              "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                            },
                            "amount": {
                              "type": "string",
                              "description": "Denomination of the cryptocurrency Polygon.",
                              "pattern": "^[1-9]\\d+$",
                              "example": "100"
                            },
                            "wallet_address": {
                              "type": "string",
                              "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                              "format": "hex",
                              "pattern": "^0x[a-fA-F0-9]{40}$",
                              "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "get": {
        "parameters": [
          {
            "name": "wallet_address",
            "in": "query",
            "required": false,
            "description": "User wallet address.",
            "schema": {
              "type": "string",
              "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
              "format": "hex",
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
            }
          }
        ],
        "summary": "Lists Deactivation Intents",
        "operationId": "getPolygonDeactivationIntents",
        "tags": [
          "Polygon"
        ],
        "description": "Returns deactivation requests (only unclaimed stakes) for a **given wallet address**.\n\nDeactivation requests are stored in the blockchain and provide the user with an unbond nonce for each. Nonces are used to unstake (withdraw) your MATIC tokens wit [Post Withdrawal Intent](https://docs.blockdaemon.com/reference/postpolygonwithdrawalintent).",
        "responses": {
          "200": {
            "description": "Deactivation intents listed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Deactivation intents",
                  "required": [
                    "protocol",
                    "network",
                    "customer_id"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Polygon protocol",
                      "enum": [
                        "polygon"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "Polygon network",
                      "enum": [
                        "mainnet",
                        "goerli",
                        "prater"
                      ]
                    },
                    "polygon": {
                      "type": "object",
                      "required": [
                        "items",
                        "wallet_address"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "description": "Unbond information",
                            "required": [
                              "nonce",
                              "amount",
                              "withdraw_epoch"
                            ],
                            "properties": {
                              "nonce": {
                                "type": "integer",
                                "description": "Number for one use only",
                                "example": 1
                              },
                              "amount": {
                                "type": "string",
                                "description": "Denomination of the cryptocurrency Polygon.",
                                "pattern": "^[1-9]\\d+$",
                                "example": "100"
                              },
                              "withdraw_epoch": {
                                "type": "integer"
                              }
                            }
                          }
                        },
                        "wallet_address": {
                          "type": "string",
                          "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                          "format": "hex",
                          "pattern": "^0x[a-fA-F0-9]{40}$",
                          "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                        }
                      }
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "Unique identifier for a customer",
                      "example": "SatoshiNakamoto-xUYJbPw9hw",
                      "minimum": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "put": {
        "summary": "Cancel Deactivation Intent",
        "operationId": "cancelPolygonDeactivationIntent",
        "tags": [
          "Polygon"
        ],
        "description": "Cancels a previously issued deactivation intent by specifying its ID.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Intent id.",
                "required": [
                  "intent_id"
                ],
                "properties": {
                  "intent_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique idenifier for deactivate intent.",
                    "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cancellation Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Success Response",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Status Code",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "description": "Confirmation Message",
                      "example": "Canceled"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/polygon/{network}/withdrawal-intents": {
      "post": {
        "parameters": [
          {
            "name": "network",
            "in": "path",
            "description": "Polygon network",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Polygon network",
              "enum": [
                "mainnet",
                "goerli",
                "prater"
              ]
            }
          }
        ],
        "summary": "Post Withdrawal Intent",
        "operationId": "postPolygonWithdrawalIntent",
        "tags": [
          "Polygon"
        ],
        "description": "Creates a new unstake intent to fully withdraw a stake. It should be used only after the unbonding period has passed. If no unbond nonce is specified, transactions for all available unstakes will be returned.\nNonces are returned by [List Deactivation Intents](https://docs.blockdaemon.com/reference/getpolygondeactivationintents).",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Request object to create a new withdrawal intent for Polygon.",
                "required": [
                  "wallet_address"
                ],
                "properties": {
                  "unbond_nonces": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "description": "Number for one use only",
                      "example": 1
                    }
                  },
                  "wallet_address": {
                    "type": "string",
                    "description": "An array of unbond nonces.",
                    "format": "hex",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                  },
                  "validator_share_address": {
                    "type": "string",
                    "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                    "format": "hex",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                  },
                  "plan_id": {
                    "type": "string",
                    "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                    "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "withdraw_intent_id",
                        "customer_id"
                      ],
                      "properties": {
                        "withdraw_intent_id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "Unique idenifier for a withdrawal intent.",
                          "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                        },
                        "customer_id": {
                          "type": "string",
                          "description": "Unique identifier for a customer",
                          "example": "SatoshiNakamoto-xUYJbPw9hw",
                          "minimum": 1
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Result of a new withdrawal intent request.",
                      "required": [
                        "protocol",
                        "network"
                      ],
                      "properties": {
                        "protocol": {
                          "type": "string",
                          "description": "Polygon protocol",
                          "enum": [
                            "polygon"
                          ]
                        },
                        "network": {
                          "type": "string",
                          "description": "Polygon network",
                          "enum": [
                            "mainnet",
                            "goerli",
                            "prater"
                          ]
                        },
                        "polygon": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "to",
                              "unsigned_transaction",
                              "unbond_nonce",
                              "wallet_address"
                            ],
                            "properties": {
                              "to": {
                                "type": "string",
                                "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                                "format": "hex",
                                "pattern": "^0x[a-fA-F0-9]{40}$",
                                "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                              },
                              "unsigned_transaction": {
                                "type": "string",
                                "format": "base64",
                                "description": "Generated unsigned transaction smart contract call data.",
                                "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                              },
                              "unbond_nonce": {
                                "type": "integer",
                                "description": "Number for one use only",
                                "example": 1
                              },
                              "wallet_address": {
                                "type": "string",
                                "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                                "format": "hex",
                                "pattern": "^0x[a-fA-F0-9]{40}$",
                                "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/polygon/{network}/rewards/restake-intents": {
      "parameters": [
        {
          "name": "network",
          "in": "path",
          "description": "Polygon network",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Polygon network",
            "enum": [
              "mainnet",
              "goerli",
              "prater"
            ]
          }
        }
      ],
      "post": {
        "summary": "Post Rewards Restake Intent",
        "operationId": "postPolygonRewardsRestakeIntent",
        "tags": [
          "Polygon"
        ],
        "description": "Creates a new restake intent that restakes token rewards to the validator and increases the delegation stake.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Request object to create a new Rewards Restake Intent for Polygon",
                "required": [
                  "wallet_address"
                ],
                "properties": {
                  "wallet_address": {
                    "type": "string",
                    "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                    "format": "hex",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                  },
                  "validator_share_address": {
                    "type": "string",
                    "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                    "format": "hex",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                  },
                  "plan_id": {
                    "type": "string",
                    "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                    "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rewards restake intent created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "protocol",
                    "network",
                    "customer_id"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Blockchain protocol.",
                      "enum": [
                        "ethereum",
                        "polkadot",
                        "solana",
                        "cosmos",
                        "polygon",
                        "near",
                        "cardano",
                        "avalanche",
                        "binance"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "Protocol-specific network.",
                      "enum": [
                        "mainnet",
                        "localnet",
                        "goerli",
                        "prater",
                        "holesky",
                        "testnet",
                        "devnet",
                        "kusama",
                        "westend",
                        "preprod",
                        "fuji",
                        "local"
                      ]
                    },
                    "polygon": {
                      "type": "object",
                      "required": [
                        "to",
                        "unsigned_transaction",
                        "wallet_address"
                      ],
                      "properties": {
                        "to": {
                          "type": "string",
                          "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                          "format": "hex",
                          "pattern": "^0x[a-fA-F0-9]{40}$",
                          "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                        },
                        "unsigned_transaction": {
                          "type": "string",
                          "format": "base64",
                          "description": "Generated unsigned transaction smart contract call data.",
                          "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                        },
                        "wallet_address": {
                          "type": "string",
                          "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                          "format": "hex",
                          "pattern": "^0x[a-fA-F0-9]{40}$",
                          "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                        }
                      }
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "Unique identifier for a customer",
                      "example": "SatoshiNakamoto-xUYJbPw9hw",
                      "minimum": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/polygon/{network}/rewards/withdrawal-intents": {
      "parameters": [
        {
          "name": "network",
          "in": "path",
          "description": "Polygon network",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Polygon network",
            "enum": [
              "mainnet",
              "goerli",
              "prater"
            ]
          }
        }
      ],
      "post": {
        "summary": "Post Rewards Withdrawal Intent",
        "operationId": "postPolygonRewardsWithdrawalIntent",
        "tags": [
          "Polygon"
        ],
        "description": "Creates a new withdrawal intent that withdraws only the accumulated rewards. Staked tokens stay untouched and keep earning rewards.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "description": "Request object to create a new rewards withdrawal intent for Polygon.",
                    "required": [
                      "wallet_address"
                    ],
                    "properties": {
                      "wallet_address": {
                        "type": "string",
                        "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                        "format": "hex",
                        "pattern": "^0x[a-fA-F0-9]{40}$",
                        "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                      },
                      "validator_share_address": {
                        "type": "string",
                        "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                        "format": "hex",
                        "pattern": "^0x[a-fA-F0-9]{40}$",
                        "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                      },
                      "plan_id": {
                        "type": "string",
                        "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                        "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rewards withdrawal intent created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "protocol",
                    "network",
                    "polygon",
                    "customer_id"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Polygon protocol",
                      "enum": [
                        "polygon"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "Polygon network",
                      "enum": [
                        "mainnet",
                        "goerli",
                        "prater"
                      ]
                    },
                    "polygon": {
                      "type": "object",
                      "required": [
                        "to",
                        "unsigned_transaction",
                        "wallet_address"
                      ],
                      "properties": {
                        "to": {
                          "type": "string",
                          "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                          "format": "hex",
                          "pattern": "^0x[a-fA-F0-9]{40}$",
                          "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                        },
                        "unsigned_transaction": {
                          "type": "string",
                          "format": "base64",
                          "description": "Generated unsigned transaction smart contract call data.",
                          "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                        },
                        "wallet_address": {
                          "type": "string",
                          "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                          "format": "hex",
                          "pattern": "^0x[a-fA-F0-9]{40}$",
                          "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                        }
                      }
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "Unique identifier for a customer",
                      "example": "SatoshiNakamoto-xUYJbPw9hw",
                      "minimum": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/polkadot/{network}/stake-intents": {
      "parameters": [
        {
          "name": "network",
          "in": "path",
          "description": "Polkadot network",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Coin network",
            "enum": [
              "mainnet",
              "kusama",
              "westend"
            ]
          }
        },
        {
          "in": "header",
          "name": "Idempotency-Key",
          "description": "the unique idempotency key for this request",
          "example": "f1c971b4-7114-4c4b-8ad2-a6f9e33e2cd0",
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "required": false
        }
      ],
      "post": {
        "summary": "Post Stake Intent",
        "operationId": "postPolkadotStakeIntent",
        "tags": [
          "Polkadot"
        ],
        "description": "Creates an unsigned transaction that will attach a Blockdaemon's proxy account to the specified customer account. This will allow Blockdaemon to nominate on behalf of the customer and to continuously optimise the nominations of the customer account in order to achieve the best possible rewards.\n\nThe attaching will take place as soon as the user signs and broadcasts the transaction to the Polkadot network.\n\nThe customer account can be a stash account or a proxy (staking or non-transfer) for a stash account.\n\n**Example (for the Westend network):** - Submitted:\n    - customer_address: 5CF33r36TUbcSz4KxXo5ApzAW9Dtf8EkfvTQppiEEd9HfAZ6\n- Returned:\n    - proxy_address: 5FEPMjDLQd4Yyf8Dg7WSNVWSU36T1rXCcq1ph6HkW1YpNs5e\n    - unsigned_transaction: 0xa4041601008c16e19e94328985d65cb7e3245213892730dd0e841f6511478cb12f23a178330100000000",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Request object to create a new Stake Intent for Polkadot.",
                "properties": {
                  "customer_address": {
                    "description": "Address of the customer account whose DOT will be staked.",
                    "type": "string",
                    "format": "base58",
                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                  },
                  "controller_address": {
                    "description": "Address of the customer account whose DOT will be staked.\nSame as customer_address. Deprecated - will be removed in a later version.",
                    "type": "string",
                    "format": "base58",
                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "stake_intent_id",
                        "customer_id"
                      ],
                      "properties": {
                        "stake_intent_id": {
                          "type": "string",
                          "format": "base58",
                          "description": "Unique idenifier for a group of stakes.",
                          "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
                        },
                        "customer_id": {
                          "type": "string",
                          "description": "Unique identifier for a customer",
                          "example": "SatoshiNakamoto-xUYJbPw9hw",
                          "minimum": 1
                        },
                        "plan_id": {
                          "type": "string",
                          "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                          "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "protocol",
                        "network"
                      ],
                      "properties": {
                        "protocol": {
                          "type": "string",
                          "description": "Polkadot protocol",
                          "enum": [
                            "polkadot"
                          ]
                        },
                        "network": {
                          "type": "string",
                          "description": "Coin network",
                          "enum": [
                            "mainnet",
                            "kusama",
                            "westend"
                          ]
                        },
                        "polkadot": {
                          "type": "object",
                          "description": "Polkadot Stake Intent Response",
                          "required": [
                            "stake_id",
                            "unsigned_transaction",
                            "proxy_address"
                          ],
                          "properties": {
                            "unsigned_transaction": {
                              "description": "Unsigned transaction that bonds a Blockdaemon's proxy account to the given customer account.\nOnce this transaction is signed, broadcasted to the network and included in the canonical history of the chain, the proxy account will be associated with the customer account.",
                              "type": "string",
                              "format": "base64",
                              "example": "0xa4041601008c16e19e94328985d65cb7e3245213892730dd0e841f6511478cb12f23a178330100000000"
                            },
                            "customer_address": {
                              "description": "Address of the customer account to associate with the proxy account.",
                              "type": "string",
                              "format": "base58",
                              "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                              "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                            },
                            "controller_address": {
                              "description": "Address of the customer account to associate with the proxy account.\nSame as customer_address. Deprecated - will be removed in a later version.",
                              "type": "string",
                              "format": "base58",
                              "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                              "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                            },
                            "proxy_address": {
                              "description": "Address of the proxy account to associate with the customer account.",
                              "type": "string",
                              "format": "base58",
                              "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                              "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Insufficient validators available to process Stake Intent request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/polkadot/{network}/deactivation-intents": {
      "parameters": [
        {
          "name": "network",
          "in": "path",
          "description": "Polkadot network",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Coin network",
            "enum": [
              "mainnet",
              "kusama",
              "westend"
            ]
          }
        }
      ],
      "post": {
        "summary": "Post Deactivation Intent",
        "operationId": "postPolkadotDeactivateIntent",
        "tags": [
          "Polkadot"
        ],
        "description": "Returns an unsigned transaction to deactivate a certain amount of stake.\n\nThe transaction will remove the specified amount from the staked amount. If an amount is not specified, the default is all staked amount. This will take place as soon as the user signs and broadcasts the transaction to the Polkadot network.\n\nPlease note that this amount will remain in the \"staking\" section of the account - it can be staked elsewhere, but cannot be transferred freely to another account. To move it to the \"general\" section of the account, the user will need to also create an withdrawal request.\n\nIf the amount is all of the stake controlled by this customer account (\"full deactivation\"), the transaction will also disconnect the Blockdaemon proxy account from this customer account. Please note that in this case all existing nominations of the customer account will remain active. Blockdaemon will immediately cease the further management of nominations even if the deactivation transaction is not broadcasted by the user to the network.\n\n**Full deactivation example (for the Westend network):** - Submitted:\n    - customer_address: 5CF33r36TUbcSz4KxXo5ApzAW9Dtf8EkfvTQppiEEd9HfAZ6\n    - amount: (not specified)\n- Returned:\n    - proxy_address: 5FEPMjDLQd4Yyf8Dg7WSNVWSU36T1rXCcq1ph6HkW1YpNs5e\n    - unsigned_transaction: 0xd00410020c0606060202286bee1602008c16e19e94328985d65cb7e3245213892730dd0e841f6511478cb12f23a178330100000000\n\n\nIf the amount is less than all of the stake controlled by this customer account (\"partial nomination\"), this amount will be deactivated, but the Blockdaemon proxy account will not be disconnected from the customer account, and will continue to manage its nominations.\n\n**Partial deactivation example (for the Westend network):** - Submitted:\n    - customer_address: 5CF33r36TUbcSz4KxXo5ApzAW9Dtf8EkfvTQppiEEd9HfAZ6\n    - amount: 1,000,000,000\n- Returned:\n    - proxy_address: 5FEPMjDLQd4Yyf8Dg7WSNVWSU36T1rXCcq1ph6HkW1YpNs5e\n    - unsigned_transaction: 0x30041002080606060202286bee",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Request object to create a new deactivation intent for Polkadot.",
                "properties": {
                  "customer_address": {
                    "description": "Address of the customer account to deactivate.",
                    "type": "string",
                    "format": "base58",
                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                  },
                  "controller_address": {
                    "description": "Address of the customer account to deactivate.\nSame as customer_address. Deprecated - will be removed in a later version.",
                    "type": "string",
                    "format": "base58",
                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                  },
                  "amount": {
                    "description": "Amount of DOT to unbond. If not supplied, the entire active stake is unbonded.",
                    "type": "string",
                    "pattern": "^[1-9]\\d+$",
                    "example": "100"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "deactivate_intent_id",
                        "customer_id"
                      ],
                      "properties": {
                        "deactivate_intent_id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "Unique idenifier for deactivate intent.",
                          "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                        },
                        "customer_id": {
                          "type": "string",
                          "description": "Unique identifier for a customer",
                          "example": "SatoshiNakamoto-xUYJbPw9hw",
                          "minimum": 1
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Response to a new deactivation intent request.",
                      "required": [
                        "protocol",
                        "network",
                        "polkadot"
                      ],
                      "properties": {
                        "protocol": {
                          "type": "string",
                          "description": "Polkadot protocol",
                          "enum": [
                            "polkadot"
                          ]
                        },
                        "network": {
                          "type": "string",
                          "description": "Coin network",
                          "enum": [
                            "mainnet",
                            "kusama",
                            "westend"
                          ]
                        },
                        "polkadot": {
                          "type": "object",
                          "description": "Polkadot Deactivate Intent Response",
                          "required": [
                            "unsigned_transaction",
                            "proxy_address",
                            "amount",
                            "deactivationType"
                          ],
                          "properties": {
                            "unsigned_transaction": {
                              "description": "Unsigned remove proxy transaction.\nOnce this transaction is signed, broadcasted to the network and included in the canonical history of the chain, the specified amount will be removed from the staked amount. If the amount is the entire stake, the proxy account of Blockdaemon will be unbound from the customer account.",
                              "type": "string",
                              "format": "base64",
                              "example": "0xd00410020c0606060202286bee1602008c16e19e94328985d65cb7e3245213892730dd0e841f6511478cb12f23a178330100000000"
                            },
                            "customer_address": {
                              "description": "Address of the customer account from which the proxy will be removed.",
                              "type": "string",
                              "format": "base58",
                              "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                              "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                            },
                            "controller_address": {
                              "description": "Address of the customer account from which the proxy will be removed.\nSame as customer_address. Deprecated - will be removed in a later version.",
                              "type": "string",
                              "format": "base58",
                              "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                              "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                            },
                            "proxy_address": {
                              "description": "Address of the proxy account that will be removed from the customer account.",
                              "type": "string",
                              "format": "base58",
                              "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                              "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                            },
                            "amount": {
                              "description": "Amount of DOT that will be unbond.",
                              "type": "string",
                              "pattern": "^[1-9]\\d+$",
                              "example": "100"
                            },
                            "deactivationType": {
                              "description": "Type of deactivation.\nThis can be either \"full\" or \"partial\". If \"full\" is specified, the entire stake will be removed from the proxy account. If \"partial\" is specified, the amount specified in the amount field will be removed from the proxy account.",
                              "type": "string",
                              "enum": [
                                "full",
                                "partial"
                              ]
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/polkadot/{network}/withdrawal-intents": {
      "parameters": [
        {
          "name": "network",
          "in": "path",
          "description": "Polkadot network",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Coin network",
            "enum": [
              "mainnet",
              "kusama",
              "westend"
            ]
          }
        }
      ],
      "post": {
        "summary": "Post Withdrawal Intent",
        "operationId": "postPolkadotWithdrawalIntent",
        "tags": [
          "Polkadot"
        ],
        "description": "Returns an unsigned transaction to move the free (currently not staked) amount of DOT in the \"staking\" section of this account to its \"general\" section.\n\nThe withdrawal will take place as soon as the user signs and broadcasts the transaction to the Polkadot network.\n\nExplanation: Some or all of the stake in the \"staking\" section might not be nominated (likely was deactivated through a Deactivation Intent). This amount can be nominated to some validator(s), but cannot be transferred to another account (spent). To be free for that, this amount must be moved to the \"general\" section of the account.\n\nThe customer account used can be a stash account or a proxy (staking or non-transfer) for a stash account.\n\n**Example (for the Westend network):** - Submitted:\n    - customer_address: 5CF33r36TUbcSz4KxXo5ApzAW9Dtf8EkfvTQppiEEd9HfAZ6\n- Returned:\n    - customer_address: 5CF33r36TUbcSz4KxXo5ApzAW9Dtf8EkfvTQppiEEd9HfAZ6\n    - unsigned_transaction: 0x1c04060301000000",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Request object to create a new withdrawal intent for Polkadot.",
                "properties": {
                  "customer_address": {
                    "description": "Address of the customer account that will be affected by the withdrawal intent.",
                    "type": "string",
                    "format": "base58",
                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                  },
                  "controller_address": {
                    "description": "Address of the customer account that will be affected by the withdrawal intent.\nSame as customer_address. Deprecated - will be removed in a later version.",
                    "type": "string",
                    "format": "base58",
                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                    "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Result of a new withdrawal intent request.",
                  "required": [
                    "withdraw_intent_id"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "enum": [
                        "polkadot"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "Coin network",
                      "enum": [
                        "mainnet",
                        "kusama",
                        "westend"
                      ]
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "Unique identifier for a customer",
                      "example": "SatoshiNakamoto-xUYJbPw9hw",
                      "minimum": 1
                    },
                    "withdraw_intent_id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Unique idenifier for a withdrawal intent.",
                      "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                    },
                    "polkadot": {
                      "type": "object",
                      "description": "Polkadot withdrawal intent response",
                      "required": [
                        "unsigned_transaction"
                      ],
                      "properties": {
                        "unsigned_transaction": {
                          "type": "string",
                          "format": "base64",
                          "description": "Unsigned withdraw intent transaction.\nOnce this transaction is signed, broadcasted to the network and included in the canonical history of the chain, the unbonded stake controlled by this customer account will be withdrawn from its stake pool.",
                          "example": "0x1c04060301000000"
                        },
                        "customer_address": {
                          "description": "Address of the customer account whose unbonded stake will be withdrawn.",
                          "type": "string",
                          "format": "base58",
                          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                        },
                        "controller_address": {
                          "description": "Address of the customer account whose unbonded stake will be withdrawn.\nSame as customer_address. Deprecated - will be removed in a later version.",
                          "type": "string",
                          "format": "base58",
                          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/cosmos/{network}/stake-intents": {
      "parameters": [
        {
          "name": "network",
          "in": "path",
          "description": "Cosmos network",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Cosmos network",
            "enum": [
              "mainnet",
              "testnet"
            ]
          }
        },
        {
          "in": "header",
          "name": "Idempotency-Key",
          "description": "the unique idempotency key for this request",
          "example": "f1c971b4-7114-4c4b-8ad2-a6f9e33e2cd0",
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "required": false
        }
      ],
      "post": {
        "summary": "Post Stake Intent",
        "operationId": "postCosmosStakeIntent",
        "tags": [
          "Cosmos"
        ],
        "description": "Blockdaemon reserves the right to free any allocated resources if the transaction is not confirmed in time.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Individual cosmos stake",
                "required": [
                  "amount",
                  "delegator_address"
                ],
                "properties": {
                  "amount": {
                    "type": "string",
                    "description": "Denomination of the cryptocurrency Cosmos.",
                    "pattern": "^[1-9]\\d+$",
                    "example": "100"
                  },
                  "delegator_address": {
                    "type": "string",
                    "description": "Public Key of an asymmetric key-pair.",
                    "format": "bech32",
                    "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                    "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                  },
                  "public_key": {
                    "type": "object",
                    "description": "Cosmos public key description",
                    "required": [
                      "value",
                      "type"
                    ],
                    "properties": {
                      "value": {
                        "type": "string",
                        "description": "Public Key of an asymmetric key-pair.",
                        "format": "base64",
                        "example": "MTIzMDl3c2hka2Fqc2RoYXNramQ4OTEyM25oamtzaGRrcWplZ"
                      },
                      "type": {
                        "type": "string",
                        "description": "Cosmos public key types",
                        "enum": [
                          "ed25519",
                          "secp256k1"
                        ]
                      }
                    }
                  },
                  "plan_id": {
                    "type": "string",
                    "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                    "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "stake_intent_id",
                        "customer_id"
                      ],
                      "properties": {
                        "stake_intent_id": {
                          "type": "string",
                          "format": "base58",
                          "description": "Unique idenifier for a group of stakes.",
                          "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
                        },
                        "customer_id": {
                          "type": "string",
                          "description": "Unique identifier for a customer",
                          "example": "SatoshiNakamoto-xUYJbPw9hw",
                          "minimum": 1
                        },
                        "plan_id": {
                          "type": "string",
                          "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                          "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "protocol",
                        "network"
                      ],
                      "properties": {
                        "protocol": {
                          "type": "string",
                          "description": "Cosmos protocol",
                          "enum": [
                            "cosmos"
                          ]
                        },
                        "network": {
                          "type": "string",
                          "description": "Cosmos network",
                          "enum": [
                            "mainnet",
                            "testnet"
                          ]
                        },
                        "cosmos": {
                          "type": "object",
                          "description": "Cosmos Stake Intent response",
                          "required": [
                            "unsigned_transaction",
                            "amount",
                            "delegator_address",
                            "validator_address"
                          ],
                          "properties": {
                            "unsigned_transaction": {
                              "type": "string",
                              "format": "base64",
                              "description": "Generated unsigned transaction smart contract call data.",
                              "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                            },
                            "delegator_address": {
                              "type": "string",
                              "description": "Public Key of an asymmetric key-pair.",
                              "format": "bech32",
                              "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                              "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                            },
                            "validator_address": {
                              "type": "string",
                              "description": "Public Key of an asymmetric key-pair.",
                              "format": "bech32",
                              "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                              "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                            },
                            "amount": {
                              "type": "string",
                              "description": "Denomination of the cryptocurrency Cosmos.",
                              "pattern": "^[1-9]\\d+$",
                              "example": "100"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Insufficient validators available to process Stake Intent request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/cosmos/{network}/deactivation-intents": {
      "parameters": [
        {
          "name": "network",
          "in": "path",
          "description": "Cosmos network",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Cosmos network",
            "enum": [
              "mainnet",
              "testnet"
            ]
          }
        }
      ],
      "post": {
        "summary": "Post Deactivation Intent",
        "operationId": "postCosmosDeactivationIntent",
        "tags": [
          "Cosmos"
        ],
        "description": "Create transaction to undelegate given amount of ATOMs from a validator.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Request object to create a new deactivation intent for Cosmos.",
                "required": [
                  "delegator_address",
                  "amount"
                ],
                "properties": {
                  "delegator_address": {
                    "type": "string",
                    "description": "Public Key of an asymmetric key-pair.",
                    "format": "bech32",
                    "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                    "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                  },
                  "amount": {
                    "type": "string",
                    "description": "Denomination of the cryptocurrency Cosmos.",
                    "pattern": "^[1-9]\\d+$",
                    "example": "100"
                  },
                  "plan_id": {
                    "type": "string",
                    "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                    "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "deactivate_intent_id",
                        "customer_id"
                      ],
                      "properties": {
                        "deactivate_intent_id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "Unique idenifier for deactivate intent.",
                          "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                        },
                        "customer_id": {
                          "type": "string",
                          "description": "Unique identifier for a customer",
                          "example": "SatoshiNakamoto-xUYJbPw9hw",
                          "minimum": 1
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Response to a new deactivation intent request.",
                      "required": [
                        "protocol",
                        "network",
                        "cosmos"
                      ],
                      "properties": {
                        "protocol": {
                          "type": "string",
                          "description": "Cosmos protocol",
                          "enum": [
                            "cosmos"
                          ]
                        },
                        "network": {
                          "type": "string",
                          "description": "Cosmos network",
                          "enum": [
                            "mainnet",
                            "testnet"
                          ]
                        },
                        "cosmos": {
                          "type": "object",
                          "description": "Cosmos Deactivate Intent",
                          "required": [
                            "unsigned_transaction",
                            "delegator_address",
                            "validator_address",
                            "amount"
                          ],
                          "properties": {
                            "unsigned_transaction": {
                              "type": "string",
                              "format": "base64",
                              "description": "Generated unsigned transaction smart contract call data.",
                              "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                            },
                            "delegator_address": {
                              "type": "string",
                              "description": "Public Key of an asymmetric key-pair.",
                              "format": "bech32",
                              "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                              "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                            },
                            "validator_address": {
                              "type": "string",
                              "description": "Public Key of an asymmetric key-pair.",
                              "format": "bech32",
                              "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                              "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                            },
                            "amount": {
                              "type": "string",
                              "description": "Denomination of the cryptocurrency Cosmos.",
                              "pattern": "^[1-9]\\d+$",
                              "example": "100"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "get": {
        "summary": "Lists Deactivation Intents",
        "operationId": "getCosmosDeactivationIntents",
        "tags": [
          "Cosmos"
        ],
        "description": "Retrieve a list of deactivation intents.",
        "responses": {
          "200": {
            "description": "Deactivation intents listed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Deactivation intents",
                  "required": [
                    "protocol",
                    "network",
                    "customer_id"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Blockchain protocol.",
                      "enum": [
                        "ethereum",
                        "polkadot",
                        "solana",
                        "cosmos",
                        "polygon",
                        "near",
                        "cardano",
                        "avalanche",
                        "binance"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "Protocol-specific network.",
                      "enum": [
                        "mainnet",
                        "localnet",
                        "goerli",
                        "prater",
                        "holesky",
                        "testnet",
                        "devnet",
                        "kusama",
                        "westend",
                        "preprod",
                        "fuji",
                        "local"
                      ]
                    },
                    "polygon": {
                      "type": "object",
                      "required": [
                        "items",
                        "wallet_address"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "description": "Unbond information",
                            "required": [
                              "nonce",
                              "amount",
                              "withdraw_epoch"
                            ],
                            "properties": {
                              "nonce": {
                                "type": "integer",
                                "description": "Number for one use only",
                                "example": 1
                              },
                              "amount": {
                                "type": "string",
                                "description": "Denomination of the cryptocurrency Polygon.",
                                "pattern": "^[1-9]\\d+$",
                                "example": "100"
                              },
                              "withdraw_epoch": {
                                "type": "integer"
                              }
                            }
                          }
                        },
                        "wallet_address": {
                          "type": "string",
                          "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                          "format": "hex",
                          "pattern": "^0x[a-fA-F0-9]{40}$",
                          "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                        }
                      }
                    },
                    "solana": {
                      "description": "List of deactivation intents",
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "deactivate_intent_id",
                              "customer_id"
                            ],
                            "properties": {
                              "deactivate_intent_id": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Unique idenifier for deactivate intent.",
                                "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                              },
                              "customer_id": {
                                "type": "string",
                                "description": "Unique identifier for a customer",
                                "example": "SatoshiNakamoto-xUYJbPw9hw",
                                "minimum": 1
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Response to a new deactivation intent request.",
                            "required": [
                              "network",
                              "protocol",
                              "solana"
                            ],
                            "properties": {
                              "protocol": {
                                "type": "string",
                                "description": "Solana protocol",
                                "enum": [
                                  "solana"
                                ]
                              },
                              "network": {
                                "type": "string",
                                "description": "Solana network",
                                "enum": [
                                  "mainnet",
                                  "testnet"
                                ]
                              },
                              "solana": {
                                "type": "object",
                                "description": "Result of the new Deactivate Intent request.",
                                "required": [
                                  "total_deactivated_amount",
                                  "deactivates",
                                  "splits"
                                ],
                                "properties": {
                                  "deactivates": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "description": "Result of the deactivation transaction request",
                                      "required": [
                                        "unsigned_transaction",
                                        "stake_account_authority",
                                        "stake_account_address",
                                        "withdrawal_authority",
                                        "stake_id",
                                        "amount",
                                        "expiration_time"
                                      ],
                                      "properties": {
                                        "unsigned_transaction": {
                                          "type": "string",
                                          "format": "base64",
                                          "description": "Generated unsigned transaction smart contract call data.",
                                          "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                                        },
                                        "stake_account_authority": {
                                          "type": "string",
                                          "description": "Public Key of an asymmetric key-pair.",
                                          "format": "base58",
                                          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                        },
                                        "stake_account_address": {
                                          "type": "string",
                                          "description": "Public Key of an asymmetric key-pair.",
                                          "format": "base58",
                                          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                        },
                                        "withdrawal_authority": {
                                          "type": "string",
                                          "description": "Public Key of an asymmetric key-pair.",
                                          "format": "base58",
                                          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                        },
                                        "stake_id": {
                                          "description": "Unique stake identifier.",
                                          "type": "string",
                                          "format": "base58",
                                          "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                                        },
                                        "amount": {
                                          "type": "string",
                                          "description": "Denomination of the cryptocurrency Solana.",
                                          "pattern": "^[1-9]\\d+$",
                                          "example": "100"
                                        },
                                        "expiration_time": {
                                          "type": "integer",
                                          "description": "Transaction expiration time",
                                          "format": "int64",
                                          "example": 1689939023
                                        }
                                      }
                                    }
                                  },
                                  "splits": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "description": "Result of the split transaction request",
                                      "required": [
                                        "unsigned_transaction",
                                        "stake_account_authority",
                                        "new_stake_account_address",
                                        "new_stake_id",
                                        "splitted_stake_account_address",
                                        "splitted_stake_id",
                                        "amount"
                                      ],
                                      "properties": {
                                        "unsigned_transaction": {
                                          "type": "string",
                                          "format": "base64",
                                          "description": "Generated unsigned transaction smart contract call data.",
                                          "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                                        },
                                        "stake_account_authority": {
                                          "type": "string",
                                          "description": "Public Key of an asymmetric key-pair.",
                                          "format": "base58",
                                          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                        },
                                        "new_stake_account_address": {
                                          "type": "string",
                                          "description": "Public Key of an asymmetric key-pair.",
                                          "format": "base58",
                                          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                        },
                                        "new_stake_id": {
                                          "description": "Unique stake identifier.",
                                          "type": "string",
                                          "format": "base58",
                                          "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                                        },
                                        "splitted_stake_account_address": {
                                          "type": "string",
                                          "description": "Public Key of an asymmetric key-pair.",
                                          "format": "base58",
                                          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                        },
                                        "splitted_stake_id": {
                                          "description": "Unique stake identifier.",
                                          "type": "string",
                                          "format": "base58",
                                          "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                                        },
                                        "amount": {
                                          "type": "string",
                                          "description": "Denomination of the cryptocurrency Solana.",
                                          "pattern": "^[1-9]\\d+$",
                                          "example": "100"
                                        }
                                      }
                                    }
                                  },
                                  "total_deactivated_amount": {
                                    "type": "string",
                                    "description": "Denomination of the cryptocurrency Solana.",
                                    "pattern": "^[1-9]\\d+$",
                                    "example": "100"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "near": {
                      "type": "array",
                      "description": "List of deactivation intents",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "deactivate_intent_id",
                              "customer_id"
                            ],
                            "properties": {
                              "deactivate_intent_id": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Unique idenifier for deactivate intent.",
                                "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                              },
                              "customer_id": {
                                "type": "string",
                                "description": "Unique identifier for a customer",
                                "example": "SatoshiNakamoto-xUYJbPw9hw",
                                "minimum": 1
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Response to a new deactivation intent request.",
                            "required": [
                              "protocol",
                              "network",
                              "near"
                            ],
                            "properties": {
                              "protocol": {
                                "type": "string",
                                "description": "Near protocol",
                                "enum": [
                                  "near"
                                ]
                              },
                              "network": {
                                "type": "string",
                                "description": "NEAR network",
                                "enum": [
                                  "mainnet",
                                  "testnet",
                                  "localnet"
                                ]
                              },
                              "near": {
                                "type": "object",
                                "description": "NEAR Protocol Deactivate Intent",
                                "required": [
                                  "to",
                                  "unsigned_transaction",
                                  "amount",
                                  "wallet_address",
                                  "public_key",
                                  "expiration_time"
                                ],
                                "properties": {
                                  "to": {
                                    "type": "string",
                                    "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                                    "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                                    "example": "alice.near"
                                  },
                                  "unsigned_transaction": {
                                    "type": "string",
                                    "format": "base64",
                                    "description": "Generated unsigned transaction smart contract call data.",
                                    "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                                  },
                                  "amount": {
                                    "type": "string",
                                    "description": "Denomination of NEAR Protocol.",
                                    "pattern": "^[1-9]\\d+$",
                                    "example": "100000000000000000000000000"
                                  },
                                  "wallet_address": {
                                    "type": "string",
                                    "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                                    "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                                    "example": "alice.near"
                                  },
                                  "public_key": {
                                    "type": "string",
                                    "description": "Base58 encoded public key prefixed by ed25519, associated with the private key that will be used to sign the transaction.",
                                    "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
                                    "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
                                  },
                                  "expiration_time": {
                                    "type": "integer",
                                    "description": "Transaction expiration time",
                                    "format": "int64",
                                    "example": 1689939023
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "cardano": {
                      "type": "array",
                      "description": "List of deactivation intents",
                      "items": {
                        "type": "object",
                        "description": "Cardano Protocol Deactivate Intent",
                        "required": [
                          "deactivate_intent_id",
                          "base_address",
                          "unsigned_transaction"
                        ],
                        "properties": {
                          "deactivate_intent_id": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Unique idenifier for deactivate intent.",
                            "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                          },
                          "base_address": {
                            "type": "string",
                            "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
                            "format": "bech32",
                            "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
                          },
                          "unsigned_transaction": {
                            "type": "string",
                            "format": "base64",
                            "description": "Generated unsigned transaction smart contract call data.",
                            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                          }
                        }
                      }
                    },
                    "cosmos": {
                      "type": "array",
                      "description": "List of deactivation intents",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "deactivate_intent_id",
                              "customer_id"
                            ],
                            "properties": {
                              "deactivate_intent_id": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Unique idenifier for deactivate intent.",
                                "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                              },
                              "customer_id": {
                                "type": "string",
                                "description": "Unique identifier for a customer",
                                "example": "SatoshiNakamoto-xUYJbPw9hw",
                                "minimum": 1
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Response to a new deactivation intent request.",
                            "required": [
                              "protocol",
                              "network",
                              "cosmos"
                            ],
                            "properties": {
                              "protocol": {
                                "type": "string",
                                "description": "Cosmos protocol",
                                "enum": [
                                  "cosmos"
                                ]
                              },
                              "network": {
                                "type": "string",
                                "description": "Cosmos network",
                                "enum": [
                                  "mainnet",
                                  "testnet"
                                ]
                              },
                              "cosmos": {
                                "type": "object",
                                "description": "Cosmos Deactivate Intent",
                                "required": [
                                  "unsigned_transaction",
                                  "delegator_address",
                                  "validator_address",
                                  "amount"
                                ],
                                "properties": {
                                  "unsigned_transaction": {
                                    "type": "string",
                                    "format": "base64",
                                    "description": "Generated unsigned transaction smart contract call data.",
                                    "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                                  },
                                  "delegator_address": {
                                    "type": "string",
                                    "description": "Public Key of an asymmetric key-pair.",
                                    "format": "bech32",
                                    "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                                    "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                                  },
                                  "validator_address": {
                                    "type": "string",
                                    "description": "Public Key of an asymmetric key-pair.",
                                    "format": "bech32",
                                    "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                                    "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                                  },
                                  "amount": {
                                    "type": "string",
                                    "description": "Denomination of the cryptocurrency Cosmos.",
                                    "pattern": "^[1-9]\\d+$",
                                    "example": "100"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "binance": {
                      "type": "array",
                      "description": "List of deactivation intents",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "deactivate_intent_id",
                              "customer_id"
                            ],
                            "properties": {
                              "deactivate_intent_id": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Unique idenifier for deactivate intent.",
                                "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                              },
                              "customer_id": {
                                "type": "string",
                                "description": "Unique identifier for a customer",
                                "example": "SatoshiNakamoto-xUYJbPw9hw",
                                "minimum": 1
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Response to a new deactivation intent request.",
                            "required": [
                              "protocol",
                              "network",
                              "binance"
                            ],
                            "properties": {
                              "protocol": {
                                "type": "string",
                                "description": "Binance beacon chain protocol",
                                "enum": [
                                  "binance"
                                ]
                              },
                              "network": {
                                "type": "string",
                                "description": "Binance beacon chain network",
                                "enum": [
                                  "mainnet",
                                  "testnet"
                                ]
                              },
                              "binance": {
                                "type": "object",
                                "description": "Binance Deactivate Intent",
                                "required": [
                                  "unsigned_transaction",
                                  "delegator_address",
                                  "validator_address",
                                  "amount"
                                ],
                                "properties": {
                                  "unsigned_transaction": {
                                    "type": "string",
                                    "format": "base64",
                                    "description": "Generated unsigned transaction smart contract call data.",
                                    "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                                  },
                                  "delegator_address": {
                                    "type": "string",
                                    "description": "Binance beacon chain address.",
                                    "format": "bech32",
                                    "pattern": "^bnb[0-9a-z]+$",
                                    "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
                                  },
                                  "validator_address": {
                                    "type": "string",
                                    "description": "Binance beacon chain validator address.",
                                    "format": "bech32",
                                    "pattern": "^bva[0-9a-zA-Z]*$",
                                    "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                                  },
                                  "amount": {
                                    "type": "string",
                                    "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
                                    "pattern": "^[1-9]\\d+$",
                                    "example": "10000000000"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "Unique identifier for a customer",
                      "example": "SatoshiNakamoto-xUYJbPw9hw",
                      "minimum": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/cosmos/{network}/rewards/withdrawal-intents": {
      "parameters": [
        {
          "name": "network",
          "in": "path",
          "description": "Cosmos network",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Cosmos network",
            "enum": [
              "mainnet",
              "testnet"
            ]
          }
        }
      ],
      "post": {
        "summary": "Post Rewards Withdrawal Intent",
        "operationId": "postCosmosRewardsWithdrawalIntent",
        "tags": [
          "Cosmos"
        ],
        "description": "Creates a new withdrawal intent that withdraws only the accumulated rewards. Staked tokens stay untouched and keep earning rewards.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "description": "Request object to create a new rewards withdrawal intent for Cardano.",
                    "required": [
                      "delegator_address"
                    ],
                    "properties": {
                      "delegator_address": {
                        "type": "string",
                        "description": "Public Key of an asymmetric key-pair.",
                        "format": "bech32",
                        "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                        "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                      },
                      "plan_id": {
                        "type": "string",
                        "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                        "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rewards withdrawal intent created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "protocol",
                    "network",
                    "cosmos",
                    "customer_id"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Cosmos protocol",
                      "enum": [
                        "cosmos"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "Cosmos network",
                      "enum": [
                        "mainnet",
                        "testnet"
                      ]
                    },
                    "cosmos": {
                      "type": "object",
                      "required": [
                        "unsigned_transaction",
                        "delegator_address",
                        "validator_address",
                        "amount"
                      ],
                      "properties": {
                        "unsigned_transaction": {
                          "type": "string",
                          "format": "base64",
                          "description": "Generated unsigned transaction smart contract call data.",
                          "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                        },
                        "delegator_address": {
                          "type": "string",
                          "description": "Public Key of an asymmetric key-pair.",
                          "format": "bech32",
                          "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                          "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                        },
                        "validator_address": {
                          "type": "string",
                          "description": "Public Key of an asymmetric key-pair.",
                          "format": "bech32",
                          "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                          "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                        },
                        "amount": {
                          "type": "string",
                          "description": "Denomination of the cryptocurrency Cosmos.",
                          "pattern": "^[1-9]\\d+$",
                          "example": "100"
                        }
                      }
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "Unique identifier for a customer",
                      "example": "SatoshiNakamoto-xUYJbPw9hw",
                      "minimum": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/cosmos/{network}/deactivatable-amount": {
      "parameters": [
        {
          "name": "network",
          "in": "path",
          "description": "Cosmos network",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Cosmos network",
            "enum": [
              "mainnet",
              "testnet"
            ]
          }
        },
        {
          "name": "wallets",
          "description": "Array of Cosmos wallets",
          "in": "query",
          "required": false,
          "schema": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Public Key of an asymmetric key-pair.",
              "format": "bech32",
              "pattern": "^cosmos[1-9a-zA-Z]{39}$",
              "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
            }
          }
        }
      ],
      "get": {
        "summary": "Get Deactivatable Amount",
        "operationId": "getCosmosDeactivatableAmount",
        "tags": [
          "Cosmos"
        ],
        "description": "Returns the total staked amount that can be deactivated across all wallets of the user.\n\nYou can specify the optional `wallets` parameter to get the total deactivatable amount in specific wallets.",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "The deactivatable amount",
                  "required": [
                    "protocol",
                    "network",
                    "amount",
                    "currency"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Cosmos protocol",
                      "enum": [
                        "cosmos"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "Cosmos network",
                      "enum": [
                        "mainnet",
                        "testnet"
                      ]
                    },
                    "currency": {
                      "type": "string",
                      "description": "Denomination of the cryptocurrency Cosmos.",
                      "pattern": "^[1-9]\\d+$",
                      "example": "100"
                    },
                    "amount": {
                      "type": "string",
                      "pattern": "^[1-9]\\d+$",
                      "example": "123456"
                    },
                    "wallets": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Amount per wallet",
                        "required": [
                          "wallet",
                          "amount",
                          "validator"
                        ],
                        "properties": {
                          "wallet": {
                            "type": "string"
                          },
                          "amount": {
                            "type": "string",
                            "pattern": "^[1-9]\\d+$"
                          },
                          "validator": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/cosmos/{network}/rewards/withdrawable-amount": {
      "parameters": [
        {
          "name": "network",
          "in": "path",
          "description": "Cosmos network",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Cosmos network",
            "enum": [
              "mainnet",
              "testnet"
            ]
          }
        },
        {
          "name": "wallets",
          "description": "Array of Cosmos wallets",
          "in": "query",
          "required": false,
          "schema": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Public Key of an asymmetric key-pair.",
              "format": "bech32",
              "pattern": "^cosmos[1-9a-zA-Z]{39}$",
              "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
            }
          }
        }
      ],
      "get": {
        "summary": "Get Withdrawable Rewards Amount",
        "operationId": "getCosmosWithdrawableRewardsAmount",
        "tags": [
          "Cosmos"
        ],
        "description": "Returns the total accumulated rewards amount that can be withdrawn across all wallets of the user.\n\nYou can specify the optional `wallets` parameter to get the total accumulated rewards amount in specific wallets.",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "The withdrawable rewards amount",
                  "required": [
                    "protocol",
                    "network",
                    "amount",
                    "currency"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Cosmos protocol",
                      "enum": [
                        "cosmos"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "Cosmos network",
                      "enum": [
                        "mainnet",
                        "testnet"
                      ]
                    },
                    "currency": {
                      "type": "string",
                      "description": "Denomination of the cryptocurrency Cosmos.",
                      "pattern": "^[1-9]\\d+$",
                      "example": "100"
                    },
                    "amount": {
                      "type": "string",
                      "pattern": "^[1-9]\\d+$",
                      "example": "123456"
                    },
                    "wallets": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Amount per wallet",
                        "required": [
                          "wallet",
                          "amount",
                          "validator"
                        ],
                        "properties": {
                          "wallet": {
                            "type": "string"
                          },
                          "amount": {
                            "type": "string",
                            "pattern": "^[1-9]\\d+$"
                          },
                          "validator": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/cosmos/{network}/restake-intents": {
      "parameters": [
        {
          "name": "network",
          "in": "path",
          "description": "Cosmos network",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Cosmos network",
            "enum": [
              "mainnet",
              "testnet"
            ]
          }
        }
      ],
      "post": {
        "summary": "Post restake Intent",
        "operationId": "postCosmosRestakeIntent",
        "tags": [
          "Cosmos"
        ],
        "description": "Create transaction to move given amount of ATOMs from one validator to another.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Request object to create a new restake intent for Cosmos.",
                "required": [
                  "delegator_address",
                  "old_validator_address",
                  "amount"
                ],
                "properties": {
                  "delegator_address": {
                    "type": "string",
                    "description": "Public Key of an asymmetric key-pair.",
                    "format": "bech32",
                    "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                    "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                  },
                  "old_validator_address": {
                    "type": "string",
                    "description": "Public Key of an asymmetric key-pair.",
                    "format": "bech32",
                    "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                    "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                  },
                  "amount": {
                    "type": "string",
                    "description": "Denomination of the cryptocurrency Cosmos.",
                    "pattern": "^[1-9]\\d+$",
                    "example": "100"
                  },
                  "plan_id": {
                    "type": "string",
                    "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                    "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Restake intent created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "restake_intent_id",
                        "customer_id"
                      ],
                      "properties": {
                        "restake_intent_id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "Unique idenifier for a restake intent.",
                          "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                        },
                        "customer_id": {
                          "type": "string",
                          "description": "Unique identifier for a customer",
                          "example": "SatoshiNakamoto-xUYJbPw9hw",
                          "minimum": 1
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Request object to create a new restake intent.",
                      "required": [
                        "protocol",
                        "network"
                      ],
                      "properties": {
                        "protocol": {
                          "type": "string",
                          "description": "Blockchain protocol.",
                          "enum": [
                            "ethereum",
                            "polkadot",
                            "solana",
                            "cosmos",
                            "polygon",
                            "near",
                            "cardano",
                            "avalanche",
                            "binance"
                          ]
                        },
                        "network": {
                          "type": "string",
                          "description": "Protocol-specific network.",
                          "enum": [
                            "mainnet",
                            "localnet",
                            "goerli",
                            "prater",
                            "holesky",
                            "testnet",
                            "devnet",
                            "kusama",
                            "westend",
                            "preprod",
                            "fuji",
                            "local"
                          ]
                        },
                        "cosmos": {
                          "type": "object",
                          "description": "Cosmos Restake Intent",
                          "required": [
                            "unsigned_transaction",
                            "delegator_address",
                            "old_validator_address",
                            "new_validator_address",
                            "amount"
                          ],
                          "properties": {
                            "unsigned_transaction": {
                              "type": "string",
                              "format": "base64",
                              "description": "Generated unsigned transaction smart contract call data.",
                              "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                            },
                            "delegator_address": {
                              "type": "string",
                              "description": "Public Key of an asymmetric key-pair.",
                              "format": "bech32",
                              "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                              "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                            },
                            "old_validator_address": {
                              "type": "string",
                              "description": "Public Key of an asymmetric key-pair.",
                              "format": "bech32",
                              "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                              "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                            },
                            "new_validator_address": {
                              "type": "string",
                              "description": "Public Key of an asymmetric key-pair.",
                              "format": "bech32",
                              "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                              "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                            },
                            "amount": {
                              "type": "string",
                              "description": "Denomination of the cryptocurrency Cosmos.",
                              "pattern": "^[1-9]\\d+$",
                              "example": "100"
                            }
                          }
                        },
                        "binance": {
                          "type": "object",
                          "description": "Binance Restake Intent",
                          "required": [
                            "unsigned_transaction",
                            "delegator_address",
                            "old_validator_address",
                            "new_validator_address",
                            "amount"
                          ],
                          "properties": {
                            "unsigned_transaction": {
                              "type": "string",
                              "format": "base64",
                              "description": "Generated unsigned transaction smart contract call data.",
                              "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                            },
                            "delegator_address": {
                              "type": "string",
                              "description": "Binance beacon chain address.",
                              "format": "bech32",
                              "pattern": "^bnb[0-9a-z]+$",
                              "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
                            },
                            "old_validator_address": {
                              "type": "string",
                              "description": "Binance beacon chain validator address.",
                              "format": "bech32",
                              "pattern": "^bva[0-9a-zA-Z]*$",
                              "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                            },
                            "new_validator_address": {
                              "type": "string",
                              "description": "Binance beacon chain validator address.",
                              "format": "bech32",
                              "pattern": "^bva[0-9a-zA-Z]*$",
                              "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                            },
                            "amount": {
                              "type": "string",
                              "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
                              "pattern": "^[1-9]\\d+$",
                              "example": "10000000000"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "get": {
        "summary": "Lists Restake Intents",
        "operationId": "getCosmosRestakeIntents",
        "tags": [
          "Cosmos"
        ],
        "description": "List restake intents",
        "responses": {
          "200": {
            "description": "Restake intents listed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Restake intents",
                  "required": [
                    "protocol",
                    "network",
                    "customer_id"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Blockchain protocol.",
                      "enum": [
                        "ethereum",
                        "polkadot",
                        "solana",
                        "cosmos",
                        "polygon",
                        "near",
                        "cardano",
                        "avalanche",
                        "binance"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "Protocol-specific network.",
                      "enum": [
                        "mainnet",
                        "localnet",
                        "goerli",
                        "prater",
                        "holesky",
                        "testnet",
                        "devnet",
                        "kusama",
                        "westend",
                        "preprod",
                        "fuji",
                        "local"
                      ]
                    },
                    "cosmos": {
                      "type": "array",
                      "description": "List of restake intents",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "restake_intent_id",
                              "customer_id"
                            ],
                            "properties": {
                              "restake_intent_id": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Unique idenifier for a restake intent.",
                                "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                              },
                              "customer_id": {
                                "type": "string",
                                "description": "Unique identifier for a customer",
                                "example": "SatoshiNakamoto-xUYJbPw9hw",
                                "minimum": 1
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Response to a new restake intent request.",
                            "required": [
                              "protocol",
                              "network",
                              "cosmos"
                            ],
                            "properties": {
                              "protocol": {
                                "type": "string",
                                "description": "Cosmos protocol",
                                "enum": [
                                  "cosmos"
                                ]
                              },
                              "network": {
                                "type": "string",
                                "description": "Cosmos network",
                                "enum": [
                                  "mainnet",
                                  "testnet"
                                ]
                              },
                              "cosmos": {
                                "type": "object",
                                "description": "Cosmos Restake Intent",
                                "required": [
                                  "unsigned_transaction",
                                  "delegator_address",
                                  "old_validator_address",
                                  "new_validator_address",
                                  "amount"
                                ],
                                "properties": {
                                  "unsigned_transaction": {
                                    "type": "string",
                                    "format": "base64",
                                    "description": "Generated unsigned transaction smart contract call data.",
                                    "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                                  },
                                  "delegator_address": {
                                    "type": "string",
                                    "description": "Public Key of an asymmetric key-pair.",
                                    "format": "bech32",
                                    "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                                    "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                                  },
                                  "old_validator_address": {
                                    "type": "string",
                                    "description": "Public Key of an asymmetric key-pair.",
                                    "format": "bech32",
                                    "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                                    "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                                  },
                                  "new_validator_address": {
                                    "type": "string",
                                    "description": "Public Key of an asymmetric key-pair.",
                                    "format": "bech32",
                                    "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                                    "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                                  },
                                  "amount": {
                                    "type": "string",
                                    "description": "Denomination of the cryptocurrency Cosmos.",
                                    "pattern": "^[1-9]\\d+$",
                                    "example": "100"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "binance": {
                      "type": "array",
                      "description": "List of restake intents",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "restake_intent_id",
                              "customer_id"
                            ],
                            "properties": {
                              "restake_intent_id": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Unique idenifier for a restake intent.",
                                "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                              },
                              "customer_id": {
                                "type": "string",
                                "description": "Unique identifier for a customer",
                                "example": "SatoshiNakamoto-xUYJbPw9hw",
                                "minimum": 1
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Response to a new restake intent request.",
                            "required": [
                              "protocol",
                              "network",
                              "binance"
                            ],
                            "properties": {
                              "protocol": {
                                "type": "string",
                                "description": "Binance beacon chain protocol",
                                "enum": [
                                  "binance"
                                ]
                              },
                              "network": {
                                "type": "string",
                                "description": "Binance beacon chain network",
                                "enum": [
                                  "mainnet",
                                  "testnet"
                                ]
                              },
                              "binance": {
                                "type": "object",
                                "description": "Binance Restake Intent",
                                "required": [
                                  "unsigned_transaction",
                                  "delegator_address",
                                  "old_validator_address",
                                  "new_validator_address",
                                  "amount"
                                ],
                                "properties": {
                                  "unsigned_transaction": {
                                    "type": "string",
                                    "format": "base64",
                                    "description": "Generated unsigned transaction smart contract call data.",
                                    "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                                  },
                                  "delegator_address": {
                                    "type": "string",
                                    "description": "Binance beacon chain address.",
                                    "format": "bech32",
                                    "pattern": "^bnb[0-9a-z]+$",
                                    "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
                                  },
                                  "old_validator_address": {
                                    "type": "string",
                                    "description": "Binance beacon chain validator address.",
                                    "format": "bech32",
                                    "pattern": "^bva[0-9a-zA-Z]*$",
                                    "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                                  },
                                  "new_validator_address": {
                                    "type": "string",
                                    "description": "Binance beacon chain validator address.",
                                    "format": "bech32",
                                    "pattern": "^bva[0-9a-zA-Z]*$",
                                    "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                                  },
                                  "amount": {
                                    "type": "string",
                                    "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
                                    "pattern": "^[1-9]\\d+$",
                                    "example": "10000000000"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "Unique identifier for a customer",
                      "example": "SatoshiNakamoto-xUYJbPw9hw",
                      "minimum": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/binance/{network}/stake-intents": {
      "parameters": [
        {
          "name": "network",
          "in": "path",
          "description": "Binance network",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Binance beacon chain network",
            "enum": [
              "mainnet",
              "testnet"
            ]
          }
        },
        {
          "in": "header",
          "name": "Idempotency-Key",
          "description": "the unique idempotency key for this request",
          "example": "f1c971b4-7114-4c4b-8ad2-a6f9e33e2cd0",
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "required": false
        }
      ],
      "post": {
        "summary": "Post Stake Intent",
        "operationId": "postBinanceStakeIntent",
        "tags": [
          "Binance"
        ],
        "description": "Blockdaemon reserves the right to free any allocated resources if the transaction is not confirmed in time.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Individual binance stake",
                "required": [
                  "amount",
                  "delegator_address"
                ],
                "properties": {
                  "amount": {
                    "type": "string",
                    "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
                    "pattern": "^[1-9]\\d+$",
                    "example": "10000000000"
                  },
                  "delegator_address": {
                    "type": "string",
                    "description": "Binance beacon chain address.",
                    "format": "bech32",
                    "pattern": "^bnb[0-9a-z]+$",
                    "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
                  },
                  "plan_id": {
                    "type": "string",
                    "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                    "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "stake_intent_id",
                        "customer_id"
                      ],
                      "properties": {
                        "stake_intent_id": {
                          "type": "string",
                          "format": "base58",
                          "description": "Unique idenifier for a group of stakes.",
                          "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
                        },
                        "customer_id": {
                          "type": "string",
                          "description": "Unique identifier for a customer",
                          "example": "SatoshiNakamoto-xUYJbPw9hw",
                          "minimum": 1
                        },
                        "plan_id": {
                          "type": "string",
                          "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                          "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "protocol",
                        "network",
                        "binance"
                      ],
                      "properties": {
                        "protocol": {
                          "type": "string",
                          "description": "Binance beacon chain protocol",
                          "enum": [
                            "binance"
                          ]
                        },
                        "network": {
                          "type": "string",
                          "description": "Binance beacon chain network",
                          "enum": [
                            "mainnet",
                            "testnet"
                          ]
                        },
                        "binance": {
                          "type": "object",
                          "description": "Binance Stake Intent response",
                          "required": [
                            "unsigned_transaction",
                            "amount",
                            "delegator_address",
                            "validator_address"
                          ],
                          "properties": {
                            "unsigned_transaction": {
                              "type": "string",
                              "format": "base64",
                              "description": "Generated unsigned transaction smart contract call data.",
                              "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                            },
                            "delegator_address": {
                              "type": "string",
                              "description": "Binance beacon chain address.",
                              "format": "bech32",
                              "pattern": "^bnb[0-9a-z]+$",
                              "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
                            },
                            "validator_address": {
                              "type": "string",
                              "description": "Binance beacon chain validator address.",
                              "format": "bech32",
                              "pattern": "^bva[0-9a-zA-Z]*$",
                              "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                            },
                            "amount": {
                              "type": "string",
                              "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
                              "pattern": "^[1-9]\\d+$",
                              "example": "10000000000"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Insufficient validators available to process Stake Intent request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/binance/{network}/deactivation-intents": {
      "parameters": [
        {
          "name": "network",
          "in": "path",
          "description": "Binance network",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Binance beacon chain network",
            "enum": [
              "mainnet",
              "testnet"
            ]
          }
        }
      ],
      "post": {
        "summary": "Post Deactivation Intent",
        "operationId": "postBinanceDeactivationIntent",
        "tags": [
          "Binance"
        ],
        "description": "Create transaction to undelegate given amount of BNB from a validator.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Request object to create a new deactivation intent for Binance.",
                "required": [
                  "delegator_address",
                  "amount"
                ],
                "properties": {
                  "delegator_address": {
                    "type": "string",
                    "description": "Binance beacon chain address.",
                    "format": "bech32",
                    "pattern": "^bnb[0-9a-z]+$",
                    "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
                  },
                  "amount": {
                    "type": "string",
                    "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
                    "pattern": "^[1-9]\\d+$",
                    "example": "10000000000"
                  },
                  "plan_id": {
                    "type": "string",
                    "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                    "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "deactivate_intent_id",
                        "customer_id"
                      ],
                      "properties": {
                        "deactivate_intent_id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "Unique idenifier for deactivate intent.",
                          "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                        },
                        "customer_id": {
                          "type": "string",
                          "description": "Unique identifier for a customer",
                          "example": "SatoshiNakamoto-xUYJbPw9hw",
                          "minimum": 1
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Response to a new deactivation intent request.",
                      "required": [
                        "protocol",
                        "network",
                        "binance"
                      ],
                      "properties": {
                        "protocol": {
                          "type": "string",
                          "description": "Binance beacon chain protocol",
                          "enum": [
                            "binance"
                          ]
                        },
                        "network": {
                          "type": "string",
                          "description": "Binance beacon chain network",
                          "enum": [
                            "mainnet",
                            "testnet"
                          ]
                        },
                        "binance": {
                          "type": "object",
                          "description": "Binance Deactivate Intent",
                          "required": [
                            "unsigned_transaction",
                            "delegator_address",
                            "validator_address",
                            "amount"
                          ],
                          "properties": {
                            "unsigned_transaction": {
                              "type": "string",
                              "format": "base64",
                              "description": "Generated unsigned transaction smart contract call data.",
                              "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                            },
                            "delegator_address": {
                              "type": "string",
                              "description": "Binance beacon chain address.",
                              "format": "bech32",
                              "pattern": "^bnb[0-9a-z]+$",
                              "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
                            },
                            "validator_address": {
                              "type": "string",
                              "description": "Binance beacon chain validator address.",
                              "format": "bech32",
                              "pattern": "^bva[0-9a-zA-Z]*$",
                              "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                            },
                            "amount": {
                              "type": "string",
                              "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
                              "pattern": "^[1-9]\\d+$",
                              "example": "10000000000"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "get": {
        "summary": "Lists Deactivation Intents",
        "operationId": "getBinanceDeactivationIntents",
        "tags": [
          "Binance"
        ],
        "description": "Retrieve a list of deactivation intents.",
        "responses": {
          "200": {
            "description": "Deactivation intents listed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Deactivation intents",
                  "required": [
                    "protocol",
                    "network",
                    "customer_id"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Blockchain protocol.",
                      "enum": [
                        "ethereum",
                        "polkadot",
                        "solana",
                        "cosmos",
                        "polygon",
                        "near",
                        "cardano",
                        "avalanche",
                        "binance"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "Protocol-specific network.",
                      "enum": [
                        "mainnet",
                        "localnet",
                        "goerli",
                        "prater",
                        "holesky",
                        "testnet",
                        "devnet",
                        "kusama",
                        "westend",
                        "preprod",
                        "fuji",
                        "local"
                      ]
                    },
                    "polygon": {
                      "type": "object",
                      "required": [
                        "items",
                        "wallet_address"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "description": "Unbond information",
                            "required": [
                              "nonce",
                              "amount",
                              "withdraw_epoch"
                            ],
                            "properties": {
                              "nonce": {
                                "type": "integer",
                                "description": "Number for one use only",
                                "example": 1
                              },
                              "amount": {
                                "type": "string",
                                "description": "Denomination of the cryptocurrency Polygon.",
                                "pattern": "^[1-9]\\d+$",
                                "example": "100"
                              },
                              "withdraw_epoch": {
                                "type": "integer"
                              }
                            }
                          }
                        },
                        "wallet_address": {
                          "type": "string",
                          "description": "Hex-encoded Ethereum [account or smart contract address](https://ethereum.org/en/developers/docs/accounts/).",
                          "format": "hex",
                          "pattern": "^0x[a-fA-F0-9]{40}$",
                          "example": "0x00000000219ab540356cBB839Cbe05303d7705Fa"
                        }
                      }
                    },
                    "solana": {
                      "description": "List of deactivation intents",
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "deactivate_intent_id",
                              "customer_id"
                            ],
                            "properties": {
                              "deactivate_intent_id": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Unique idenifier for deactivate intent.",
                                "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                              },
                              "customer_id": {
                                "type": "string",
                                "description": "Unique identifier for a customer",
                                "example": "SatoshiNakamoto-xUYJbPw9hw",
                                "minimum": 1
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Response to a new deactivation intent request.",
                            "required": [
                              "network",
                              "protocol",
                              "solana"
                            ],
                            "properties": {
                              "protocol": {
                                "type": "string",
                                "description": "Solana protocol",
                                "enum": [
                                  "solana"
                                ]
                              },
                              "network": {
                                "type": "string",
                                "description": "Solana network",
                                "enum": [
                                  "mainnet",
                                  "testnet"
                                ]
                              },
                              "solana": {
                                "type": "object",
                                "description": "Result of the new Deactivate Intent request.",
                                "required": [
                                  "total_deactivated_amount",
                                  "deactivates",
                                  "splits"
                                ],
                                "properties": {
                                  "deactivates": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "description": "Result of the deactivation transaction request",
                                      "required": [
                                        "unsigned_transaction",
                                        "stake_account_authority",
                                        "stake_account_address",
                                        "withdrawal_authority",
                                        "stake_id",
                                        "amount",
                                        "expiration_time"
                                      ],
                                      "properties": {
                                        "unsigned_transaction": {
                                          "type": "string",
                                          "format": "base64",
                                          "description": "Generated unsigned transaction smart contract call data.",
                                          "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                                        },
                                        "stake_account_authority": {
                                          "type": "string",
                                          "description": "Public Key of an asymmetric key-pair.",
                                          "format": "base58",
                                          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                        },
                                        "stake_account_address": {
                                          "type": "string",
                                          "description": "Public Key of an asymmetric key-pair.",
                                          "format": "base58",
                                          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                        },
                                        "withdrawal_authority": {
                                          "type": "string",
                                          "description": "Public Key of an asymmetric key-pair.",
                                          "format": "base58",
                                          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                        },
                                        "stake_id": {
                                          "description": "Unique stake identifier.",
                                          "type": "string",
                                          "format": "base58",
                                          "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                                        },
                                        "amount": {
                                          "type": "string",
                                          "description": "Denomination of the cryptocurrency Solana.",
                                          "pattern": "^[1-9]\\d+$",
                                          "example": "100"
                                        },
                                        "expiration_time": {
                                          "type": "integer",
                                          "description": "Transaction expiration time",
                                          "format": "int64",
                                          "example": 1689939023
                                        }
                                      }
                                    }
                                  },
                                  "splits": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "description": "Result of the split transaction request",
                                      "required": [
                                        "unsigned_transaction",
                                        "stake_account_authority",
                                        "new_stake_account_address",
                                        "new_stake_id",
                                        "splitted_stake_account_address",
                                        "splitted_stake_id",
                                        "amount"
                                      ],
                                      "properties": {
                                        "unsigned_transaction": {
                                          "type": "string",
                                          "format": "base64",
                                          "description": "Generated unsigned transaction smart contract call data.",
                                          "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                                        },
                                        "stake_account_authority": {
                                          "type": "string",
                                          "description": "Public Key of an asymmetric key-pair.",
                                          "format": "base58",
                                          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                        },
                                        "new_stake_account_address": {
                                          "type": "string",
                                          "description": "Public Key of an asymmetric key-pair.",
                                          "format": "base58",
                                          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                        },
                                        "new_stake_id": {
                                          "description": "Unique stake identifier.",
                                          "type": "string",
                                          "format": "base58",
                                          "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                                        },
                                        "splitted_stake_account_address": {
                                          "type": "string",
                                          "description": "Public Key of an asymmetric key-pair.",
                                          "format": "base58",
                                          "pattern": "^[1-9A-HJ-NP-Za-km-z]{44}$",
                                          "example": "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj"
                                        },
                                        "splitted_stake_id": {
                                          "description": "Unique stake identifier.",
                                          "type": "string",
                                          "format": "base58",
                                          "example": "stake_Wgx98Rbi8nQuL9ddn3mTk1"
                                        },
                                        "amount": {
                                          "type": "string",
                                          "description": "Denomination of the cryptocurrency Solana.",
                                          "pattern": "^[1-9]\\d+$",
                                          "example": "100"
                                        }
                                      }
                                    }
                                  },
                                  "total_deactivated_amount": {
                                    "type": "string",
                                    "description": "Denomination of the cryptocurrency Solana.",
                                    "pattern": "^[1-9]\\d+$",
                                    "example": "100"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "near": {
                      "type": "array",
                      "description": "List of deactivation intents",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "deactivate_intent_id",
                              "customer_id"
                            ],
                            "properties": {
                              "deactivate_intent_id": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Unique idenifier for deactivate intent.",
                                "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                              },
                              "customer_id": {
                                "type": "string",
                                "description": "Unique identifier for a customer",
                                "example": "SatoshiNakamoto-xUYJbPw9hw",
                                "minimum": 1
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Response to a new deactivation intent request.",
                            "required": [
                              "protocol",
                              "network",
                              "near"
                            ],
                            "properties": {
                              "protocol": {
                                "type": "string",
                                "description": "Near protocol",
                                "enum": [
                                  "near"
                                ]
                              },
                              "network": {
                                "type": "string",
                                "description": "NEAR network",
                                "enum": [
                                  "mainnet",
                                  "testnet",
                                  "localnet"
                                ]
                              },
                              "near": {
                                "type": "object",
                                "description": "NEAR Protocol Deactivate Intent",
                                "required": [
                                  "to",
                                  "unsigned_transaction",
                                  "amount",
                                  "wallet_address",
                                  "public_key",
                                  "expiration_time"
                                ],
                                "properties": {
                                  "to": {
                                    "type": "string",
                                    "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                                    "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                                    "example": "alice.near"
                                  },
                                  "unsigned_transaction": {
                                    "type": "string",
                                    "format": "base64",
                                    "description": "Generated unsigned transaction smart contract call data.",
                                    "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                                  },
                                  "amount": {
                                    "type": "string",
                                    "description": "Denomination of NEAR Protocol.",
                                    "pattern": "^[1-9]\\d+$",
                                    "example": "100000000000000000000000000"
                                  },
                                  "wallet_address": {
                                    "type": "string",
                                    "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                                    "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                                    "example": "alice.near"
                                  },
                                  "public_key": {
                                    "type": "string",
                                    "description": "Base58 encoded public key prefixed by ed25519, associated with the private key that will be used to sign the transaction.",
                                    "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
                                    "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
                                  },
                                  "expiration_time": {
                                    "type": "integer",
                                    "description": "Transaction expiration time",
                                    "format": "int64",
                                    "example": 1689939023
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "cardano": {
                      "type": "array",
                      "description": "List of deactivation intents",
                      "items": {
                        "type": "object",
                        "description": "Cardano Protocol Deactivate Intent",
                        "required": [
                          "deactivate_intent_id",
                          "base_address",
                          "unsigned_transaction"
                        ],
                        "properties": {
                          "deactivate_intent_id": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Unique idenifier for deactivate intent.",
                            "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                          },
                          "base_address": {
                            "type": "string",
                            "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
                            "format": "bech32",
                            "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
                          },
                          "unsigned_transaction": {
                            "type": "string",
                            "format": "base64",
                            "description": "Generated unsigned transaction smart contract call data.",
                            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                          }
                        }
                      }
                    },
                    "cosmos": {
                      "type": "array",
                      "description": "List of deactivation intents",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "deactivate_intent_id",
                              "customer_id"
                            ],
                            "properties": {
                              "deactivate_intent_id": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Unique idenifier for deactivate intent.",
                                "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                              },
                              "customer_id": {
                                "type": "string",
                                "description": "Unique identifier for a customer",
                                "example": "SatoshiNakamoto-xUYJbPw9hw",
                                "minimum": 1
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Response to a new deactivation intent request.",
                            "required": [
                              "protocol",
                              "network",
                              "cosmos"
                            ],
                            "properties": {
                              "protocol": {
                                "type": "string",
                                "description": "Cosmos protocol",
                                "enum": [
                                  "cosmos"
                                ]
                              },
                              "network": {
                                "type": "string",
                                "description": "Cosmos network",
                                "enum": [
                                  "mainnet",
                                  "testnet"
                                ]
                              },
                              "cosmos": {
                                "type": "object",
                                "description": "Cosmos Deactivate Intent",
                                "required": [
                                  "unsigned_transaction",
                                  "delegator_address",
                                  "validator_address",
                                  "amount"
                                ],
                                "properties": {
                                  "unsigned_transaction": {
                                    "type": "string",
                                    "format": "base64",
                                    "description": "Generated unsigned transaction smart contract call data.",
                                    "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                                  },
                                  "delegator_address": {
                                    "type": "string",
                                    "description": "Public Key of an asymmetric key-pair.",
                                    "format": "bech32",
                                    "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                                    "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                                  },
                                  "validator_address": {
                                    "type": "string",
                                    "description": "Public Key of an asymmetric key-pair.",
                                    "format": "bech32",
                                    "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                                    "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                                  },
                                  "amount": {
                                    "type": "string",
                                    "description": "Denomination of the cryptocurrency Cosmos.",
                                    "pattern": "^[1-9]\\d+$",
                                    "example": "100"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "binance": {
                      "type": "array",
                      "description": "List of deactivation intents",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "deactivate_intent_id",
                              "customer_id"
                            ],
                            "properties": {
                              "deactivate_intent_id": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Unique idenifier for deactivate intent.",
                                "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                              },
                              "customer_id": {
                                "type": "string",
                                "description": "Unique identifier for a customer",
                                "example": "SatoshiNakamoto-xUYJbPw9hw",
                                "minimum": 1
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Response to a new deactivation intent request.",
                            "required": [
                              "protocol",
                              "network",
                              "binance"
                            ],
                            "properties": {
                              "protocol": {
                                "type": "string",
                                "description": "Binance beacon chain protocol",
                                "enum": [
                                  "binance"
                                ]
                              },
                              "network": {
                                "type": "string",
                                "description": "Binance beacon chain network",
                                "enum": [
                                  "mainnet",
                                  "testnet"
                                ]
                              },
                              "binance": {
                                "type": "object",
                                "description": "Binance Deactivate Intent",
                                "required": [
                                  "unsigned_transaction",
                                  "delegator_address",
                                  "validator_address",
                                  "amount"
                                ],
                                "properties": {
                                  "unsigned_transaction": {
                                    "type": "string",
                                    "format": "base64",
                                    "description": "Generated unsigned transaction smart contract call data.",
                                    "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                                  },
                                  "delegator_address": {
                                    "type": "string",
                                    "description": "Binance beacon chain address.",
                                    "format": "bech32",
                                    "pattern": "^bnb[0-9a-z]+$",
                                    "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
                                  },
                                  "validator_address": {
                                    "type": "string",
                                    "description": "Binance beacon chain validator address.",
                                    "format": "bech32",
                                    "pattern": "^bva[0-9a-zA-Z]*$",
                                    "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                                  },
                                  "amount": {
                                    "type": "string",
                                    "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
                                    "pattern": "^[1-9]\\d+$",
                                    "example": "10000000000"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "Unique identifier for a customer",
                      "example": "SatoshiNakamoto-xUYJbPw9hw",
                      "minimum": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/binance/{network}/deactivatable-amount": {
      "parameters": [
        {
          "name": "network",
          "in": "path",
          "description": "Binance network",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Binance beacon chain network",
            "enum": [
              "mainnet",
              "testnet"
            ]
          }
        },
        {
          "name": "wallets",
          "description": "Array of Binance wallets",
          "in": "query",
          "required": false,
          "schema": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Binance beacon chain address.",
              "format": "bech32",
              "pattern": "^bnb[0-9a-z]+$",
              "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
            }
          }
        }
      ],
      "get": {
        "summary": "Get Deactivatable Amount",
        "operationId": "getBinanceDeactivatableAmount",
        "tags": [
          "Binance"
        ],
        "description": "Returns the total staked amount that can be deactivated across all wallets of the user.\n\nYou can specify the optional `wallets` parameter to get the total deactivatable amount in specific wallets.",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "The deactivatable amount",
                  "required": [
                    "protocol",
                    "network",
                    "amount",
                    "currency"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Binance beacon chain protocol",
                      "enum": [
                        "binance"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "Binance beacon chain network",
                      "enum": [
                        "mainnet",
                        "testnet"
                      ]
                    },
                    "currency": {
                      "type": "string",
                      "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
                      "pattern": "^[1-9]\\d+$",
                      "example": "10000000000"
                    },
                    "amount": {
                      "type": "string",
                      "pattern": "^[1-9]\\d+$",
                      "example": "123456"
                    },
                    "wallets": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Amount per wallet",
                        "required": [
                          "wallet",
                          "amount",
                          "validator"
                        ],
                        "properties": {
                          "wallet": {
                            "type": "string"
                          },
                          "amount": {
                            "type": "string",
                            "pattern": "^[1-9]\\d+$"
                          },
                          "validator": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/binance/{network}/restake-intents": {
      "parameters": [
        {
          "name": "network",
          "in": "path",
          "description": "Binance network",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Binance beacon chain network",
            "enum": [
              "mainnet",
              "testnet"
            ]
          }
        }
      ],
      "post": {
        "summary": "Post restake Intent",
        "operationId": "postBinanceRestakeIntent",
        "tags": [
          "Binance"
        ],
        "description": "Create transaction to move given amount of ATOMs from one validator to another.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Request object to create a new restake intent for Binance.",
                "required": [
                  "delegator_address",
                  "old_validator_address",
                  "amount"
                ],
                "properties": {
                  "delegator_address": {
                    "type": "string",
                    "description": "Binance beacon chain address.",
                    "format": "bech32",
                    "pattern": "^bnb[0-9a-z]+$",
                    "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
                  },
                  "old_validator_address": {
                    "type": "string",
                    "description": "Binance beacon chain validator address.",
                    "format": "bech32",
                    "pattern": "^bva[0-9a-zA-Z]*$",
                    "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                  },
                  "amount": {
                    "type": "string",
                    "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
                    "pattern": "^[1-9]\\d+$",
                    "example": "10000000000"
                  },
                  "plan_id": {
                    "type": "string",
                    "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                    "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Restake intent created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "restake_intent_id",
                        "customer_id"
                      ],
                      "properties": {
                        "restake_intent_id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "Unique idenifier for a restake intent.",
                          "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                        },
                        "customer_id": {
                          "type": "string",
                          "description": "Unique identifier for a customer",
                          "example": "SatoshiNakamoto-xUYJbPw9hw",
                          "minimum": 1
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Request object to create a new restake intent.",
                      "required": [
                        "protocol",
                        "network"
                      ],
                      "properties": {
                        "protocol": {
                          "type": "string",
                          "description": "Blockchain protocol.",
                          "enum": [
                            "ethereum",
                            "polkadot",
                            "solana",
                            "cosmos",
                            "polygon",
                            "near",
                            "cardano",
                            "avalanche",
                            "binance"
                          ]
                        },
                        "network": {
                          "type": "string",
                          "description": "Protocol-specific network.",
                          "enum": [
                            "mainnet",
                            "localnet",
                            "goerli",
                            "prater",
                            "holesky",
                            "testnet",
                            "devnet",
                            "kusama",
                            "westend",
                            "preprod",
                            "fuji",
                            "local"
                          ]
                        },
                        "cosmos": {
                          "type": "object",
                          "description": "Cosmos Restake Intent",
                          "required": [
                            "unsigned_transaction",
                            "delegator_address",
                            "old_validator_address",
                            "new_validator_address",
                            "amount"
                          ],
                          "properties": {
                            "unsigned_transaction": {
                              "type": "string",
                              "format": "base64",
                              "description": "Generated unsigned transaction smart contract call data.",
                              "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                            },
                            "delegator_address": {
                              "type": "string",
                              "description": "Public Key of an asymmetric key-pair.",
                              "format": "bech32",
                              "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                              "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                            },
                            "old_validator_address": {
                              "type": "string",
                              "description": "Public Key of an asymmetric key-pair.",
                              "format": "bech32",
                              "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                              "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                            },
                            "new_validator_address": {
                              "type": "string",
                              "description": "Public Key of an asymmetric key-pair.",
                              "format": "bech32",
                              "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                              "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                            },
                            "amount": {
                              "type": "string",
                              "description": "Denomination of the cryptocurrency Cosmos.",
                              "pattern": "^[1-9]\\d+$",
                              "example": "100"
                            }
                          }
                        },
                        "binance": {
                          "type": "object",
                          "description": "Binance Restake Intent",
                          "required": [
                            "unsigned_transaction",
                            "delegator_address",
                            "old_validator_address",
                            "new_validator_address",
                            "amount"
                          ],
                          "properties": {
                            "unsigned_transaction": {
                              "type": "string",
                              "format": "base64",
                              "description": "Generated unsigned transaction smart contract call data.",
                              "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                            },
                            "delegator_address": {
                              "type": "string",
                              "description": "Binance beacon chain address.",
                              "format": "bech32",
                              "pattern": "^bnb[0-9a-z]+$",
                              "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
                            },
                            "old_validator_address": {
                              "type": "string",
                              "description": "Binance beacon chain validator address.",
                              "format": "bech32",
                              "pattern": "^bva[0-9a-zA-Z]*$",
                              "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                            },
                            "new_validator_address": {
                              "type": "string",
                              "description": "Binance beacon chain validator address.",
                              "format": "bech32",
                              "pattern": "^bva[0-9a-zA-Z]*$",
                              "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                            },
                            "amount": {
                              "type": "string",
                              "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
                              "pattern": "^[1-9]\\d+$",
                              "example": "10000000000"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "get": {
        "summary": "Lists Restake Intents",
        "operationId": "getBinanceRestakeIntents",
        "tags": [
          "Binance"
        ],
        "description": "List restake intents",
        "responses": {
          "200": {
            "description": "Restake intents listed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Restake intents",
                  "required": [
                    "protocol",
                    "network",
                    "customer_id"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Blockchain protocol.",
                      "enum": [
                        "ethereum",
                        "polkadot",
                        "solana",
                        "cosmos",
                        "polygon",
                        "near",
                        "cardano",
                        "avalanche",
                        "binance"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "Protocol-specific network.",
                      "enum": [
                        "mainnet",
                        "localnet",
                        "goerli",
                        "prater",
                        "holesky",
                        "testnet",
                        "devnet",
                        "kusama",
                        "westend",
                        "preprod",
                        "fuji",
                        "local"
                      ]
                    },
                    "cosmos": {
                      "type": "array",
                      "description": "List of restake intents",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "restake_intent_id",
                              "customer_id"
                            ],
                            "properties": {
                              "restake_intent_id": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Unique idenifier for a restake intent.",
                                "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                              },
                              "customer_id": {
                                "type": "string",
                                "description": "Unique identifier for a customer",
                                "example": "SatoshiNakamoto-xUYJbPw9hw",
                                "minimum": 1
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Response to a new restake intent request.",
                            "required": [
                              "protocol",
                              "network",
                              "cosmos"
                            ],
                            "properties": {
                              "protocol": {
                                "type": "string",
                                "description": "Cosmos protocol",
                                "enum": [
                                  "cosmos"
                                ]
                              },
                              "network": {
                                "type": "string",
                                "description": "Cosmos network",
                                "enum": [
                                  "mainnet",
                                  "testnet"
                                ]
                              },
                              "cosmos": {
                                "type": "object",
                                "description": "Cosmos Restake Intent",
                                "required": [
                                  "unsigned_transaction",
                                  "delegator_address",
                                  "old_validator_address",
                                  "new_validator_address",
                                  "amount"
                                ],
                                "properties": {
                                  "unsigned_transaction": {
                                    "type": "string",
                                    "format": "base64",
                                    "description": "Generated unsigned transaction smart contract call data.",
                                    "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                                  },
                                  "delegator_address": {
                                    "type": "string",
                                    "description": "Public Key of an asymmetric key-pair.",
                                    "format": "bech32",
                                    "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                                    "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                                  },
                                  "old_validator_address": {
                                    "type": "string",
                                    "description": "Public Key of an asymmetric key-pair.",
                                    "format": "bech32",
                                    "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                                    "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                                  },
                                  "new_validator_address": {
                                    "type": "string",
                                    "description": "Public Key of an asymmetric key-pair.",
                                    "format": "bech32",
                                    "pattern": "^cosmos[1-9a-zA-Z]{39}$",
                                    "example": "cosmos1wvvhhfm387xvfnqshmdaunnpujjrdxznr5d5x9"
                                  },
                                  "amount": {
                                    "type": "string",
                                    "description": "Denomination of the cryptocurrency Cosmos.",
                                    "pattern": "^[1-9]\\d+$",
                                    "example": "100"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "binance": {
                      "type": "array",
                      "description": "List of restake intents",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "restake_intent_id",
                              "customer_id"
                            ],
                            "properties": {
                              "restake_intent_id": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Unique idenifier for a restake intent.",
                                "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                              },
                              "customer_id": {
                                "type": "string",
                                "description": "Unique identifier for a customer",
                                "example": "SatoshiNakamoto-xUYJbPw9hw",
                                "minimum": 1
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Response to a new restake intent request.",
                            "required": [
                              "protocol",
                              "network",
                              "binance"
                            ],
                            "properties": {
                              "protocol": {
                                "type": "string",
                                "description": "Binance beacon chain protocol",
                                "enum": [
                                  "binance"
                                ]
                              },
                              "network": {
                                "type": "string",
                                "description": "Binance beacon chain network",
                                "enum": [
                                  "mainnet",
                                  "testnet"
                                ]
                              },
                              "binance": {
                                "type": "object",
                                "description": "Binance Restake Intent",
                                "required": [
                                  "unsigned_transaction",
                                  "delegator_address",
                                  "old_validator_address",
                                  "new_validator_address",
                                  "amount"
                                ],
                                "properties": {
                                  "unsigned_transaction": {
                                    "type": "string",
                                    "format": "base64",
                                    "description": "Generated unsigned transaction smart contract call data.",
                                    "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                                  },
                                  "delegator_address": {
                                    "type": "string",
                                    "description": "Binance beacon chain address.",
                                    "format": "bech32",
                                    "pattern": "^bnb[0-9a-z]+$",
                                    "example": "bnb13ym5szfmwh0wz9j8wr2lu2gaml94h895u9el2e"
                                  },
                                  "old_validator_address": {
                                    "type": "string",
                                    "description": "Binance beacon chain validator address.",
                                    "format": "bech32",
                                    "pattern": "^bva[0-9a-zA-Z]*$",
                                    "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                                  },
                                  "new_validator_address": {
                                    "type": "string",
                                    "description": "Binance beacon chain validator address.",
                                    "format": "bech32",
                                    "pattern": "^bva[0-9a-zA-Z]*$",
                                    "example": "bva1mrpf5n5e5knn3z9qng5pnex3m9pvyhg6434j0t"
                                  },
                                  "amount": {
                                    "type": "string",
                                    "description": "The smallest denomination of Binance Coin (BNB) is called Jager. 1 Jager =0.00000001 BNB.",
                                    "pattern": "^[1-9]\\d+$",
                                    "example": "10000000000"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "Unique identifier for a customer",
                      "example": "SatoshiNakamoto-xUYJbPw9hw",
                      "minimum": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/near/{network}/stake-intents": {
      "parameters": [
        {
          "name": "network",
          "in": "path",
          "description": "NEAR network",
          "required": true,
          "schema": {
            "type": "string",
            "description": "NEAR network",
            "enum": [
              "mainnet",
              "testnet",
              "localnet"
            ]
          }
        },
        {
          "in": "header",
          "name": "Idempotency-Key",
          "description": "the unique idempotency key for this request",
          "example": "f1c971b4-7114-4c4b-8ad2-a6f9e33e2cd0",
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "required": false
        }
      ],
      "post": {
        "summary": "Post Stake Intent",
        "operationId": "postNearStakeIntent",
        "tags": [
          "NEAR"
        ],
        "description": "Returns an unsigned transaction that can be used to delegate your tokens to a Blockdaemon validator.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Request object to create a new Stake Intent for NEAR Protocol",
                "required": [
                  "amount",
                  "wallet_address",
                  "public_key"
                ],
                "properties": {
                  "amount": {
                    "type": "string",
                    "description": "Amount of yoctoNEAR to stake. 1 NEAR = 1e24 yoctoNEAR.",
                    "pattern": "^[1-9]\\d+$",
                    "example": "100000000000000000000000000"
                  },
                  "wallet_address": {
                    "type": "string",
                    "description": "Account to stake from (can be either [named account or implicit account](https://docs.near.org/concepts/basics/accounts/account-id/))",
                    "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                    "example": "alice.near"
                  },
                  "public_key": {
                    "type": "string",
                    "description": "Must be the public key of the private key that will be used to sign the returned transaction. The public key must also be added as [FullAccess](https://docs.near.org/concepts/basics/accounts/access-keys#full-access-keys) key to the `wallet_address` account.",
                    "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
                    "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
                  },
                  "to": {
                    "type": "string",
                    "description": "Specifies validator to delegate to. Please note that specifying this parameter is only allowed for the `testnet` network.",
                    "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                    "example": "alice.near"
                  },
                  "plan_id": {
                    "type": "string",
                    "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                    "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "stake_intent_id",
                        "customer_id"
                      ],
                      "properties": {
                        "stake_intent_id": {
                          "type": "string",
                          "format": "base58",
                          "description": "Unique idenifier for a group of stakes.",
                          "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
                        },
                        "customer_id": {
                          "type": "string",
                          "description": "Unique identifier for a customer",
                          "example": "SatoshiNakamoto-xUYJbPw9hw",
                          "minimum": 1
                        },
                        "plan_id": {
                          "type": "string",
                          "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                          "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "protocol",
                        "network"
                      ],
                      "properties": {
                        "protocol": {
                          "type": "string",
                          "description": "Near protocol",
                          "enum": [
                            "near"
                          ]
                        },
                        "network": {
                          "type": "string",
                          "description": "NEAR network",
                          "enum": [
                            "mainnet",
                            "testnet",
                            "localnet"
                          ]
                        },
                        "near": {
                          "type": "object",
                          "description": "NEAR Protocol Stake Intent",
                          "required": [
                            "to",
                            "unsigned_transaction",
                            "amount",
                            "wallet_address",
                            "public_key",
                            "expiration_time"
                          ],
                          "properties": {
                            "to": {
                              "type": "string",
                              "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                              "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                              "example": "alice.near"
                            },
                            "unsigned_transaction": {
                              "type": "string",
                              "format": "base64",
                              "description": "Generated unsigned transaction smart contract call data.",
                              "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                            },
                            "amount": {
                              "type": "string",
                              "description": "Denomination of NEAR Protocol.",
                              "pattern": "^[1-9]\\d+$",
                              "example": "100000000000000000000000000"
                            },
                            "wallet_address": {
                              "type": "string",
                              "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                              "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                              "example": "alice.near"
                            },
                            "public_key": {
                              "type": "string",
                              "description": "Base58 encoded public key prefixed by ed25519, associated with the private key that will be used to sign the transaction.",
                              "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
                              "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
                            },
                            "expiration_time": {
                              "type": "integer",
                              "description": "Transaction expiration time",
                              "format": "int64",
                              "example": 1689939023
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Insufficient validators available to process Stake Intent request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/near/{network}/deactivation-intents": {
      "parameters": [
        {
          "name": "network",
          "in": "path",
          "description": "NEAR network",
          "required": true,
          "schema": {
            "type": "string",
            "description": "NEAR network",
            "enum": [
              "mainnet",
              "testnet",
              "localnet"
            ]
          }
        }
      ],
      "post": {
        "summary": "Post Deactivation Intent",
        "operationId": "postNearDeactivationIntent",
        "tags": [
          "NEAR"
        ],
        "description": "Create a transaction for deactivating staked NEAR tokens.\n\nThe Post Deactivation Intent endpoint returns an unsigned transaction, which once signed and broadcasted starts the deactivation process. The process will complete in 4 NEAR epochs (48 hours).\n\nOnce the deactivation countdown is underway, you can still change the deactivated account by generating and broadcasting a new deactivation transaction. Please note that this will reset the countdown.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Request object to create a new deactivation intent for NEAR Protocol.",
                "required": [
                  "amount",
                  "wallet_address",
                  "public_key"
                ],
                "properties": {
                  "amount": {
                    "type": "string",
                    "description": "Amount of yoctoNEAR to deactivate. 1 NEAR = 1e24 yoctoNEAR",
                    "pattern": "^[1-9]\\d+$",
                    "example": "100000000000000000000000000"
                  },
                  "wallet_address": {
                    "type": "string",
                    "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                    "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                    "example": "alice.near"
                  },
                  "public_key": {
                    "type": "string",
                    "description": "Base58 encoded public key prefixed by ed25519, associated with the private key that will be used to sign the transaction.",
                    "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
                    "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
                  },
                  "to": {
                    "type": "string",
                    "description": "Specifies the validator the stake was delegated to. Please note that specifying this parameter is only allowed for the `testnet` network.",
                    "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                    "example": "alice.near"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "deactivate_intent_id",
                        "customer_id"
                      ],
                      "properties": {
                        "deactivate_intent_id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "Unique idenifier for deactivate intent.",
                          "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                        },
                        "customer_id": {
                          "type": "string",
                          "description": "Unique identifier for a customer",
                          "example": "SatoshiNakamoto-xUYJbPw9hw",
                          "minimum": 1
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Response to a new deactivation intent request.",
                      "required": [
                        "protocol",
                        "network",
                        "near"
                      ],
                      "properties": {
                        "protocol": {
                          "type": "string",
                          "description": "Near protocol",
                          "enum": [
                            "near"
                          ]
                        },
                        "network": {
                          "type": "string",
                          "description": "NEAR network",
                          "enum": [
                            "mainnet",
                            "testnet",
                            "localnet"
                          ]
                        },
                        "near": {
                          "type": "object",
                          "description": "NEAR Protocol Deactivate Intent",
                          "required": [
                            "to",
                            "unsigned_transaction",
                            "amount",
                            "wallet_address",
                            "public_key",
                            "expiration_time"
                          ],
                          "properties": {
                            "to": {
                              "type": "string",
                              "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                              "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                              "example": "alice.near"
                            },
                            "unsigned_transaction": {
                              "type": "string",
                              "format": "base64",
                              "description": "Generated unsigned transaction smart contract call data.",
                              "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                            },
                            "amount": {
                              "type": "string",
                              "description": "Denomination of NEAR Protocol.",
                              "pattern": "^[1-9]\\d+$",
                              "example": "100000000000000000000000000"
                            },
                            "wallet_address": {
                              "type": "string",
                              "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                              "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                              "example": "alice.near"
                            },
                            "public_key": {
                              "type": "string",
                              "description": "Base58 encoded public key prefixed by ed25519, associated with the private key that will be used to sign the transaction.",
                              "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
                              "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
                            },
                            "expiration_time": {
                              "type": "integer",
                              "description": "Transaction expiration time",
                              "format": "int64",
                              "example": 1689939023
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "get": {
        "summary": "List Deactivation Intents",
        "operationId": "getNearDeactivationIntents",
        "tags": [
          "NEAR"
        ],
        "description": "Retrieve a list of all outstanding deactivation intents.",
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Deactivation intents",
                  "required": [
                    "protocol",
                    "network",
                    "customer_id"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Near protocol",
                      "enum": [
                        "near"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "NEAR network",
                      "enum": [
                        "mainnet",
                        "testnet",
                        "localnet"
                      ]
                    },
                    "near": {
                      "type": "array",
                      "description": "List of deactivation intents",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "deactivate_intent_id",
                              "customer_id"
                            ],
                            "properties": {
                              "deactivate_intent_id": {
                                "type": "string",
                                "format": "uuid",
                                "description": "Unique idenifier for deactivate intent.",
                                "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                              },
                              "customer_id": {
                                "type": "string",
                                "description": "Unique identifier for a customer",
                                "example": "SatoshiNakamoto-xUYJbPw9hw",
                                "minimum": 1
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Response to a new deactivation intent request.",
                            "required": [
                              "protocol",
                              "network",
                              "near"
                            ],
                            "properties": {
                              "protocol": {
                                "type": "string",
                                "description": "Near protocol",
                                "enum": [
                                  "near"
                                ]
                              },
                              "network": {
                                "type": "string",
                                "description": "NEAR network",
                                "enum": [
                                  "mainnet",
                                  "testnet",
                                  "localnet"
                                ]
                              },
                              "near": {
                                "type": "object",
                                "description": "NEAR Protocol Deactivate Intent",
                                "required": [
                                  "to",
                                  "unsigned_transaction",
                                  "amount",
                                  "wallet_address",
                                  "public_key",
                                  "expiration_time"
                                ],
                                "properties": {
                                  "to": {
                                    "type": "string",
                                    "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                                    "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                                    "example": "alice.near"
                                  },
                                  "unsigned_transaction": {
                                    "type": "string",
                                    "format": "base64",
                                    "description": "Generated unsigned transaction smart contract call data.",
                                    "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                                  },
                                  "amount": {
                                    "type": "string",
                                    "description": "Denomination of NEAR Protocol.",
                                    "pattern": "^[1-9]\\d+$",
                                    "example": "100000000000000000000000000"
                                  },
                                  "wallet_address": {
                                    "type": "string",
                                    "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                                    "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                                    "example": "alice.near"
                                  },
                                  "public_key": {
                                    "type": "string",
                                    "description": "Base58 encoded public key prefixed by ed25519, associated with the private key that will be used to sign the transaction.",
                                    "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
                                    "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
                                  },
                                  "expiration_time": {
                                    "type": "integer",
                                    "description": "Transaction expiration time",
                                    "format": "int64",
                                    "example": 1689939023
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "Unique identifier for a customer",
                      "example": "SatoshiNakamoto-xUYJbPw9hw",
                      "minimum": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "put": {
        "summary": "Cancel Deactivation Intent",
        "operationId": "cancelNearDeactivationIntent",
        "tags": [
          "NEAR"
        ],
        "description": "Cancels a previously issued deactivation intent by specifying its ID.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Intent id.",
                "required": [
                  "intent_id"
                ],
                "properties": {
                  "intent_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique idenifier for deactivate intent.",
                    "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Canceled"
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/near/{network}/deactivatable-amount": {
      "parameters": [
        {
          "name": "network",
          "in": "path",
          "description": "NEAR network",
          "required": true,
          "schema": {
            "type": "string",
            "description": "NEAR network",
            "enum": [
              "mainnet",
              "testnet",
              "localnet"
            ]
          }
        },
        {
          "name": "wallets",
          "description": "Array of NEAR wallets",
          "in": "query",
          "required": false,
          "schema": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
              "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
              "example": "alice.near"
            }
          }
        }
      ],
      "get": {
        "summary": "Get Deactivatable Amount",
        "operationId": "getNearDeactivatableAmount",
        "tags": [
          "NEAR"
        ],
        "description": "Returns the total staked amount that can be deactivated across all wallets of the user.\n\nYou can specify the optional `wallets` parameter to get the total deactivatable amount in specific wallets.",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "The deactivatable amount",
                  "required": [
                    "protocol",
                    "network",
                    "amount",
                    "currency"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Near protocol",
                      "enum": [
                        "near"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "NEAR network",
                      "enum": [
                        "mainnet",
                        "testnet",
                        "localnet"
                      ]
                    },
                    "currency": {
                      "type": "string",
                      "description": "Denomination of NEAR Protocol.",
                      "pattern": "^[1-9]\\d+$",
                      "example": "100000000000000000000000000"
                    },
                    "amount": {
                      "type": "string",
                      "pattern": "^[1-9]\\d+$",
                      "example": "123456"
                    },
                    "wallets": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Amount per wallet",
                        "required": [
                          "wallet",
                          "amount",
                          "validator"
                        ],
                        "properties": {
                          "wallet": {
                            "type": "string"
                          },
                          "amount": {
                            "type": "string",
                            "pattern": "^[1-9]\\d+$"
                          },
                          "validator": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/near/{network}/withdrawal-intents": {
      "parameters": [
        {
          "name": "network",
          "in": "path",
          "description": "NEAR network",
          "required": true,
          "schema": {
            "type": "string",
            "description": "NEAR network",
            "enum": [
              "mainnet",
              "testnet",
              "localnet"
            ]
          }
        }
      ],
      "post": {
        "summary": "Post Withdrawal Intent",
        "operationId": "postNearWithdrawalIntent",
        "tags": [
          "NEAR"
        ],
        "description": "Returns an unsigned transaction that can be used to withdraw your stake after it was deactivated through the [Post Deactivation Intent](https://docs.blockdaemon.com/reference/postneardeactivationintent) endpoint.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Request object to create a new withdrawal intent for NEAR.",
                "required": [
                  "wallet_address",
                  "public_key"
                ],
                "properties": {
                  "wallet_address": {
                    "type": "string",
                    "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                    "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                    "example": "alice.near"
                  },
                  "public_key": {
                    "type": "string",
                    "description": "Base58 encoded public key prefixed by ed25519, associated with the private key that will be used to sign the transaction.",
                    "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
                    "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
                  },
                  "to": {
                    "type": "string",
                    "description": "Specifies the validator the stake was delegated to. Please note that specifying this parameter is only allowed for the `testnet` network.",
                    "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                    "example": "alice.near"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "withdraw_intent_id",
                        "customer_id"
                      ],
                      "properties": {
                        "withdraw_intent_id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "Unique idenifier for a withdrawal intent.",
                          "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                        },
                        "customer_id": {
                          "type": "string",
                          "description": "Unique identifier for a customer",
                          "example": "SatoshiNakamoto-xUYJbPw9hw",
                          "minimum": 1
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Result of a new withdrawal intent request.",
                      "required": [
                        "protocol",
                        "network"
                      ],
                      "properties": {
                        "protocol": {
                          "type": "string",
                          "description": "Near protocol",
                          "enum": [
                            "near"
                          ]
                        },
                        "network": {
                          "type": "string",
                          "description": "NEAR network",
                          "enum": [
                            "mainnet",
                            "testnet",
                            "localnet"
                          ]
                        },
                        "near": {
                          "type": "object",
                          "description": "NEAR Protocol Withdrawal Intent",
                          "required": [
                            "to",
                            "unsigned_transaction",
                            "wallet_address",
                            "public_key",
                            "withdrawal_intent_id",
                            "expiration_time"
                          ],
                          "properties": {
                            "withdrawal_intent_id": {
                              "type": "string",
                              "format": "uuid",
                              "description": "Unique idenifier for deactivate intent.",
                              "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                            },
                            "to": {
                              "type": "string",
                              "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                              "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                              "example": "alice.near"
                            },
                            "unsigned_transaction": {
                              "type": "string",
                              "format": "base64",
                              "description": "Generated unsigned transaction smart contract call data.",
                              "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                            },
                            "amount": {
                              "type": "string",
                              "description": "Denomination of NEAR Protocol.",
                              "pattern": "^[1-9]\\d+$",
                              "example": "100000000000000000000000000"
                            },
                            "wallet_address": {
                              "type": "string",
                              "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                              "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                              "example": "alice.near"
                            },
                            "public_key": {
                              "type": "string",
                              "description": "Base58 encoded public key prefixed by ed25519, associated with the private key that will be used to sign the transaction.",
                              "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
                              "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
                            },
                            "expiration_time": {
                              "type": "integer",
                              "description": "Transaction expiration time",
                              "format": "int64",
                              "example": 1689939023
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "get": {
        "summary": "List Withdrawal Intents",
        "operationId": "getNearWithdrawalIntents",
        "tags": [
          "NEAR"
        ],
        "description": "Retrieve a list of all outstanding withdrawal intents.",
        "responses": {
          "200": {
            "description": "Withdrawal intents listed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Withdrawal intents",
                  "required": [
                    "protocol",
                    "network",
                    "customer_id"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Near protocol",
                      "enum": [
                        "near"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "NEAR network",
                      "enum": [
                        "mainnet",
                        "testnet",
                        "localnet"
                      ]
                    },
                    "near": {
                      "type": "array",
                      "description": "List of withdrawal intents",
                      "items": {
                        "type": "object",
                        "description": "NEAR Protocol Withdrawal Intent",
                        "required": [
                          "to",
                          "unsigned_transaction",
                          "wallet_address",
                          "public_key",
                          "withdrawal_intent_id",
                          "expiration_time"
                        ],
                        "properties": {
                          "withdrawal_intent_id": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Unique idenifier for deactivate intent.",
                            "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                          },
                          "to": {
                            "type": "string",
                            "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                            "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                            "example": "alice.near"
                          },
                          "unsigned_transaction": {
                            "type": "string",
                            "format": "base64",
                            "description": "Generated unsigned transaction smart contract call data.",
                            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                          },
                          "amount": {
                            "type": "string",
                            "description": "Denomination of NEAR Protocol.",
                            "pattern": "^[1-9]\\d+$",
                            "example": "100000000000000000000000000"
                          },
                          "wallet_address": {
                            "type": "string",
                            "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
                            "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
                            "example": "alice.near"
                          },
                          "public_key": {
                            "type": "string",
                            "description": "Base58 encoded public key prefixed by ed25519, associated with the private key that will be used to sign the transaction.",
                            "example": "ed25519:Cxg2wgFYrdLTEkMu6j5D6aEZqTb3kXbmJygS48ZKbo1S",
                            "pattern": "^ed25519:[a-km-zA-HJ-NP-Z1-9]{22,44}$"
                          },
                          "expiration_time": {
                            "type": "integer",
                            "description": "Transaction expiration time",
                            "format": "int64",
                            "example": 1689939023
                          }
                        }
                      }
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "Unique identifier for a customer",
                      "example": "SatoshiNakamoto-xUYJbPw9hw",
                      "minimum": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/near/{network}/withdrawable-amount": {
      "parameters": [
        {
          "name": "network",
          "in": "path",
          "description": "NEAR network",
          "required": true,
          "schema": {
            "type": "string",
            "description": "NEAR network",
            "enum": [
              "mainnet",
              "testnet",
              "localnet"
            ]
          }
        },
        {
          "name": "wallets",
          "description": "Array of NEAR wallets",
          "in": "query",
          "required": false,
          "schema": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Base58 encoded public key or registered named account. [Accounts](https://docs.near.org/concepts/basics/accounts/account-id/).",
              "pattern": "^([a-km-zA-HJ-NP-Z1-9]{22,44})|((([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+)$",
              "example": "alice.near"
            }
          }
        }
      ],
      "get": {
        "summary": "Get Withdrawable Amount",
        "operationId": "getNearWithdrawableAmount",
        "tags": [
          "NEAR"
        ],
        "description": "Returns total amount that can be withdrawn across all wallets of the user.\n\nYou can specify the optional `wallets` parameter to get the total withdrawable amount in specific wallets.",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Result of the get withdrawable amount",
                  "required": [
                    "protocol",
                    "network",
                    "amount",
                    "currency"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Near protocol",
                      "enum": [
                        "near"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "NEAR network",
                      "enum": [
                        "mainnet",
                        "testnet",
                        "localnet"
                      ]
                    },
                    "currency": {
                      "type": "string",
                      "description": "Denomination of NEAR Protocol.",
                      "pattern": "^[1-9]\\d+$",
                      "example": "100000000000000000000000000"
                    },
                    "amount": {
                      "type": "string",
                      "pattern": "^[1-9]\\d+$",
                      "example": "123456"
                    },
                    "wallets": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Amount per wallet",
                        "required": [
                          "wallet",
                          "amount",
                          "validator"
                        ],
                        "properties": {
                          "wallet": {
                            "type": "string"
                          },
                          "amount": {
                            "type": "string",
                            "pattern": "^[1-9]\\d+$"
                          },
                          "validator": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/cardano/{network}/stake-intents": {
      "parameters": [
        {
          "name": "network",
          "in": "path",
          "description": "Cardano network",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Cardano network",
            "enum": [
              "mainnet",
              "preprod",
              "localnet"
            ]
          }
        },
        {
          "in": "header",
          "name": "Idempotency-Key",
          "description": "the unique idempotency key for this request",
          "example": "f1c971b4-7114-4c4b-8ad2-a6f9e33e2cd0",
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "required": false
        }
      ],
      "post": {
        "summary": "Post Stake Intent",
        "operationId": "postCardanoStakeIntent",
        "tags": [
          "Cardano"
        ],
        "description": "Return an unsigned transaction that can be used to stake your tokens with the Blockdaemon staking pool.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Request object to create a new stake intent for Cardano protocol",
                "required": [
                  "base_address"
                ],
                "properties": {
                  "base_address": {
                    "type": "string",
                    "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
                    "format": "bech32",
                    "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
                  },
                  "plan_id": {
                    "type": "string",
                    "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                    "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "stake_intent_id",
                        "customer_id"
                      ],
                      "properties": {
                        "stake_intent_id": {
                          "type": "string",
                          "format": "base58",
                          "description": "Unique idenifier for a group of stakes.",
                          "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
                        },
                        "customer_id": {
                          "type": "string",
                          "description": "Unique identifier for a customer",
                          "example": "SatoshiNakamoto-xUYJbPw9hw",
                          "minimum": 1
                        },
                        "plan_id": {
                          "type": "string",
                          "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                          "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "protocol",
                        "network"
                      ],
                      "properties": {
                        "protocol": {
                          "type": "string",
                          "description": "Cardano protocol",
                          "enum": [
                            "cardano"
                          ]
                        },
                        "network": {
                          "type": "string",
                          "description": "Cardano network",
                          "enum": [
                            "mainnet",
                            "preprod",
                            "localnet"
                          ]
                        },
                        "cardano": {
                          "type": "object",
                          "description": "Cardano Protocol Stake Intent",
                          "required": [
                            "pool_id",
                            "unsigned_transaction",
                            "base_address"
                          ],
                          "properties": {
                            "pool_id": {
                              "type": "string",
                              "description": "bech32 encoded pool id.",
                              "format": "bech32",
                              "example": "pool1ev8fwfccn8gr0zcz3uyps0t0mcrefc6s95wjc6aed3ngc86y5rk"
                            },
                            "unsigned_transaction": {
                              "type": "string",
                              "format": "base64",
                              "description": "Generated unsigned transaction smart contract call data.",
                              "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                            },
                            "base_address": {
                              "type": "string",
                              "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
                              "format": "bech32",
                              "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Insufficient validators available to process Stake Intent request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/cardano/{network}/deactivation-intents": {
      "parameters": [
        {
          "name": "network",
          "in": "path",
          "description": "Cardano network",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Cardano network",
            "enum": [
              "mainnet",
              "preprod",
              "localnet"
            ]
          }
        }
      ],
      "post": {
        "summary": "Post Deactivation Intent",
        "operationId": "postCardanoDeactivationIntent",
        "tags": [
          "Cardano"
        ],
        "description": "Create a transaction for deactivating staked Cardano tokens.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Request object to create a new deactivation intent for Cardano.",
                "required": [
                  "base_address"
                ],
                "properties": {
                  "base_address": {
                    "type": "string",
                    "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
                    "format": "bech32",
                    "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "deactivate_intent_id",
                        "customer_id"
                      ],
                      "properties": {
                        "deactivate_intent_id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "Unique idenifier for deactivate intent.",
                          "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                        },
                        "customer_id": {
                          "type": "string",
                          "description": "Unique identifier for a customer",
                          "example": "SatoshiNakamoto-xUYJbPw9hw",
                          "minimum": 1
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Response to a new deactivation intent request.",
                      "required": [
                        "network",
                        "protocol",
                        "cardano"
                      ],
                      "properties": {
                        "protocol": {
                          "type": "string",
                          "description": "Cardano protocol",
                          "enum": [
                            "cardano"
                          ]
                        },
                        "network": {
                          "type": "string",
                          "description": "Cardano network",
                          "enum": [
                            "mainnet",
                            "preprod",
                            "localnet"
                          ]
                        },
                        "cardano": {
                          "type": "object",
                          "description": "Result of the new Deactivate Intent request.",
                          "required": [
                            "base_address",
                            "unsigned_transaction"
                          ],
                          "properties": {
                            "base_address": {
                              "type": "string",
                              "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
                              "format": "bech32",
                              "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
                            },
                            "unsigned_transaction": {
                              "type": "string",
                              "format": "base64",
                              "description": "Generated unsigned transaction smart contract call data.",
                              "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "get": {
        "summary": "List Deactivation Intents",
        "operationId": "getCardanoDeactivationIntents",
        "tags": [
          "Cardano"
        ],
        "description": "Retrieve a list of all outstanding deactivation intents.",
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Deactivation intents",
                  "required": [
                    "protocol",
                    "network",
                    "customer_id"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Cardano protocol",
                      "enum": [
                        "cardano"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "Cardano network",
                      "enum": [
                        "mainnet",
                        "preprod",
                        "localnet"
                      ]
                    },
                    "cardano": {
                      "type": "array",
                      "description": "List of deactivation intents",
                      "items": {
                        "type": "object",
                        "description": "Cardano Protocol Deactivate Intent",
                        "required": [
                          "deactivate_intent_id",
                          "base_address",
                          "unsigned_transaction"
                        ],
                        "properties": {
                          "deactivate_intent_id": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Unique idenifier for deactivate intent.",
                            "example": "4ba06e89-8c29-483e-ac36-318de5aa7364"
                          },
                          "base_address": {
                            "type": "string",
                            "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
                            "format": "bech32",
                            "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
                          },
                          "unsigned_transaction": {
                            "type": "string",
                            "format": "base64",
                            "description": "Generated unsigned transaction smart contract call data.",
                            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                          }
                        }
                      }
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "Unique identifier for a customer",
                      "example": "SatoshiNakamoto-xUYJbPw9hw",
                      "minimum": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/cardano/{network}/rewards/withdrawal-intents": {
      "parameters": [
        {
          "name": "network",
          "in": "path",
          "description": "Cardano network",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Cardano network",
            "enum": [
              "mainnet",
              "preprod",
              "localnet"
            ]
          }
        }
      ],
      "post": {
        "summary": "Post Rewards Withdrawal Intent",
        "operationId": "postCardanoRewardsWithdrawalIntent",
        "tags": [
          "Cardano"
        ],
        "description": "Creates a new withdrawal intent that withdraws only the accumulated rewards. Staked tokens stay untouched and keep earning rewards.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "description": "Request object to create a new rewards withdrawal intent for Cardano.",
                    "required": [
                      "base_address"
                    ],
                    "properties": {
                      "base_address": {
                        "type": "string",
                        "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
                        "format": "bech32",
                        "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rewards withdrawal intent created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "protocol",
                    "network",
                    "cardano",
                    "customer_id"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Cardano protocol",
                      "enum": [
                        "cardano"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "Cardano network",
                      "enum": [
                        "mainnet",
                        "preprod",
                        "localnet"
                      ]
                    },
                    "cardano": {
                      "type": "object",
                      "required": [
                        "base_address",
                        "rewards_amount",
                        "unsigned_transaction"
                      ],
                      "properties": {
                        "base_address": {
                          "type": "string",
                          "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
                          "format": "bech32",
                          "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
                        },
                        "rewards_amount": {
                          "type": "string",
                          "description": "Denomination of the cryptocurrency Cardano.",
                          "pattern": "^[1-9]\\d+$",
                          "example": "100"
                        },
                        "unsigned_transaction": {
                          "type": "string",
                          "format": "base64",
                          "description": "Generated unsigned transaction smart contract call data.",
                          "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                        }
                      }
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "Unique identifier for a customer",
                      "example": "SatoshiNakamoto-xUYJbPw9hw",
                      "minimum": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "get": {
        "summary": "List Rewards Withdrawal Intents",
        "operationId": "getCardanoRewardsWithdrawalIntents",
        "tags": [
          "Cardano"
        ],
        "description": "Retrieve a list of all outstanding rewards withdrawal intents.",
        "responses": {
          "200": {
            "description": "List of rewards withdraw intents.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Rewards withdrawal intents.",
                  "required": [
                    "protocol",
                    "network",
                    "customer_id"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Cardano protocol",
                      "enum": [
                        "cardano"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "Cardano network",
                      "enum": [
                        "mainnet",
                        "preprod",
                        "localnet"
                      ]
                    },
                    "cardano": {
                      "type": "array",
                      "description": "List of Rewards Withdrawal Intents",
                      "items": {
                        "type": "object",
                        "description": "Cardano Protocol Reward Withdrawal Intent",
                        "required": [
                          "base_address",
                          "rewards_amount",
                          "unsigned_transaction"
                        ],
                        "properties": {
                          "base_address": {
                            "type": "string",
                            "description": "bech32 encoded base address. [Accounts](https://cips.cardano.org/cips/cip19/).",
                            "format": "bech32",
                            "example": "addr1vpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5eg0yu80w"
                          },
                          "rewards_amount": {
                            "type": "string",
                            "description": "Denomination of the cryptocurrency Cardano.",
                            "pattern": "^[1-9]\\d+$",
                            "example": "100"
                          },
                          "unsigned_transaction": {
                            "type": "string",
                            "format": "base64",
                            "description": "Generated unsigned transaction smart contract call data.",
                            "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                          }
                        }
                      }
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "Unique identifier for a customer",
                      "example": "SatoshiNakamoto-xUYJbPw9hw",
                      "minimum": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/v1/cardano/{network}/transaction-submission": {
      "parameters": [
        {
          "name": "network",
          "in": "path",
          "description": "Cardano network",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Cardano network",
            "enum": [
              "mainnet",
              "preprod",
              "localnet"
            ]
          }
        }
      ],
      "post": {
        "summary": "Broadcast Transaction",
        "operationId": "submitTransaction",
        "tags": [
          "Cardano"
        ],
        "description": "Submits a signed transaction to the Cardano network.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Transaction for submission",
                "required": [
                  "signed_transaction"
                ],
                "properties": {
                  "signed_transaction": {
                    "type": "string",
                    "format": "base64",
                    "description": "Hex-encoded raw bytes of a protocol-specific signed transaction.",
                    "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transaction for submission response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Transaction for submission response",
                  "required": [
                    "protocol",
                    "network",
                    "transaction_id",
                    "customer_id"
                  ],
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "description": "Cardano protocol",
                      "enum": [
                        "cardano"
                      ]
                    },
                    "network": {
                      "type": "string",
                      "description": "Cardano network",
                      "enum": [
                        "mainnet",
                        "preprod",
                        "localnet"
                      ]
                    },
                    "transaction_id": {
                      "type": "string",
                      "description": "Unique identifier for a transaction",
                      "format": "base58",
                      "example": "transaction_Wgx98Rbi8nQuL9ddn3mTk1"
                    },
                    "customer_id": {
                      "type": "string",
                      "description": "Unique identifier for a customer",
                      "example": "SatoshiNakamoto-xUYJbPw9hw",
                      "minimum": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Insufficient validators available to process Stake Intent request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          },
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v1/avalanche/{network}/stake-intents": {
      "parameters": [
        {
          "name": "network",
          "in": "path",
          "description": "Avalanche network",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Avalanche network",
            "enum": [
              "mainnet",
              "fuji",
              "local"
            ]
          }
        },
        {
          "in": "header",
          "name": "Idempotency-Key",
          "description": "the unique idempotency key for this request",
          "example": "f1c971b4-7114-4c4b-8ad2-a6f9e33e2cd0",
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "required": false
        }
      ],
      "post": {
        "summary": "Post Stake Intent",
        "operationId": "postAvaxStakeIntent",
        "tags": [
          "Avalanche"
        ],
        "description": "Returns an unsigned transaction that can be used to delegate your tokens to a Blockdaemon validator.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Request object to create a new Stake Intent for Avalanche",
                "required": [
                  "delegator_address",
                  "amount"
                ],
                "properties": {
                  "validator_address": {
                    "type": "string",
                    "description": "Avalanche validator address",
                    "pattern": "^NodeID-[A-Za-z0-9]{43}$",
                    "example": "NodeID-B19uSxUKerjjnA215czAJLHMqNJMbsAMWuSxUKerjjW"
                  },
                  "delegator_address": {
                    "type": "string",
                    "description": "Avalanche delegator address",
                    "pattern": "^([P]|[a-km-zA-HJ-NP-Z1-9]{36,72})-[a-zA-Z]{1,83}1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{38}$",
                    "example": "P-fuji1g2g0jxcfn5sp59ld7g0t0tp4jrqppvqcfqc7hy"
                  },
                  "start_time": {
                    "description": "Avalanche staking start time",
                    "type": "integer",
                    "format": "int64",
                    "example": 1689939023
                  },
                  "end_time": {
                    "description": "Avalanche staking end time",
                    "type": "integer",
                    "format": "int64",
                    "example": 1689939023
                  },
                  "amount": {
                    "type": "string",
                    "description": "Amount of nano-Avalanche to stake. 1 Avalanche = 1e9 nano-Avalanche.",
                    "pattern": "^[1-9]\\d+$",
                    "example": "10000000000"
                  },
                  "plan_id": {
                    "type": "string",
                    "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                    "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "stake_intent_id",
                        "customer_id"
                      ],
                      "properties": {
                        "stake_intent_id": {
                          "type": "string",
                          "format": "base58",
                          "description": "Unique idenifier for a group of stakes.",
                          "example": "stake_intent_Wgx98Rbi8nQuL9ddn3mTk1"
                        },
                        "customer_id": {
                          "type": "string",
                          "description": "Unique identifier for a customer",
                          "example": "SatoshiNakamoto-xUYJbPw9hw",
                          "minimum": 1
                        },
                        "plan_id": {
                          "type": "string",
                          "description": "This feature enables you to stake to validators from the specified plan(s). When no plan id is specified, validators across all plans that match the API route will be available for staking. If it is a shared plan, you can to stake to validators on a shared node from the specified plan.",
                          "example": "plan_Wgx98Rbi8nQuL9ddn3mTk1"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "protocol",
                        "network"
                      ],
                      "properties": {
                        "protocol": {
                          "type": "string",
                          "description": "Avalanche protocol",
                          "enum": [
                            "avalanche"
                          ]
                        },
                        "network": {
                          "type": "string",
                          "description": "Avalanche network",
                          "enum": [
                            "mainnet",
                            "fuji",
                            "local"
                          ]
                        },
                        "avalanche": {
                          "type": "object",
                          "description": "Avalanche Stake Intent",
                          "required": [
                            "validator_address",
                            "unsigned_transaction",
                            "amount",
                            "delegator_address",
                            "start_time",
                            "end_time"
                          ],
                          "properties": {
                            "validator_address": {
                              "type": "string",
                              "description": "Avalanche validator node address",
                              "pattern": "^NodeID-[A-Za-z0-9]{43}$",
                              "example": "NodeID-B19uSxUKerjjnA215czAJLHMqNJMbsAMWuSxUKerjjW"
                            },
                            "unsigned_transaction": {
                              "type": "string",
                              "format": "base64",
                              "description": "Generated unsigned transaction smart contract call data.",
                              "example": "0x22895118000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120087fed394b43849eebef1e88873cd9efdbe33136656e5148e659b8b2f33625d40000000000000000000000000000000000000000000000000000000000000030b81748644e23c4d950f9dd709f3eb73d5eacd9657997e1d9dde7c4ebd8a6519ecb9d0a7fb603d3b68e023278f9650122000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000c509bb854c526af4cee5e037089f7aa8e091d8870000000000000000000000000000000000000000000000000000000000000060b36b79b4b206c0310472c117fa40c05342b5dc3e89f98f42c9da3ce6450d4c603cad55248017fd4eca3ab277cca64569193e4d487f5b2ea78a2bcdc81926c313c05842a3af318967a775783bba22519e8b8886587efa99aa7dab5784f792b187\n"
                            },
                            "amount": {
                              "type": "string",
                              "description": "Denomination of Avalanche.",
                              "pattern": "^[1-9]\\d+$",
                              "example": "10000000000"
                            },
                            "delegator_address": {
                              "type": "string",
                              "description": "Avalanche platform chain address",
                              "pattern": "^([P]|[a-km-zA-HJ-NP-Z1-9]{36,72})-[a-zA-Z]{1,83}1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{38}$",
                              "example": "P-fuji1g2g0jxcfn5sp59ld7g0t0tp4jrqppvqcfqc7hy"
                            },
                            "start_time": {
                              "description": "Avalanche staking start time",
                              "type": "integer",
                              "format": "int64",
                              "example": 1689939023
                            },
                            "end_time": {
                              "description": "Avalanche staking end time",
                              "type": "integer",
                              "format": "int64",
                              "example": 1689939023
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "Detailed human-readable diagnostic message regarding any invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Header 'X-API-Key' missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A human-readable diagnostic message detailing any authorization failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Error response envelope",
                  "required": [
                    "code",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Error code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error Message",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    }
  },
  "tags": [
    {
      "name": "Stake Intents",
      "description": "Manage stake intents"
    },
    {
      "name": "Withdrawal Intents",
      "description": "Manage withdrawal Intents"
    },
    {
      "name": "Deactivation Intents",
      "description": "Manage deactivation intents"
    },
    {
      "name": "Bootstrapping Intents",
      "description": "Manage bootstrapping intents"
    },
    {
      "name": "Reward Intents",
      "description": "Manage reward intents"
    },
    {
      "name": "Validators",
      "description": "Manage validators"
    },
    {
      "name": "Plans",
      "description": "Manage plans"
    },
    {
      "name": "Customers",
      "description": "Manage customers"
    },
    {
      "name": "Ethereum",
      "description": "Ethereum endpoints"
    },
    {
      "name": "Server",
      "description": "Server endpoints"
    },
    {
      "name": "Binance",
      "description": "Binance endpoints"
    },
    {
      "name": "Avalanche",
      "description": "Avalanche endpoints"
    },
    {
      "name": "Cosmos",
      "description": "Cosmos endpoints"
    },
    {
      "name": "Solana",
      "description": "Solana endpoints"
    },
    {
      "name": "Cardano",
      "description": "Cardano endpoints"
    },
    {
      "name": "NEAR",
      "description": "Near endpoints"
    },
    {
      "name": "Polkadot",
      "description": "Polkadot endpoints"
    },
    {
      "name": "Polygon",
      "description": "Polygon endpoints"
    },
    {
      "name": "General",
      "description": "General endpoints"
    }
  ]
}